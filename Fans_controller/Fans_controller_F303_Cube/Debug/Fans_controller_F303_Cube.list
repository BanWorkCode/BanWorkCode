
Fans_controller_F303_Cube.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ab5c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b5c  0800acec  0800acec  0001acec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b848  0800b848  0002008c  2**0
                  CONTENTS
  4 .ARM          00000000  0800b848  0800b848  0002008c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b848  0800b848  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b848  0800b848  0001b848  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b84c  0800b84c  0001b84c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  0800b850  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002008c  2**0
                  CONTENTS
 10 .bss          00002dd4  20000090  20000090  00020090  2**3
                  ALLOC
 11 ._user_heap_stack 00001004  20002e64  20002e64  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00023df4  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005282  00000000  00000000  00043eb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001838  00000000  00000000  00049138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000015d8  00000000  00000000  0004a970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f70a  00000000  00000000  0004bf48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f706  00000000  00000000  0006b652  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a92b4  00000000  00000000  0008ad58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0013400c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006484  00000000  00000000  00134060  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800acd4 	.word	0x0800acd4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	0800acd4 	.word	0x0800acd4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <DISPLAY_ShowTopRow>:
static void DISPLAY_ShowBody(void);
//
//-------------------------------------------------------------
//
//
static void DISPLAY_ShowTopRow(void) {
 8000270:	b580      	push	{r7, lr}
 8000272:	b084      	sub	sp, #16
 8000274:	af00      	add	r7, sp, #0

	ssd1306_SetCursor(1, 1);
 8000276:	2101      	movs	r1, #1
 8000278:	2001      	movs	r0, #1
 800027a:	f00a f8b3 	bl	800a3e4 <ssd1306_SetCursor>
	ssd1306_WriteString(curMainMenu->sectionName, Font_7x10, White);
 800027e:	4b2d      	ldr	r3, [pc, #180]	; (8000334 <DISPLAY_ShowTopRow+0xc4>)
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	6998      	ldr	r0, [r3, #24]
 8000284:	4a2c      	ldr	r2, [pc, #176]	; (8000338 <DISPLAY_ShowTopRow+0xc8>)
 8000286:	2301      	movs	r3, #1
 8000288:	ca06      	ldmia	r2, {r1, r2}
 800028a:	f00a f885 	bl	800a398 <ssd1306_WriteString>

	if (showTime) {
 800028e:	4b2b      	ldr	r3, [pc, #172]	; (800033c <DISPLAY_ShowTopRow+0xcc>)
 8000290:	781b      	ldrb	r3, [r3, #0]
 8000292:	2b00      	cmp	r3, #0
 8000294:	d049      	beq.n	800032a <DISPLAY_ShowTopRow+0xba>

		char temp[16];
		sprintf(temp, "%02d", currentTime.Hours);
 8000296:	4b2a      	ldr	r3, [pc, #168]	; (8000340 <DISPLAY_ShowTopRow+0xd0>)
 8000298:	781b      	ldrb	r3, [r3, #0]
 800029a:	461a      	mov	r2, r3
 800029c:	463b      	mov	r3, r7
 800029e:	4929      	ldr	r1, [pc, #164]	; (8000344 <DISPLAY_ShowTopRow+0xd4>)
 80002a0:	4618      	mov	r0, r3
 80002a2:	f00a f8f7 	bl	800a494 <siprintf>
		ssd1306_SetCursor(33, 1);
 80002a6:	2101      	movs	r1, #1
 80002a8:	2021      	movs	r0, #33	; 0x21
 80002aa:	f00a f89b 	bl	800a3e4 <ssd1306_SetCursor>
		ssd1306_WriteString(temp, Font_7x10, White);
 80002ae:	4a22      	ldr	r2, [pc, #136]	; (8000338 <DISPLAY_ShowTopRow+0xc8>)
 80002b0:	4638      	mov	r0, r7
 80002b2:	2301      	movs	r3, #1
 80002b4:	ca06      	ldmia	r2, {r1, r2}
 80002b6:	f00a f86f 	bl	800a398 <ssd1306_WriteString>
		ssd1306_SetCursor(48, 1);
 80002ba:	2101      	movs	r1, #1
 80002bc:	2030      	movs	r0, #48	; 0x30
 80002be:	f00a f891 	bl	800a3e4 <ssd1306_SetCursor>
		ssd1306_WriteString(":", Font_7x10, White);
 80002c2:	4a1d      	ldr	r2, [pc, #116]	; (8000338 <DISPLAY_ShowTopRow+0xc8>)
 80002c4:	2301      	movs	r3, #1
 80002c6:	ca06      	ldmia	r2, {r1, r2}
 80002c8:	481f      	ldr	r0, [pc, #124]	; (8000348 <DISPLAY_ShowTopRow+0xd8>)
 80002ca:	f00a f865 	bl	800a398 <ssd1306_WriteString>
		sprintf(temp, "%02d", currentTime.Minutes);
 80002ce:	4b1c      	ldr	r3, [pc, #112]	; (8000340 <DISPLAY_ShowTopRow+0xd0>)
 80002d0:	785b      	ldrb	r3, [r3, #1]
 80002d2:	461a      	mov	r2, r3
 80002d4:	463b      	mov	r3, r7
 80002d6:	491b      	ldr	r1, [pc, #108]	; (8000344 <DISPLAY_ShowTopRow+0xd4>)
 80002d8:	4618      	mov	r0, r3
 80002da:	f00a f8db 	bl	800a494 <siprintf>
		ssd1306_SetCursor(55, 1);
 80002de:	2101      	movs	r1, #1
 80002e0:	2037      	movs	r0, #55	; 0x37
 80002e2:	f00a f87f 	bl	800a3e4 <ssd1306_SetCursor>
		ssd1306_WriteString(temp, Font_7x10, White);
 80002e6:	4a14      	ldr	r2, [pc, #80]	; (8000338 <DISPLAY_ShowTopRow+0xc8>)
 80002e8:	4638      	mov	r0, r7
 80002ea:	2301      	movs	r3, #1
 80002ec:	ca06      	ldmia	r2, {r1, r2}
 80002ee:	f00a f853 	bl	800a398 <ssd1306_WriteString>
		ssd1306_SetCursor(69, 1);
 80002f2:	2101      	movs	r1, #1
 80002f4:	2045      	movs	r0, #69	; 0x45
 80002f6:	f00a f875 	bl	800a3e4 <ssd1306_SetCursor>
		ssd1306_WriteString(":", Font_7x10, White);
 80002fa:	4a0f      	ldr	r2, [pc, #60]	; (8000338 <DISPLAY_ShowTopRow+0xc8>)
 80002fc:	2301      	movs	r3, #1
 80002fe:	ca06      	ldmia	r2, {r1, r2}
 8000300:	4811      	ldr	r0, [pc, #68]	; (8000348 <DISPLAY_ShowTopRow+0xd8>)
 8000302:	f00a f849 	bl	800a398 <ssd1306_WriteString>
		sprintf(temp, "%02d", currentTime.Seconds);
 8000306:	4b0e      	ldr	r3, [pc, #56]	; (8000340 <DISPLAY_ShowTopRow+0xd0>)
 8000308:	789b      	ldrb	r3, [r3, #2]
 800030a:	461a      	mov	r2, r3
 800030c:	463b      	mov	r3, r7
 800030e:	490d      	ldr	r1, [pc, #52]	; (8000344 <DISPLAY_ShowTopRow+0xd4>)
 8000310:	4618      	mov	r0, r3
 8000312:	f00a f8bf 	bl	800a494 <siprintf>
		ssd1306_SetCursor(76, 1);
 8000316:	2101      	movs	r1, #1
 8000318:	204c      	movs	r0, #76	; 0x4c
 800031a:	f00a f863 	bl	800a3e4 <ssd1306_SetCursor>
		ssd1306_WriteString(temp, Font_7x10, White);
 800031e:	4a06      	ldr	r2, [pc, #24]	; (8000338 <DISPLAY_ShowTopRow+0xc8>)
 8000320:	4638      	mov	r0, r7
 8000322:	2301      	movs	r3, #1
 8000324:	ca06      	ldmia	r2, {r1, r2}
 8000326:	f00a f837 	bl	800a398 <ssd1306_WriteString>
	}

}
 800032a:	bf00      	nop
 800032c:	3710      	adds	r7, #16
 800032e:	46bd      	mov	sp, r7
 8000330:	bd80      	pop	{r7, pc}
 8000332:	bf00      	nop
 8000334:	2000001c 	.word	0x2000001c
 8000338:	20000020 	.word	0x20000020
 800033c:	200000ac 	.word	0x200000ac
 8000340:	20000e5c 	.word	0x20000e5c
 8000344:	0800acec 	.word	0x0800acec
 8000348:	0800acf4 	.word	0x0800acf4

0800034c <DISPLAY_FillInverseColor>:
//
//-------------------------------------------------------------
//
//
static void DISPLAY_FillInverseColor(void) {
 800034c:	b580      	push	{r7, lr}
 800034e:	b082      	sub	sp, #8
 8000350:	af00      	add	r7, sp, #0
	for (int j = 51; j < 64; j++) {
 8000352:	2333      	movs	r3, #51	; 0x33
 8000354:	607b      	str	r3, [r7, #4]
 8000356:	e013      	b.n	8000380 <DISPLAY_FillInverseColor+0x34>
		for (int i = 0; i < 128; i++) {
 8000358:	2300      	movs	r3, #0
 800035a:	603b      	str	r3, [r7, #0]
 800035c:	e00a      	b.n	8000374 <DISPLAY_FillInverseColor+0x28>
			ssd1306_DrawPixel(i, j, White);
 800035e:	683b      	ldr	r3, [r7, #0]
 8000360:	b2db      	uxtb	r3, r3
 8000362:	687a      	ldr	r2, [r7, #4]
 8000364:	b2d1      	uxtb	r1, r2
 8000366:	2201      	movs	r2, #1
 8000368:	4618      	mov	r0, r3
 800036a:	f009 ff35 	bl	800a1d8 <ssd1306_DrawPixel>
		for (int i = 0; i < 128; i++) {
 800036e:	683b      	ldr	r3, [r7, #0]
 8000370:	3301      	adds	r3, #1
 8000372:	603b      	str	r3, [r7, #0]
 8000374:	683b      	ldr	r3, [r7, #0]
 8000376:	2b7f      	cmp	r3, #127	; 0x7f
 8000378:	ddf1      	ble.n	800035e <DISPLAY_FillInverseColor+0x12>
	for (int j = 51; j < 64; j++) {
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	3301      	adds	r3, #1
 800037e:	607b      	str	r3, [r7, #4]
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	2b3f      	cmp	r3, #63	; 0x3f
 8000384:	dde8      	ble.n	8000358 <DISPLAY_FillInverseColor+0xc>
		}
	}

}
 8000386:	bf00      	nop
 8000388:	bf00      	nop
 800038a:	3708      	adds	r7, #8
 800038c:	46bd      	mov	sp, r7
 800038e:	bd80      	pop	{r7, pc}

08000390 <DISPLAY_ShowBottomRow>:
//
//-------------------------------------------------------------
//
//
static void DISPLAY_ShowBottomRow(void) {
 8000390:	b580      	push	{r7, lr}
 8000392:	b086      	sub	sp, #24
 8000394:	af00      	add	r7, sp, #0
	if (curMainMenu->value3 > 0) {
 8000396:	4bb9      	ldr	r3, [pc, #740]	; (800067c <DISPLAY_ShowBottomRow+0x2ec>)
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	7c5b      	ldrb	r3, [r3, #17]
 800039c:	2b00      	cmp	r3, #0
 800039e:	f000 818f 	beq.w	80006c0 <DISPLAY_ShowBottomRow+0x330>

		DISPLAY_FillInverseColor();
 80003a2:	f7ff ffd3 	bl	800034c <DISPLAY_FillInverseColor>

		char temp[16];
		//вывод информации о режимах работы
		if (curMainMenu->cursor == MENU_CURSOR_SECOND_COLUMN) {
 80003a6:	4bb5      	ldr	r3, [pc, #724]	; (800067c <DISPLAY_ShowBottomRow+0x2ec>)
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	789b      	ldrb	r3, [r3, #2]
 80003ac:	2b01      	cmp	r3, #1
 80003ae:	f040 809a 	bne.w	80004e6 <DISPLAY_ShowBottomRow+0x156>
			ssd1306_SetCursor(1, BOTTOM_ROW);
 80003b2:	2135      	movs	r1, #53	; 0x35
 80003b4:	2001      	movs	r0, #1
 80003b6:	f00a f815 	bl	800a3e4 <ssd1306_SetCursor>
			ssd1306_WriteString("Md", Font_7x10, Black);
 80003ba:	4ab1      	ldr	r2, [pc, #708]	; (8000680 <DISPLAY_ShowBottomRow+0x2f0>)
 80003bc:	2300      	movs	r3, #0
 80003be:	ca06      	ldmia	r2, {r1, r2}
 80003c0:	48b0      	ldr	r0, [pc, #704]	; (8000684 <DISPLAY_ShowBottomRow+0x2f4>)
 80003c2:	f009 ffe9 	bl	800a398 <ssd1306_WriteString>
			sprintf(temp, "%01d", *(curMainMenu->value));
 80003c6:	4bad      	ldr	r3, [pc, #692]	; (800067c <DISPLAY_ShowBottomRow+0x2ec>)
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	685b      	ldr	r3, [r3, #4]
 80003cc:	781b      	ldrb	r3, [r3, #0]
 80003ce:	461a      	mov	r2, r3
 80003d0:	1d3b      	adds	r3, r7, #4
 80003d2:	49ad      	ldr	r1, [pc, #692]	; (8000688 <DISPLAY_ShowBottomRow+0x2f8>)
 80003d4:	4618      	mov	r0, r3
 80003d6:	f00a f85d 	bl	800a494 <siprintf>
			ssd1306_SetCursor(15, BOTTOM_ROW);
 80003da:	2135      	movs	r1, #53	; 0x35
 80003dc:	200f      	movs	r0, #15
 80003de:	f00a f801 	bl	800a3e4 <ssd1306_SetCursor>
			ssd1306_WriteString(temp, Font_7x10, Black);
 80003e2:	4aa7      	ldr	r2, [pc, #668]	; (8000680 <DISPLAY_ShowBottomRow+0x2f0>)
 80003e4:	1d38      	adds	r0, r7, #4
 80003e6:	2300      	movs	r3, #0
 80003e8:	ca06      	ldmia	r2, {r1, r2}
 80003ea:	f009 ffd5 	bl	800a398 <ssd1306_WriteString>
			ssd1306_SetCursor(22, BOTTOM_ROW);
 80003ee:	2135      	movs	r1, #53	; 0x35
 80003f0:	2016      	movs	r0, #22
 80003f2:	f009 fff7 	bl	800a3e4 <ssd1306_SetCursor>
			ssd1306_WriteString(":", Font_7x10, Black);
 80003f6:	4aa2      	ldr	r2, [pc, #648]	; (8000680 <DISPLAY_ShowBottomRow+0x2f0>)
 80003f8:	2300      	movs	r3, #0
 80003fa:	ca06      	ldmia	r2, {r1, r2}
 80003fc:	48a3      	ldr	r0, [pc, #652]	; (800068c <DISPLAY_ShowBottomRow+0x2fc>)
 80003fe:	f009 ffcb 	bl	800a398 <ssd1306_WriteString>
			ssd1306_SetCursor(36, BOTTOM_ROW);
 8000402:	2135      	movs	r1, #53	; 0x35
 8000404:	2024      	movs	r0, #36	; 0x24
 8000406:	f009 ffed 	bl	800a3e4 <ssd1306_SetCursor>
			ssd1306_WriteString("N", Font_7x10, Black);
 800040a:	4a9d      	ldr	r2, [pc, #628]	; (8000680 <DISPLAY_ShowBottomRow+0x2f0>)
 800040c:	2300      	movs	r3, #0
 800040e:	ca06      	ldmia	r2, {r1, r2}
 8000410:	489f      	ldr	r0, [pc, #636]	; (8000690 <DISPLAY_ShowBottomRow+0x300>)
 8000412:	f009 ffc1 	bl	800a398 <ssd1306_WriteString>
			sprintf(temp, "%d", dlRouteM[*(curMainMenu->value)].night);
 8000416:	4b99      	ldr	r3, [pc, #612]	; (800067c <DISPLAY_ShowBottomRow+0x2ec>)
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	685b      	ldr	r3, [r3, #4]
 800041c:	781b      	ldrb	r3, [r3, #0]
 800041e:	4619      	mov	r1, r3
 8000420:	4a9c      	ldr	r2, [pc, #624]	; (8000694 <DISPLAY_ShowBottomRow+0x304>)
 8000422:	460b      	mov	r3, r1
 8000424:	005b      	lsls	r3, r3, #1
 8000426:	440b      	add	r3, r1
 8000428:	4413      	add	r3, r2
 800042a:	781b      	ldrb	r3, [r3, #0]
 800042c:	461a      	mov	r2, r3
 800042e:	1d3b      	adds	r3, r7, #4
 8000430:	4999      	ldr	r1, [pc, #612]	; (8000698 <DISPLAY_ShowBottomRow+0x308>)
 8000432:	4618      	mov	r0, r3
 8000434:	f00a f82e 	bl	800a494 <siprintf>
			ssd1306_SetCursor(43, BOTTOM_ROW);
 8000438:	2135      	movs	r1, #53	; 0x35
 800043a:	202b      	movs	r0, #43	; 0x2b
 800043c:	f009 ffd2 	bl	800a3e4 <ssd1306_SetCursor>
			ssd1306_WriteString(temp, Font_7x10, Black);
 8000440:	4a8f      	ldr	r2, [pc, #572]	; (8000680 <DISPLAY_ShowBottomRow+0x2f0>)
 8000442:	1d38      	adds	r0, r7, #4
 8000444:	2300      	movs	r3, #0
 8000446:	ca06      	ldmia	r2, {r1, r2}
 8000448:	f009 ffa6 	bl	800a398 <ssd1306_WriteString>
			ssd1306_SetCursor(64, BOTTOM_ROW);
 800044c:	2135      	movs	r1, #53	; 0x35
 800044e:	2040      	movs	r0, #64	; 0x40
 8000450:	f009 ffc8 	bl	800a3e4 <ssd1306_SetCursor>
			ssd1306_WriteString("DH", Font_7x10, Black);
 8000454:	4a8a      	ldr	r2, [pc, #552]	; (8000680 <DISPLAY_ShowBottomRow+0x2f0>)
 8000456:	2300      	movs	r3, #0
 8000458:	ca06      	ldmia	r2, {r1, r2}
 800045a:	4890      	ldr	r0, [pc, #576]	; (800069c <DISPLAY_ShowBottomRow+0x30c>)
 800045c:	f009 ff9c 	bl	800a398 <ssd1306_WriteString>
			sprintf(temp, "%d", dlRouteM[*(curMainMenu->value)].dayHight);
 8000460:	4b86      	ldr	r3, [pc, #536]	; (800067c <DISPLAY_ShowBottomRow+0x2ec>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	685b      	ldr	r3, [r3, #4]
 8000466:	781b      	ldrb	r3, [r3, #0]
 8000468:	4619      	mov	r1, r3
 800046a:	4a8a      	ldr	r2, [pc, #552]	; (8000694 <DISPLAY_ShowBottomRow+0x304>)
 800046c:	460b      	mov	r3, r1
 800046e:	005b      	lsls	r3, r3, #1
 8000470:	440b      	add	r3, r1
 8000472:	4413      	add	r3, r2
 8000474:	3301      	adds	r3, #1
 8000476:	781b      	ldrb	r3, [r3, #0]
 8000478:	461a      	mov	r2, r3
 800047a:	1d3b      	adds	r3, r7, #4
 800047c:	4986      	ldr	r1, [pc, #536]	; (8000698 <DISPLAY_ShowBottomRow+0x308>)
 800047e:	4618      	mov	r0, r3
 8000480:	f00a f808 	bl	800a494 <siprintf>
			ssd1306_SetCursor(78, BOTTOM_ROW);
 8000484:	2135      	movs	r1, #53	; 0x35
 8000486:	204e      	movs	r0, #78	; 0x4e
 8000488:	f009 ffac 	bl	800a3e4 <ssd1306_SetCursor>
			ssd1306_WriteString(temp, Font_7x10, Black);
 800048c:	4a7c      	ldr	r2, [pc, #496]	; (8000680 <DISPLAY_ShowBottomRow+0x2f0>)
 800048e:	1d38      	adds	r0, r7, #4
 8000490:	2300      	movs	r3, #0
 8000492:	ca06      	ldmia	r2, {r1, r2}
 8000494:	f009 ff80 	bl	800a398 <ssd1306_WriteString>
			ssd1306_SetCursor(99, BOTTOM_ROW);
 8000498:	2135      	movs	r1, #53	; 0x35
 800049a:	2063      	movs	r0, #99	; 0x63
 800049c:	f009 ffa2 	bl	800a3e4 <ssd1306_SetCursor>
			ssd1306_WriteString("DL", Font_7x10, Black);
 80004a0:	4a77      	ldr	r2, [pc, #476]	; (8000680 <DISPLAY_ShowBottomRow+0x2f0>)
 80004a2:	2300      	movs	r3, #0
 80004a4:	ca06      	ldmia	r2, {r1, r2}
 80004a6:	487e      	ldr	r0, [pc, #504]	; (80006a0 <DISPLAY_ShowBottomRow+0x310>)
 80004a8:	f009 ff76 	bl	800a398 <ssd1306_WriteString>
			sprintf(temp, "%d", dlRouteM[*(curMainMenu->value)].dayLow);
 80004ac:	4b73      	ldr	r3, [pc, #460]	; (800067c <DISPLAY_ShowBottomRow+0x2ec>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	685b      	ldr	r3, [r3, #4]
 80004b2:	781b      	ldrb	r3, [r3, #0]
 80004b4:	4619      	mov	r1, r3
 80004b6:	4a77      	ldr	r2, [pc, #476]	; (8000694 <DISPLAY_ShowBottomRow+0x304>)
 80004b8:	460b      	mov	r3, r1
 80004ba:	005b      	lsls	r3, r3, #1
 80004bc:	440b      	add	r3, r1
 80004be:	4413      	add	r3, r2
 80004c0:	3302      	adds	r3, #2
 80004c2:	781b      	ldrb	r3, [r3, #0]
 80004c4:	461a      	mov	r2, r3
 80004c6:	1d3b      	adds	r3, r7, #4
 80004c8:	4973      	ldr	r1, [pc, #460]	; (8000698 <DISPLAY_ShowBottomRow+0x308>)
 80004ca:	4618      	mov	r0, r3
 80004cc:	f009 ffe2 	bl	800a494 <siprintf>
			ssd1306_SetCursor(113, BOTTOM_ROW);
 80004d0:	2135      	movs	r1, #53	; 0x35
 80004d2:	2071      	movs	r0, #113	; 0x71
 80004d4:	f009 ff86 	bl	800a3e4 <ssd1306_SetCursor>
			ssd1306_WriteString(temp, Font_7x10, Black);
 80004d8:	4a69      	ldr	r2, [pc, #420]	; (8000680 <DISPLAY_ShowBottomRow+0x2f0>)
 80004da:	1d38      	adds	r0, r7, #4
 80004dc:	2300      	movs	r3, #0
 80004de:	ca06      	ldmia	r2, {r1, r2}
 80004e0:	f009 ff5a 	bl	800a398 <ssd1306_WriteString>
			} else {
				ssd1306_WriteString("OFF", Font_7x10, Black);
			}
		}
	}
}
 80004e4:	e0ec      	b.n	80006c0 <DISPLAY_ShowBottomRow+0x330>
			ssd1306_SetCursor(1, BOTTOM_ROW);
 80004e6:	2135      	movs	r1, #53	; 0x35
 80004e8:	2001      	movs	r0, #1
 80004ea:	f009 ff7b 	bl	800a3e4 <ssd1306_SetCursor>
			ssd1306_WriteString("Day:", Font_7x10, Black);
 80004ee:	4a64      	ldr	r2, [pc, #400]	; (8000680 <DISPLAY_ShowBottomRow+0x2f0>)
 80004f0:	2300      	movs	r3, #0
 80004f2:	ca06      	ldmia	r2, {r1, r2}
 80004f4:	486b      	ldr	r0, [pc, #428]	; (80006a4 <DISPLAY_ShowBottomRow+0x314>)
 80004f6:	f009 ff4f 	bl	800a398 <ssd1306_WriteString>
			sprintf(temp, "%d", (ProgramForFun[curMainMenu->value3 - 1].currentDay + 1));
 80004fa:	4b60      	ldr	r3, [pc, #384]	; (800067c <DISPLAY_ShowBottomRow+0x2ec>)
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	7c5b      	ldrb	r3, [r3, #17]
 8000500:	3b01      	subs	r3, #1
 8000502:	4a69      	ldr	r2, [pc, #420]	; (80006a8 <DISPLAY_ShowBottomRow+0x318>)
 8000504:	2186      	movs	r1, #134	; 0x86
 8000506:	fb01 f303 	mul.w	r3, r1, r3
 800050a:	4413      	add	r3, r2
 800050c:	3302      	adds	r3, #2
 800050e:	781b      	ldrb	r3, [r3, #0]
 8000510:	1c5a      	adds	r2, r3, #1
 8000512:	1d3b      	adds	r3, r7, #4
 8000514:	4960      	ldr	r1, [pc, #384]	; (8000698 <DISPLAY_ShowBottomRow+0x308>)
 8000516:	4618      	mov	r0, r3
 8000518:	f009 ffbc 	bl	800a494 <siprintf>
			ssd1306_SetCursor(30, BOTTOM_ROW);
 800051c:	2135      	movs	r1, #53	; 0x35
 800051e:	201e      	movs	r0, #30
 8000520:	f009 ff60 	bl	800a3e4 <ssd1306_SetCursor>
			ssd1306_WriteString(temp, Font_7x10, Black);
 8000524:	4a56      	ldr	r2, [pc, #344]	; (8000680 <DISPLAY_ShowBottomRow+0x2f0>)
 8000526:	1d38      	adds	r0, r7, #4
 8000528:	2300      	movs	r3, #0
 800052a:	ca06      	ldmia	r2, {r1, r2}
 800052c:	f009 ff34 	bl	800a398 <ssd1306_WriteString>
			if (ProgramForFun[curMainMenu->value3 - 1].currentDay + 1 > 99) {
 8000530:	4b52      	ldr	r3, [pc, #328]	; (800067c <DISPLAY_ShowBottomRow+0x2ec>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	7c5b      	ldrb	r3, [r3, #17]
 8000536:	3b01      	subs	r3, #1
 8000538:	4a5b      	ldr	r2, [pc, #364]	; (80006a8 <DISPLAY_ShowBottomRow+0x318>)
 800053a:	2186      	movs	r1, #134	; 0x86
 800053c:	fb01 f303 	mul.w	r3, r1, r3
 8000540:	4413      	add	r3, r2
 8000542:	3302      	adds	r3, #2
 8000544:	781b      	ldrb	r3, [r3, #0]
 8000546:	2b62      	cmp	r3, #98	; 0x62
 8000548:	d902      	bls.n	8000550 <DISPLAY_ShowBottomRow+0x1c0>
				coordinateX = 14;
 800054a:	230e      	movs	r3, #14
 800054c:	75fb      	strb	r3, [r7, #23]
 800054e:	e02b      	b.n	80005a8 <DISPLAY_ShowBottomRow+0x218>
			} else if (ProgramForFun[curMainMenu->value3 - 1].currentDay + 1 < 100 && ProgramForFun[curMainMenu->value3 - 1].currentDay + 1 > 9) {
 8000550:	4b4a      	ldr	r3, [pc, #296]	; (800067c <DISPLAY_ShowBottomRow+0x2ec>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	7c5b      	ldrb	r3, [r3, #17]
 8000556:	3b01      	subs	r3, #1
 8000558:	4a53      	ldr	r2, [pc, #332]	; (80006a8 <DISPLAY_ShowBottomRow+0x318>)
 800055a:	2186      	movs	r1, #134	; 0x86
 800055c:	fb01 f303 	mul.w	r3, r1, r3
 8000560:	4413      	add	r3, r2
 8000562:	3302      	adds	r3, #2
 8000564:	781b      	ldrb	r3, [r3, #0]
 8000566:	2b62      	cmp	r3, #98	; 0x62
 8000568:	d80f      	bhi.n	800058a <DISPLAY_ShowBottomRow+0x1fa>
 800056a:	4b44      	ldr	r3, [pc, #272]	; (800067c <DISPLAY_ShowBottomRow+0x2ec>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	7c5b      	ldrb	r3, [r3, #17]
 8000570:	3b01      	subs	r3, #1
 8000572:	4a4d      	ldr	r2, [pc, #308]	; (80006a8 <DISPLAY_ShowBottomRow+0x318>)
 8000574:	2186      	movs	r1, #134	; 0x86
 8000576:	fb01 f303 	mul.w	r3, r1, r3
 800057a:	4413      	add	r3, r2
 800057c:	3302      	adds	r3, #2
 800057e:	781b      	ldrb	r3, [r3, #0]
 8000580:	2b08      	cmp	r3, #8
 8000582:	d902      	bls.n	800058a <DISPLAY_ShowBottomRow+0x1fa>
				coordinateX = 7;
 8000584:	2307      	movs	r3, #7
 8000586:	75fb      	strb	r3, [r7, #23]
 8000588:	e00e      	b.n	80005a8 <DISPLAY_ShowBottomRow+0x218>
			} else if (ProgramForFun[curMainMenu->value3 - 1].currentDay + 1 < 10) {
 800058a:	4b3c      	ldr	r3, [pc, #240]	; (800067c <DISPLAY_ShowBottomRow+0x2ec>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	7c5b      	ldrb	r3, [r3, #17]
 8000590:	3b01      	subs	r3, #1
 8000592:	4a45      	ldr	r2, [pc, #276]	; (80006a8 <DISPLAY_ShowBottomRow+0x318>)
 8000594:	2186      	movs	r1, #134	; 0x86
 8000596:	fb01 f303 	mul.w	r3, r1, r3
 800059a:	4413      	add	r3, r2
 800059c:	3302      	adds	r3, #2
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	2b08      	cmp	r3, #8
 80005a2:	d801      	bhi.n	80005a8 <DISPLAY_ShowBottomRow+0x218>
				coordinateX = 0;
 80005a4:	2300      	movs	r3, #0
 80005a6:	75fb      	strb	r3, [r7, #23]
			ssd1306_SetCursor(37 + coordinateX, BOTTOM_ROW);
 80005a8:	7dfb      	ldrb	r3, [r7, #23]
 80005aa:	3325      	adds	r3, #37	; 0x25
 80005ac:	b2db      	uxtb	r3, r3
 80005ae:	2135      	movs	r1, #53	; 0x35
 80005b0:	4618      	mov	r0, r3
 80005b2:	f009 ff17 	bl	800a3e4 <ssd1306_SetCursor>
			ssd1306_WriteString("/", Font_7x10, Black);
 80005b6:	4a32      	ldr	r2, [pc, #200]	; (8000680 <DISPLAY_ShowBottomRow+0x2f0>)
 80005b8:	2300      	movs	r3, #0
 80005ba:	ca06      	ldmia	r2, {r1, r2}
 80005bc:	483b      	ldr	r0, [pc, #236]	; (80006ac <DISPLAY_ShowBottomRow+0x31c>)
 80005be:	f009 feeb 	bl	800a398 <ssd1306_WriteString>
			uint8_t sumdays = ProgramForFun[curMainMenu->value3 - 1].numberOfDays1 + ProgramForFun[curMainMenu->value3 - 1].numberOfDays2 + ProgramForFun[curMainMenu->value3 - 1].numberOfDays3
 80005c2:	4b2e      	ldr	r3, [pc, #184]	; (800067c <DISPLAY_ShowBottomRow+0x2ec>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	7c5b      	ldrb	r3, [r3, #17]
 80005c8:	3b01      	subs	r3, #1
 80005ca:	4a37      	ldr	r2, [pc, #220]	; (80006a8 <DISPLAY_ShowBottomRow+0x318>)
 80005cc:	2186      	movs	r1, #134	; 0x86
 80005ce:	fb01 f303 	mul.w	r3, r1, r3
 80005d2:	4413      	add	r3, r2
 80005d4:	337f      	adds	r3, #127	; 0x7f
 80005d6:	781a      	ldrb	r2, [r3, #0]
 80005d8:	4b28      	ldr	r3, [pc, #160]	; (800067c <DISPLAY_ShowBottomRow+0x2ec>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	7c5b      	ldrb	r3, [r3, #17]
 80005de:	3b01      	subs	r3, #1
 80005e0:	4931      	ldr	r1, [pc, #196]	; (80006a8 <DISPLAY_ShowBottomRow+0x318>)
 80005e2:	2086      	movs	r0, #134	; 0x86
 80005e4:	fb00 f303 	mul.w	r3, r0, r3
 80005e8:	440b      	add	r3, r1
 80005ea:	3381      	adds	r3, #129	; 0x81
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	4413      	add	r3, r2
 80005f0:	b2da      	uxtb	r2, r3
 80005f2:	4b22      	ldr	r3, [pc, #136]	; (800067c <DISPLAY_ShowBottomRow+0x2ec>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	7c5b      	ldrb	r3, [r3, #17]
 80005f8:	3b01      	subs	r3, #1
 80005fa:	492b      	ldr	r1, [pc, #172]	; (80006a8 <DISPLAY_ShowBottomRow+0x318>)
 80005fc:	2086      	movs	r0, #134	; 0x86
 80005fe:	fb00 f303 	mul.w	r3, r0, r3
 8000602:	440b      	add	r3, r1
 8000604:	3383      	adds	r3, #131	; 0x83
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	4413      	add	r3, r2
 800060a:	b2da      	uxtb	r2, r3
					+ ProgramForFun[curMainMenu->value3 - 1].numberOfDays4;
 800060c:	4b1b      	ldr	r3, [pc, #108]	; (800067c <DISPLAY_ShowBottomRow+0x2ec>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	7c5b      	ldrb	r3, [r3, #17]
 8000612:	3b01      	subs	r3, #1
 8000614:	4924      	ldr	r1, [pc, #144]	; (80006a8 <DISPLAY_ShowBottomRow+0x318>)
 8000616:	2086      	movs	r0, #134	; 0x86
 8000618:	fb00 f303 	mul.w	r3, r0, r3
 800061c:	440b      	add	r3, r1
 800061e:	3385      	adds	r3, #133	; 0x85
 8000620:	781b      	ldrb	r3, [r3, #0]
			uint8_t sumdays = ProgramForFun[curMainMenu->value3 - 1].numberOfDays1 + ProgramForFun[curMainMenu->value3 - 1].numberOfDays2 + ProgramForFun[curMainMenu->value3 - 1].numberOfDays3
 8000622:	4413      	add	r3, r2
 8000624:	75bb      	strb	r3, [r7, #22]
			sprintf(temp, "%d", sumdays);
 8000626:	7dba      	ldrb	r2, [r7, #22]
 8000628:	1d3b      	adds	r3, r7, #4
 800062a:	491b      	ldr	r1, [pc, #108]	; (8000698 <DISPLAY_ShowBottomRow+0x308>)
 800062c:	4618      	mov	r0, r3
 800062e:	f009 ff31 	bl	800a494 <siprintf>
			ssd1306_SetCursor(44 + coordinateX, BOTTOM_ROW);
 8000632:	7dfb      	ldrb	r3, [r7, #23]
 8000634:	332c      	adds	r3, #44	; 0x2c
 8000636:	b2db      	uxtb	r3, r3
 8000638:	2135      	movs	r1, #53	; 0x35
 800063a:	4618      	mov	r0, r3
 800063c:	f009 fed2 	bl	800a3e4 <ssd1306_SetCursor>
			ssd1306_WriteString(temp, Font_7x10, Black);
 8000640:	4a0f      	ldr	r2, [pc, #60]	; (8000680 <DISPLAY_ShowBottomRow+0x2f0>)
 8000642:	1d38      	adds	r0, r7, #4
 8000644:	2300      	movs	r3, #0
 8000646:	ca06      	ldmia	r2, {r1, r2}
 8000648:	f009 fea6 	bl	800a398 <ssd1306_WriteString>
			ssd1306_SetCursor(92, BOTTOM_ROW);
 800064c:	2135      	movs	r1, #53	; 0x35
 800064e:	205c      	movs	r0, #92	; 0x5c
 8000650:	f009 fec8 	bl	800a3e4 <ssd1306_SetCursor>
			if (ProgramForFun[curMainMenu->value3 - 1].fanOn) {
 8000654:	4b09      	ldr	r3, [pc, #36]	; (800067c <DISPLAY_ShowBottomRow+0x2ec>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	7c5b      	ldrb	r3, [r3, #17]
 800065a:	3b01      	subs	r3, #1
 800065c:	4a12      	ldr	r2, [pc, #72]	; (80006a8 <DISPLAY_ShowBottomRow+0x318>)
 800065e:	2186      	movs	r1, #134	; 0x86
 8000660:	fb01 f303 	mul.w	r3, r1, r3
 8000664:	4413      	add	r3, r2
 8000666:	3301      	adds	r3, #1
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	2b00      	cmp	r3, #0
 800066c:	d022      	beq.n	80006b4 <DISPLAY_ShowBottomRow+0x324>
				ssd1306_WriteString("ON", Font_7x10, Black);
 800066e:	4a04      	ldr	r2, [pc, #16]	; (8000680 <DISPLAY_ShowBottomRow+0x2f0>)
 8000670:	2300      	movs	r3, #0
 8000672:	ca06      	ldmia	r2, {r1, r2}
 8000674:	480e      	ldr	r0, [pc, #56]	; (80006b0 <DISPLAY_ShowBottomRow+0x320>)
 8000676:	f009 fe8f 	bl	800a398 <ssd1306_WriteString>
}
 800067a:	e021      	b.n	80006c0 <DISPLAY_ShowBottomRow+0x330>
 800067c:	2000001c 	.word	0x2000001c
 8000680:	20000020 	.word	0x20000020
 8000684:	0800acf8 	.word	0x0800acf8
 8000688:	0800acfc 	.word	0x0800acfc
 800068c:	0800acf4 	.word	0x0800acf4
 8000690:	0800ad04 	.word	0x0800ad04
 8000694:	20001300 	.word	0x20001300
 8000698:	0800ad08 	.word	0x0800ad08
 800069c:	0800ad0c 	.word	0x0800ad0c
 80006a0:	0800ad10 	.word	0x0800ad10
 80006a4:	0800ad14 	.word	0x0800ad14
 80006a8:	20001310 	.word	0x20001310
 80006ac:	0800ad1c 	.word	0x0800ad1c
 80006b0:	0800ad20 	.word	0x0800ad20
				ssd1306_WriteString("OFF", Font_7x10, Black);
 80006b4:	4a04      	ldr	r2, [pc, #16]	; (80006c8 <DISPLAY_ShowBottomRow+0x338>)
 80006b6:	2300      	movs	r3, #0
 80006b8:	ca06      	ldmia	r2, {r1, r2}
 80006ba:	4804      	ldr	r0, [pc, #16]	; (80006cc <DISPLAY_ShowBottomRow+0x33c>)
 80006bc:	f009 fe6c 	bl	800a398 <ssd1306_WriteString>
}
 80006c0:	bf00      	nop
 80006c2:	3718      	adds	r7, #24
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	20000020 	.word	0x20000020
 80006cc:	0800ad24 	.word	0x0800ad24

080006d0 <DISPLAY_ShowBody>:
//
//-------------------------------------------------------------
//
//
static void DISPLAY_ShowBody(void) {
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b08a      	sub	sp, #40	; 0x28
 80006d4:	af00      	add	r7, sp, #0

	MenuItemStruct *forCounting = curMainMenu;
 80006d6:	4b70      	ldr	r3, [pc, #448]	; (8000898 <DISPLAY_ShowBody+0x1c8>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	627b      	str	r3, [r7, #36]	; 0x24
	MenuItemStruct *menuItemstr[NUMBER_VISIBLE_ROWS];

	int numberItemsInSection = 0; // количество элементов в разделе.
 80006dc:	2300      	movs	r3, #0
 80006de:	623b      	str	r3, [r7, #32]
	while (forCounting != NULL)	// определяем id последненго пункта в разделе
 80006e0:	e005      	b.n	80006ee <DISPLAY_ShowBody+0x1e>
	{
		numberItemsInSection = forCounting->id;
 80006e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	623b      	str	r3, [r7, #32]
		forCounting = forCounting->down;
 80006e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006ea:	6a1b      	ldr	r3, [r3, #32]
 80006ec:	627b      	str	r3, [r7, #36]	; 0x24
	while (forCounting != NULL)	// определяем id последненго пункта в разделе
 80006ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d1f6      	bne.n	80006e2 <DISPLAY_ShowBody+0x12>
	}

	int8_t firstItem = 0;
 80006f4:	2300      	movs	r3, #0
 80006f6:	77fb      	strb	r3, [r7, #31]
	uint8_t cursorRow = ROW_1;
 80006f8:	2310      	movs	r3, #16
 80006fa:	77bb      	strb	r3, [r7, #30]
	char temp[16];

	if (curMainMenu->id == 0) // если первый элемент, то указатель ">" на первой строке
 80006fc:	4b66      	ldr	r3, [pc, #408]	; (8000898 <DISPLAY_ShowBody+0x1c8>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	2b00      	cmp	r3, #0
 8000704:	d104      	bne.n	8000710 <DISPLAY_ShowBody+0x40>
			{
		firstItem = 0;
 8000706:	2300      	movs	r3, #0
 8000708:	77fb      	strb	r3, [r7, #31]
		cursorRow = ROW_1;
 800070a:	2310      	movs	r3, #16
 800070c:	77bb      	strb	r3, [r7, #30]
 800070e:	e01b      	b.n	8000748 <DISPLAY_ShowBody+0x78>

	} else if (curMainMenu->id > 0 && curMainMenu->id < (numberItemsInSection)) // если id>0 но не последний, то указатель на второй строке
 8000710:	4b61      	ldr	r3, [pc, #388]	; (8000898 <DISPLAY_ShowBody+0x1c8>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	2b00      	cmp	r3, #0
 8000718:	d00b      	beq.n	8000732 <DISPLAY_ShowBody+0x62>
 800071a:	4b5f      	ldr	r3, [pc, #380]	; (8000898 <DISPLAY_ShowBody+0x1c8>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	461a      	mov	r2, r3
 8000722:	6a3b      	ldr	r3, [r7, #32]
 8000724:	4293      	cmp	r3, r2
 8000726:	dd04      	ble.n	8000732 <DISPLAY_ShowBody+0x62>
			{
		firstItem = -1;
 8000728:	23ff      	movs	r3, #255	; 0xff
 800072a:	77fb      	strb	r3, [r7, #31]
		cursorRow = ROW_2;
 800072c:	231c      	movs	r3, #28
 800072e:	77bb      	strb	r3, [r7, #30]
 8000730:	e00a      	b.n	8000748 <DISPLAY_ShowBody+0x78>
	} else if (curMainMenu->id == numberItemsInSection) //если id последний, то указатель на третьей строке
 8000732:	4b59      	ldr	r3, [pc, #356]	; (8000898 <DISPLAY_ShowBody+0x1c8>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	461a      	mov	r2, r3
 800073a:	6a3b      	ldr	r3, [r7, #32]
 800073c:	4293      	cmp	r3, r2
 800073e:	d103      	bne.n	8000748 <DISPLAY_ShowBody+0x78>
			{
		firstItem = -2;
 8000740:	23fe      	movs	r3, #254	; 0xfe
 8000742:	77fb      	strb	r3, [r7, #31]
		cursorRow = ROW_3;
 8000744:	2328      	movs	r3, #40	; 0x28
 8000746:	77bb      	strb	r3, [r7, #30]
	}

	if (curMainMenu->cursor == MENU_CURSOR_FIRST_COLUMN) {
 8000748:	4b53      	ldr	r3, [pc, #332]	; (8000898 <DISPLAY_ShowBody+0x1c8>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	789b      	ldrb	r3, [r3, #2]
 800074e:	2b00      	cmp	r3, #0
 8000750:	d105      	bne.n	800075e <DISPLAY_ShowBody+0x8e>
		ssd1306_SetCursor( COLUMN_1 - 8, cursorRow);
 8000752:	7fbb      	ldrb	r3, [r7, #30]
 8000754:	4619      	mov	r1, r3
 8000756:	2001      	movs	r0, #1
 8000758:	f009 fe44 	bl	800a3e4 <ssd1306_SetCursor>
 800075c:	e014      	b.n	8000788 <DISPLAY_ShowBody+0xb8>
	} else if (curMainMenu->cursor == MENU_CURSOR_SECOND_COLUMN) {
 800075e:	4b4e      	ldr	r3, [pc, #312]	; (8000898 <DISPLAY_ShowBody+0x1c8>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	789b      	ldrb	r3, [r3, #2]
 8000764:	2b01      	cmp	r3, #1
 8000766:	d105      	bne.n	8000774 <DISPLAY_ShowBody+0xa4>
		ssd1306_SetCursor( COLUMN_2 - 8, cursorRow);
 8000768:	7fbb      	ldrb	r3, [r7, #30]
 800076a:	4619      	mov	r1, r3
 800076c:	2040      	movs	r0, #64	; 0x40
 800076e:	f009 fe39 	bl	800a3e4 <ssd1306_SetCursor>
 8000772:	e009      	b.n	8000788 <DISPLAY_ShowBody+0xb8>

	} else if (curMainMenu->cursor == MENU_CURSOR_THIRD_COLUMN) {
 8000774:	4b48      	ldr	r3, [pc, #288]	; (8000898 <DISPLAY_ShowBody+0x1c8>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	789b      	ldrb	r3, [r3, #2]
 800077a:	2b02      	cmp	r3, #2
 800077c:	d104      	bne.n	8000788 <DISPLAY_ShowBody+0xb8>
		ssd1306_SetCursor( COLUMN_3 - 8, cursorRow);
 800077e:	7fbb      	ldrb	r3, [r7, #30]
 8000780:	4619      	mov	r1, r3
 8000782:	2061      	movs	r0, #97	; 0x61
 8000784:	f009 fe2e 	bl	800a3e4 <ssd1306_SetCursor>

	}

	ssd1306_WriteString(">", Font_7x10, White);
 8000788:	4a44      	ldr	r2, [pc, #272]	; (800089c <DISPLAY_ShowBody+0x1cc>)
 800078a:	2301      	movs	r3, #1
 800078c:	ca06      	ldmia	r2, {r1, r2}
 800078e:	4844      	ldr	r0, [pc, #272]	; (80008a0 <DISPLAY_ShowBody+0x1d0>)
 8000790:	f009 fe02 	bl	800a398 <ssd1306_WriteString>

	for (uint8_t i = 0, row = ROW_1; i < NUMBER_VISIBLE_ROWS; firstItem++, i++, row += NEXT_ROW) {
 8000794:	2300      	movs	r3, #0
 8000796:	777b      	strb	r3, [r7, #29]
 8000798:	2310      	movs	r3, #16
 800079a:	773b      	strb	r3, [r7, #28]
 800079c:	e074      	b.n	8000888 <DISPLAY_ShowBody+0x1b8>
		menuItemstr[i] = curMainMenu + firstItem;
 800079e:	4b3e      	ldr	r3, [pc, #248]	; (8000898 <DISPLAY_ShowBody+0x1c8>)
 80007a0:	6819      	ldr	r1, [r3, #0]
 80007a2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80007a6:	222c      	movs	r2, #44	; 0x2c
 80007a8:	fb02 f203 	mul.w	r2, r2, r3
 80007ac:	7f7b      	ldrb	r3, [r7, #29]
 80007ae:	440a      	add	r2, r1
 80007b0:	009b      	lsls	r3, r3, #2
 80007b2:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80007b6:	440b      	add	r3, r1
 80007b8:	f843 2c18 	str.w	r2, [r3, #-24]

		ssd1306_SetCursor( COLUMN_1, row);
 80007bc:	7f3b      	ldrb	r3, [r7, #28]
 80007be:	4619      	mov	r1, r3
 80007c0:	2009      	movs	r0, #9
 80007c2:	f009 fe0f 	bl	800a3e4 <ssd1306_SetCursor>
		ssd1306_WriteString((menuItemstr[i]->name), Font_7x10, White);
 80007c6:	7f7b      	ldrb	r3, [r7, #29]
 80007c8:	009b      	lsls	r3, r3, #2
 80007ca:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80007ce:	4413      	add	r3, r2
 80007d0:	f853 3c18 	ldr.w	r3, [r3, #-24]
 80007d4:	6958      	ldr	r0, [r3, #20]
 80007d6:	4a31      	ldr	r2, [pc, #196]	; (800089c <DISPLAY_ShowBody+0x1cc>)
 80007d8:	2301      	movs	r3, #1
 80007da:	ca06      	ldmia	r2, {r1, r2}
 80007dc:	f009 fddc 	bl	800a398 <ssd1306_WriteString>

		if (menuItemstr[i]->type > MENU_TYPE_ONE_COLUMN) {
 80007e0:	7f7b      	ldrb	r3, [r7, #29]
 80007e2:	009b      	lsls	r3, r3, #2
 80007e4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80007e8:	4413      	add	r3, r2
 80007ea:	f853 3c18 	ldr.w	r3, [r3, #-24]
 80007ee:	785b      	ldrb	r3, [r3, #1]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d019      	beq.n	8000828 <DISPLAY_ShowBody+0x158>
			sprintf(temp, "%d", *(menuItemstr[i]->value));
 80007f4:	7f7b      	ldrb	r3, [r7, #29]
 80007f6:	009b      	lsls	r3, r3, #2
 80007f8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80007fc:	4413      	add	r3, r2
 80007fe:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8000802:	685b      	ldr	r3, [r3, #4]
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	461a      	mov	r2, r3
 8000808:	463b      	mov	r3, r7
 800080a:	4926      	ldr	r1, [pc, #152]	; (80008a4 <DISPLAY_ShowBody+0x1d4>)
 800080c:	4618      	mov	r0, r3
 800080e:	f009 fe41 	bl	800a494 <siprintf>
			ssd1306_SetCursor( COLUMN_2, row);
 8000812:	7f3b      	ldrb	r3, [r7, #28]
 8000814:	4619      	mov	r1, r3
 8000816:	2048      	movs	r0, #72	; 0x48
 8000818:	f009 fde4 	bl	800a3e4 <ssd1306_SetCursor>
			ssd1306_WriteString(temp, Font_7x10, White);
 800081c:	4a1f      	ldr	r2, [pc, #124]	; (800089c <DISPLAY_ShowBody+0x1cc>)
 800081e:	4638      	mov	r0, r7
 8000820:	2301      	movs	r3, #1
 8000822:	ca06      	ldmia	r2, {r1, r2}
 8000824:	f009 fdb8 	bl	800a398 <ssd1306_WriteString>

		}
		if (menuItemstr[i]->type == MENU_TYPE_TREE_COLUMN) {
 8000828:	7f7b      	ldrb	r3, [r7, #29]
 800082a:	009b      	lsls	r3, r3, #2
 800082c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000830:	4413      	add	r3, r2
 8000832:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8000836:	785b      	ldrb	r3, [r3, #1]
 8000838:	2b02      	cmp	r3, #2
 800083a:	d119      	bne.n	8000870 <DISPLAY_ShowBody+0x1a0>
			sprintf(temp, "%d", *(menuItemstr[i]->value2));
 800083c:	7f7b      	ldrb	r3, [r7, #29]
 800083e:	009b      	lsls	r3, r3, #2
 8000840:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000844:	4413      	add	r3, r2
 8000846:	f853 3c18 	ldr.w	r3, [r3, #-24]
 800084a:	68db      	ldr	r3, [r3, #12]
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	461a      	mov	r2, r3
 8000850:	463b      	mov	r3, r7
 8000852:	4914      	ldr	r1, [pc, #80]	; (80008a4 <DISPLAY_ShowBody+0x1d4>)
 8000854:	4618      	mov	r0, r3
 8000856:	f009 fe1d 	bl	800a494 <siprintf>
			ssd1306_SetCursor( COLUMN_3, row);
 800085a:	7f3b      	ldrb	r3, [r7, #28]
 800085c:	4619      	mov	r1, r3
 800085e:	2069      	movs	r0, #105	; 0x69
 8000860:	f009 fdc0 	bl	800a3e4 <ssd1306_SetCursor>
			ssd1306_WriteString(temp, Font_7x10, White);
 8000864:	4a0d      	ldr	r2, [pc, #52]	; (800089c <DISPLAY_ShowBody+0x1cc>)
 8000866:	4638      	mov	r0, r7
 8000868:	2301      	movs	r3, #1
 800086a:	ca06      	ldmia	r2, {r1, r2}
 800086c:	f009 fd94 	bl	800a398 <ssd1306_WriteString>
	for (uint8_t i = 0, row = ROW_1; i < NUMBER_VISIBLE_ROWS; firstItem++, i++, row += NEXT_ROW) {
 8000870:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000874:	b2db      	uxtb	r3, r3
 8000876:	3301      	adds	r3, #1
 8000878:	b2db      	uxtb	r3, r3
 800087a:	77fb      	strb	r3, [r7, #31]
 800087c:	7f7b      	ldrb	r3, [r7, #29]
 800087e:	3301      	adds	r3, #1
 8000880:	777b      	strb	r3, [r7, #29]
 8000882:	7f3b      	ldrb	r3, [r7, #28]
 8000884:	330c      	adds	r3, #12
 8000886:	773b      	strb	r3, [r7, #28]
 8000888:	7f7b      	ldrb	r3, [r7, #29]
 800088a:	2b02      	cmp	r3, #2
 800088c:	d987      	bls.n	800079e <DISPLAY_ShowBody+0xce>
		}

	}

}
 800088e:	bf00      	nop
 8000890:	bf00      	nop
 8000892:	3728      	adds	r7, #40	; 0x28
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	2000001c 	.word	0x2000001c
 800089c:	20000020 	.word	0x20000020
 80008a0:	0800ad28 	.word	0x0800ad28
 80008a4:	0800ad08 	.word	0x0800ad08

080008a8 <DISPLAY_ShowMenu>:
//
//-------------------------------------------------------------
//
//
void DISPLAY_ShowMenu(void) {
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
	ssd1306_Fill(Black);
 80008ac:	2000      	movs	r0, #0
 80008ae:	f009 fc3f 	bl	800a130 <ssd1306_Fill>
	DISPLAY_ShowTopRow();
 80008b2:	f7ff fcdd 	bl	8000270 <DISPLAY_ShowTopRow>
	DISPLAY_ShowBody();
 80008b6:	f7ff ff0b 	bl	80006d0 <DISPLAY_ShowBody>
	DISPLAY_ShowBottomRow();
 80008ba:	f7ff fd69 	bl	8000390 <DISPLAY_ShowBottomRow>
	ssd1306_UpdateScreen();
 80008be:	f009 fc5b 	bl	800a178 <ssd1306_UpdateScreen>
}
 80008c2:	bf00      	nop
 80008c4:	bd80      	pop	{r7, pc}

080008c6 <DISPLAY_GoesTo>:
//
//-------------------------------------------------------------
//
//переход в указанный пункт меню
MenuItemStruct* DISPLAY_GoesTo(MenuItemStruct *current) {
 80008c6:	b480      	push	{r7}
 80008c8:	b083      	sub	sp, #12
 80008ca:	af00      	add	r7, sp, #0
 80008cc:	6078      	str	r0, [r7, #4]
	return current;
 80008ce:	687b      	ldr	r3, [r7, #4]
}
 80008d0:	4618      	mov	r0, r3
 80008d2:	370c      	adds	r7, #12
 80008d4:	46bd      	mov	sp, r7
 80008d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008da:	4770      	bx	lr

080008dc <DISPLAY_GoesToAndShowInfo>:
//
//-------------------------------------------------------------
//
//Переход в меню, где надо отображать время
MenuItemStruct* DISPLAY_GoesToAndShowInfo(MenuItemStruct *current) {
 80008dc:	b480      	push	{r7}
 80008de:	b083      	sub	sp, #12
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
	//showInfo = 1; // отображение времени в меню
	return current;
 80008e4:	687b      	ldr	r3, [r7, #4]
}
 80008e6:	4618      	mov	r0, r3
 80008e8:	370c      	adds	r7, #12
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr
	...

080008f4 <DISPLAY_GoesToAndNotShowTime>:
//
//-------------------------------------------------------------
//
//Переход в меню, и отключение отображения времени
MenuItemStruct* DISPLAY_GoesToAndNotShowTime(MenuItemStruct *current) {
 80008f4:	b480      	push	{r7}
 80008f6:	b083      	sub	sp, #12
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
	showTime = 0; // отображение времени в меню выкл
 80008fc:	4b04      	ldr	r3, [pc, #16]	; (8000910 <DISPLAY_GoesToAndNotShowTime+0x1c>)
 80008fe:	2200      	movs	r2, #0
 8000900:	701a      	strb	r2, [r3, #0]
	return current;
 8000902:	687b      	ldr	r3, [r7, #4]
}
 8000904:	4618      	mov	r0, r3
 8000906:	370c      	adds	r7, #12
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr
 8000910:	200000ac 	.word	0x200000ac

08000914 <DISPLAY_GoesToAndFillTime>:
//
//-------------------------------------------------------------
//
//
MenuItemStruct* DISPLAY_GoesToAndFillTime(MenuItemStruct *current) {
 8000914:	b480      	push	{r7}
 8000916:	b083      	sub	sp, #12
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
	userTime.Hours = currentTime.Hours;
 800091c:	4b0a      	ldr	r3, [pc, #40]	; (8000948 <DISPLAY_GoesToAndFillTime+0x34>)
 800091e:	781a      	ldrb	r2, [r3, #0]
 8000920:	4b0a      	ldr	r3, [pc, #40]	; (800094c <DISPLAY_GoesToAndFillTime+0x38>)
 8000922:	701a      	strb	r2, [r3, #0]
	userTime.Minutes = currentTime.Minutes;
 8000924:	4b08      	ldr	r3, [pc, #32]	; (8000948 <DISPLAY_GoesToAndFillTime+0x34>)
 8000926:	785a      	ldrb	r2, [r3, #1]
 8000928:	4b08      	ldr	r3, [pc, #32]	; (800094c <DISPLAY_GoesToAndFillTime+0x38>)
 800092a:	705a      	strb	r2, [r3, #1]
	userTime.Seconds = currentTime.Seconds;
 800092c:	4b06      	ldr	r3, [pc, #24]	; (8000948 <DISPLAY_GoesToAndFillTime+0x34>)
 800092e:	789a      	ldrb	r2, [r3, #2]
 8000930:	4b06      	ldr	r3, [pc, #24]	; (800094c <DISPLAY_GoesToAndFillTime+0x38>)
 8000932:	709a      	strb	r2, [r3, #2]
	showTime = 1; // отображение времени в меню
 8000934:	4b06      	ldr	r3, [pc, #24]	; (8000950 <DISPLAY_GoesToAndFillTime+0x3c>)
 8000936:	2201      	movs	r2, #1
 8000938:	701a      	strb	r2, [r3, #0]
	return current;
 800093a:	687b      	ldr	r3, [r7, #4]
}
 800093c:	4618      	mov	r0, r3
 800093e:	370c      	adds	r7, #12
 8000940:	46bd      	mov	sp, r7
 8000942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000946:	4770      	bx	lr
 8000948:	20000e5c 	.word	0x20000e5c
 800094c:	20000e74 	.word	0x20000e74
 8000950:	200000ac 	.word	0x200000ac

08000954 <DISPLAY_GoesToAndFillDate>:
//
//-------------------------------------------------------------
//
//
MenuItemStruct* DISPLAY_GoesToAndFillDate(MenuItemStruct *current) {
 8000954:	b480      	push	{r7}
 8000956:	b083      	sub	sp, #12
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
	userDate.Year = currentDate.Year;
 800095c:	4b09      	ldr	r3, [pc, #36]	; (8000984 <DISPLAY_GoesToAndFillDate+0x30>)
 800095e:	78da      	ldrb	r2, [r3, #3]
 8000960:	4b09      	ldr	r3, [pc, #36]	; (8000988 <DISPLAY_GoesToAndFillDate+0x34>)
 8000962:	70da      	strb	r2, [r3, #3]
	userDate.Month = currentDate.Month;
 8000964:	4b07      	ldr	r3, [pc, #28]	; (8000984 <DISPLAY_GoesToAndFillDate+0x30>)
 8000966:	785a      	ldrb	r2, [r3, #1]
 8000968:	4b07      	ldr	r3, [pc, #28]	; (8000988 <DISPLAY_GoesToAndFillDate+0x34>)
 800096a:	705a      	strb	r2, [r3, #1]
	userDate.Date = currentDate.Date;
 800096c:	4b05      	ldr	r3, [pc, #20]	; (8000984 <DISPLAY_GoesToAndFillDate+0x30>)
 800096e:	789a      	ldrb	r2, [r3, #2]
 8000970:	4b05      	ldr	r3, [pc, #20]	; (8000988 <DISPLAY_GoesToAndFillDate+0x34>)
 8000972:	709a      	strb	r2, [r3, #2]
	return current;
 8000974:	687b      	ldr	r3, [r7, #4]
}
 8000976:	4618      	mov	r0, r3
 8000978:	370c      	adds	r7, #12
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop
 8000984:	20000ebc 	.word	0x20000ebc
 8000988:	20000ec0 	.word	0x20000ec0

0800098c <DISPLAY_GoesToAndFillStartDay>:
//
//-------------------------------------------------------------
//
//Переход в меню установки начала дня и получение текущего времени
MenuItemStruct* DISPLAY_GoesToAndFillStartDay(MenuItemStruct *current) {
 800098c:	b480      	push	{r7}
 800098e:	b083      	sub	sp, #12
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
	userTime.Hours = dayOn.Hours;
 8000994:	4b09      	ldr	r3, [pc, #36]	; (80009bc <DISPLAY_GoesToAndFillStartDay+0x30>)
 8000996:	781a      	ldrb	r2, [r3, #0]
 8000998:	4b09      	ldr	r3, [pc, #36]	; (80009c0 <DISPLAY_GoesToAndFillStartDay+0x34>)
 800099a:	701a      	strb	r2, [r3, #0]
	userTime.Minutes = dayOn.Minutes;
 800099c:	4b07      	ldr	r3, [pc, #28]	; (80009bc <DISPLAY_GoesToAndFillStartDay+0x30>)
 800099e:	785a      	ldrb	r2, [r3, #1]
 80009a0:	4b07      	ldr	r3, [pc, #28]	; (80009c0 <DISPLAY_GoesToAndFillStartDay+0x34>)
 80009a2:	705a      	strb	r2, [r3, #1]
	userTime.Seconds = dayOn.Seconds;
 80009a4:	4b05      	ldr	r3, [pc, #20]	; (80009bc <DISPLAY_GoesToAndFillStartDay+0x30>)
 80009a6:	789a      	ldrb	r2, [r3, #2]
 80009a8:	4b05      	ldr	r3, [pc, #20]	; (80009c0 <DISPLAY_GoesToAndFillStartDay+0x34>)
 80009aa:	709a      	strb	r2, [r3, #2]
	return current;
 80009ac:	687b      	ldr	r3, [r7, #4]
}
 80009ae:	4618      	mov	r0, r3
 80009b0:	370c      	adds	r7, #12
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	20000e8c 	.word	0x20000e8c
 80009c0:	20000e74 	.word	0x20000e74

080009c4 <DISPLAY_GoesToAndFillEndDay>:
//
//-------------------------------------------------------------
//
//Переход в меню установки конца дня и получение текущего времени
MenuItemStruct* DISPLAY_GoesToAndFillEndDay(MenuItemStruct *current) {
 80009c4:	b480      	push	{r7}
 80009c6:	b083      	sub	sp, #12
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
	userTime.Hours = dayOff.Hours;
 80009cc:	4b09      	ldr	r3, [pc, #36]	; (80009f4 <DISPLAY_GoesToAndFillEndDay+0x30>)
 80009ce:	781a      	ldrb	r2, [r3, #0]
 80009d0:	4b09      	ldr	r3, [pc, #36]	; (80009f8 <DISPLAY_GoesToAndFillEndDay+0x34>)
 80009d2:	701a      	strb	r2, [r3, #0]
	userTime.Minutes = dayOff.Minutes;
 80009d4:	4b07      	ldr	r3, [pc, #28]	; (80009f4 <DISPLAY_GoesToAndFillEndDay+0x30>)
 80009d6:	785a      	ldrb	r2, [r3, #1]
 80009d8:	4b07      	ldr	r3, [pc, #28]	; (80009f8 <DISPLAY_GoesToAndFillEndDay+0x34>)
 80009da:	705a      	strb	r2, [r3, #1]
	userTime.Seconds = dayOff.Seconds;
 80009dc:	4b05      	ldr	r3, [pc, #20]	; (80009f4 <DISPLAY_GoesToAndFillEndDay+0x30>)
 80009de:	789a      	ldrb	r2, [r3, #2]
 80009e0:	4b05      	ldr	r3, [pc, #20]	; (80009f8 <DISPLAY_GoesToAndFillEndDay+0x34>)
 80009e2:	709a      	strb	r2, [r3, #2]
	return current;
 80009e4:	687b      	ldr	r3, [r7, #4]
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	370c      	adds	r7, #12
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop
 80009f4:	20000ea4 	.word	0x20000ea4
 80009f8:	20000e74 	.word	0x20000e74

080009fc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a00:	4b08      	ldr	r3, [pc, #32]	; (8000a24 <HAL_Init+0x28>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a07      	ldr	r2, [pc, #28]	; (8000a24 <HAL_Init+0x28>)
 8000a06:	f043 0310 	orr.w	r3, r3, #16
 8000a0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a0c:	2003      	movs	r0, #3
 8000a0e:	f000 f920 	bl	8000c52 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a12:	2000      	movs	r0, #0
 8000a14:	f007 f838 	bl	8007a88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a18:	f007 f80e 	bl	8007a38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a1c:	2300      	movs	r3, #0
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	40022000 	.word	0x40022000

08000a28 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a2c:	4b06      	ldr	r3, [pc, #24]	; (8000a48 <HAL_IncTick+0x20>)
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	461a      	mov	r2, r3
 8000a32:	4b06      	ldr	r3, [pc, #24]	; (8000a4c <HAL_IncTick+0x24>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	4413      	add	r3, r2
 8000a38:	4a04      	ldr	r2, [pc, #16]	; (8000a4c <HAL_IncTick+0x24>)
 8000a3a:	6013      	str	r3, [r2, #0]
}
 8000a3c:	bf00      	nop
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop
 8000a48:	20000004 	.word	0x20000004
 8000a4c:	200012dc 	.word	0x200012dc

08000a50 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  return uwTick;  
 8000a54:	4b03      	ldr	r3, [pc, #12]	; (8000a64 <HAL_GetTick+0x14>)
 8000a56:	681b      	ldr	r3, [r3, #0]
}
 8000a58:	4618      	mov	r0, r3
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	200012dc 	.word	0x200012dc

08000a68 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b084      	sub	sp, #16
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a70:	f7ff ffee 	bl	8000a50 <HAL_GetTick>
 8000a74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a80:	d005      	beq.n	8000a8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a82:	4b0a      	ldr	r3, [pc, #40]	; (8000aac <HAL_Delay+0x44>)
 8000a84:	781b      	ldrb	r3, [r3, #0]
 8000a86:	461a      	mov	r2, r3
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	4413      	add	r3, r2
 8000a8c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000a8e:	bf00      	nop
 8000a90:	f7ff ffde 	bl	8000a50 <HAL_GetTick>
 8000a94:	4602      	mov	r2, r0
 8000a96:	68bb      	ldr	r3, [r7, #8]
 8000a98:	1ad3      	subs	r3, r2, r3
 8000a9a:	68fa      	ldr	r2, [r7, #12]
 8000a9c:	429a      	cmp	r2, r3
 8000a9e:	d8f7      	bhi.n	8000a90 <HAL_Delay+0x28>
  {
  }
}
 8000aa0:	bf00      	nop
 8000aa2:	bf00      	nop
 8000aa4:	3710      	adds	r7, #16
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	20000004 	.word	0x20000004

08000ab0 <__NVIC_SetPriorityGrouping>:
	 Only values from 0..7 are used.
	 In case of a conflict between priority grouping and available
	 priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
	 \param [in]      PriorityGroup  Priority grouping field.
	 */
	__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup) {
 8000ab0:	b480      	push	{r7}
 8000ab2:	b085      	sub	sp, #20
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
		uint32_t reg_value;
		uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t) 0x07UL); /* only values 0..7 are used          */
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	f003 0307 	and.w	r3, r3, #7
 8000abe:	60fb      	str	r3, [r7, #12]

		reg_value = SCB->AIRCR; /* read old register configuration    */
 8000ac0:	4b0c      	ldr	r3, [pc, #48]	; (8000af4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ac2:	68db      	ldr	r3, [r3, #12]
 8000ac4:	60bb      	str	r3, [r7, #8]
		reg_value &= ~((uint32_t) (SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ac6:	68ba      	ldr	r2, [r7, #8]
 8000ac8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000acc:	4013      	ands	r3, r2
 8000ace:	60bb      	str	r3, [r7, #8]
		reg_value = (reg_value | ((uint32_t) 0x5FAUL << SCB_AIRCR_VECTKEY_Pos) | (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)); /* Insert write key and priority group */
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	021a      	lsls	r2, r3, #8
 8000ad4:	68bb      	ldr	r3, [r7, #8]
 8000ad6:	4313      	orrs	r3, r2
 8000ad8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000adc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ae0:	60bb      	str	r3, [r7, #8]
		SCB->AIRCR = reg_value;
 8000ae2:	4a04      	ldr	r2, [pc, #16]	; (8000af4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ae4:	68bb      	ldr	r3, [r7, #8]
 8000ae6:	60d3      	str	r3, [r2, #12]
	}
 8000ae8:	bf00      	nop
 8000aea:	3714      	adds	r7, #20
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr
 8000af4:	e000ed00 	.word	0xe000ed00

08000af8 <__NVIC_GetPriorityGrouping>:
	/**
	 \brief   Get Priority Grouping
	 \details Reads the priority grouping field from the NVIC Interrupt Controller.
	 \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
	 */
	__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void) {
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
		return ((uint32_t) ((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000afc:	4b04      	ldr	r3, [pc, #16]	; (8000b10 <__NVIC_GetPriorityGrouping+0x18>)
 8000afe:	68db      	ldr	r3, [r3, #12]
 8000b00:	0a1b      	lsrs	r3, r3, #8
 8000b02:	f003 0307 	and.w	r3, r3, #7
	}
 8000b06:	4618      	mov	r0, r3
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr
 8000b10:	e000ed00 	.word	0xe000ed00

08000b14 <__NVIC_EnableIRQ>:
	 \brief   Enable Interrupt
	 \details Enables a device specific interrupt in the NVIC interrupt controller.
	 \param [in]      IRQn  Device specific interrupt number.
	 \note    IRQn must not be negative.
	 */
	__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn) {
 8000b14:	b480      	push	{r7}
 8000b16:	b083      	sub	sp, #12
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	71fb      	strb	r3, [r7, #7]
		if ((int32_t) (IRQn) >= 0) {
 8000b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	db0b      	blt.n	8000b3e <__NVIC_EnableIRQ+0x2a>
			NVIC->ISER[(((uint32_t) IRQn) >> 5UL)] = (uint32_t) (1UL << (((uint32_t) IRQn) & 0x1FUL));
 8000b26:	79fb      	ldrb	r3, [r7, #7]
 8000b28:	f003 021f 	and.w	r2, r3, #31
 8000b2c:	4907      	ldr	r1, [pc, #28]	; (8000b4c <__NVIC_EnableIRQ+0x38>)
 8000b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b32:	095b      	lsrs	r3, r3, #5
 8000b34:	2001      	movs	r0, #1
 8000b36:	fa00 f202 	lsl.w	r2, r0, r2
 8000b3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		}
	}
 8000b3e:	bf00      	nop
 8000b40:	370c      	adds	r7, #12
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	e000e100 	.word	0xe000e100

08000b50 <__NVIC_DisableIRQ>:
	 \brief   Disable Interrupt
	 \details Disables a device specific interrupt in the NVIC interrupt controller.
	 \param [in]      IRQn  Device specific interrupt number.
	 \note    IRQn must not be negative.
	 */
	__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn) {
 8000b50:	b480      	push	{r7}
 8000b52:	b083      	sub	sp, #12
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	4603      	mov	r3, r0
 8000b58:	71fb      	strb	r3, [r7, #7]
		if ((int32_t) (IRQn) >= 0) {
 8000b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	db12      	blt.n	8000b88 <__NVIC_DisableIRQ+0x38>
			NVIC->ICER[(((uint32_t) IRQn) >> 5UL)] = (uint32_t) (1UL << (((uint32_t) IRQn) & 0x1FUL));
 8000b62:	79fb      	ldrb	r3, [r7, #7]
 8000b64:	f003 021f 	and.w	r2, r3, #31
 8000b68:	490a      	ldr	r1, [pc, #40]	; (8000b94 <__NVIC_DisableIRQ+0x44>)
 8000b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b6e:	095b      	lsrs	r3, r3, #5
 8000b70:	2001      	movs	r0, #1
 8000b72:	fa00 f202 	lsl.w	r2, r0, r2
 8000b76:	3320      	adds	r3, #32
 8000b78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 \brief   Data Synchronization Barrier
 \details Acts as a special kind of Data Memory Barrier.
 It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void) {
	__ASM volatile ("dsb 0xF":::"memory");
 8000b7c:	f3bf 8f4f 	dsb	sy
}
 8000b80:	bf00      	nop
	__ASM volatile ("isb 0xF":::"memory");
 8000b82:	f3bf 8f6f 	isb	sy
}
 8000b86:	bf00      	nop
			__DSB();
			__ISB();
		}
	}
 8000b88:	bf00      	nop
 8000b8a:	370c      	adds	r7, #12
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr
 8000b94:	e000e100 	.word	0xe000e100

08000b98 <__NVIC_SetPriority>:
	 or negative to specify a processor exception.
	 \param [in]      IRQn  Interrupt number.
	 \param [in]  priority  Priority to set.
	 \note    The priority cannot be set for every processor exception.
	 */
	__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority) {
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	6039      	str	r1, [r7, #0]
 8000ba2:	71fb      	strb	r3, [r7, #7]
		if ((int32_t) (IRQn) >= 0) {
 8000ba4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	db0a      	blt.n	8000bc2 <__NVIC_SetPriority+0x2a>
			NVIC->IP[((uint32_t) IRQn)] = (uint8_t) ((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t) 0xFFUL);
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	b2da      	uxtb	r2, r3
 8000bb0:	490c      	ldr	r1, [pc, #48]	; (8000be4 <__NVIC_SetPriority+0x4c>)
 8000bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb6:	0112      	lsls	r2, r2, #4
 8000bb8:	b2d2      	uxtb	r2, r2
 8000bba:	440b      	add	r3, r1
 8000bbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
		} else {
			SCB->SHP[(((uint32_t) IRQn) & 0xFUL) - 4UL] = (uint8_t) ((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t) 0xFFUL);
		}
	}
 8000bc0:	e00a      	b.n	8000bd8 <__NVIC_SetPriority+0x40>
			SCB->SHP[(((uint32_t) IRQn) & 0xFUL) - 4UL] = (uint8_t) ((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t) 0xFFUL);
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	b2da      	uxtb	r2, r3
 8000bc6:	4908      	ldr	r1, [pc, #32]	; (8000be8 <__NVIC_SetPriority+0x50>)
 8000bc8:	79fb      	ldrb	r3, [r7, #7]
 8000bca:	f003 030f 	and.w	r3, r3, #15
 8000bce:	3b04      	subs	r3, #4
 8000bd0:	0112      	lsls	r2, r2, #4
 8000bd2:	b2d2      	uxtb	r2, r2
 8000bd4:	440b      	add	r3, r1
 8000bd6:	761a      	strb	r2, [r3, #24]
	}
 8000bd8:	bf00      	nop
 8000bda:	370c      	adds	r7, #12
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr
 8000be4:	e000e100 	.word	0xe000e100
 8000be8:	e000ed00 	.word	0xe000ed00

08000bec <NVIC_EncodePriority>:
	 \param [in]     PriorityGroup  Used priority group.
	 \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
	 \param [in]       SubPriority  Subpriority value (starting from 0).
	 \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
	 */
	__STATIC_INLINE uint32_t NVIC_EncodePriority(uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority) {
 8000bec:	b480      	push	{r7}
 8000bee:	b089      	sub	sp, #36	; 0x24
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	60f8      	str	r0, [r7, #12]
 8000bf4:	60b9      	str	r1, [r7, #8]
 8000bf6:	607a      	str	r2, [r7, #4]
		uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t) 0x07UL); /* only values 0..7 are used          */
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	f003 0307 	and.w	r3, r3, #7
 8000bfe:	61fb      	str	r3, [r7, #28]
		uint32_t PreemptPriorityBits;
		uint32_t SubPriorityBits;

		PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t) (__NVIC_PRIO_BITS)) ? (uint32_t) (__NVIC_PRIO_BITS) : (uint32_t) (7UL - PriorityGroupTmp);
 8000c00:	69fb      	ldr	r3, [r7, #28]
 8000c02:	f1c3 0307 	rsb	r3, r3, #7
 8000c06:	2b04      	cmp	r3, #4
 8000c08:	bf28      	it	cs
 8000c0a:	2304      	movcs	r3, #4
 8000c0c:	61bb      	str	r3, [r7, #24]
		SubPriorityBits = ((PriorityGroupTmp + (uint32_t) (__NVIC_PRIO_BITS)) < (uint32_t) 7UL) ? (uint32_t) 0UL : (uint32_t) ((PriorityGroupTmp - 7UL) + (uint32_t) (__NVIC_PRIO_BITS));
 8000c0e:	69fb      	ldr	r3, [r7, #28]
 8000c10:	3304      	adds	r3, #4
 8000c12:	2b06      	cmp	r3, #6
 8000c14:	d902      	bls.n	8000c1c <NVIC_EncodePriority+0x30>
 8000c16:	69fb      	ldr	r3, [r7, #28]
 8000c18:	3b03      	subs	r3, #3
 8000c1a:	e000      	b.n	8000c1e <NVIC_EncodePriority+0x32>
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	617b      	str	r3, [r7, #20]

		return (((PreemptPriority & (uint32_t) ((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) | ((SubPriority & (uint32_t) ((1UL << (SubPriorityBits)) - 1UL))));
 8000c20:	f04f 32ff 	mov.w	r2, #4294967295
 8000c24:	69bb      	ldr	r3, [r7, #24]
 8000c26:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2a:	43da      	mvns	r2, r3
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	401a      	ands	r2, r3
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	409a      	lsls	r2, r3
 8000c34:	f04f 31ff 	mov.w	r1, #4294967295
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c3e:	43d9      	mvns	r1, r3
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	400b      	ands	r3, r1
 8000c44:	4313      	orrs	r3, r2
	}
 8000c46:	4618      	mov	r0, r3
 8000c48:	3724      	adds	r7, #36	; 0x24
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr

08000c52 <HAL_NVIC_SetPriorityGrouping>:
 *                                    0 bits for subpriority
 * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
 *         The pending IRQ priority will be managed only by the subpriority.
 * @retval None
 */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup) {
 8000c52:	b580      	push	{r7, lr}
 8000c54:	b082      	sub	sp, #8
 8000c56:	af00      	add	r7, sp, #0
 8000c58:	6078      	str	r0, [r7, #4]
	/* Check the parameters */
	assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

	/* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
	NVIC_SetPriorityGrouping(PriorityGroup);
 8000c5a:	6878      	ldr	r0, [r7, #4]
 8000c5c:	f7ff ff28 	bl	8000ab0 <__NVIC_SetPriorityGrouping>
}
 8000c60:	bf00      	nop
 8000c62:	3708      	adds	r7, #8
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}

08000c68 <HAL_NVIC_SetPriority>:
 * @param  SubPriority the subpriority level for the IRQ channel.
 *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
 *         A lower priority value indicates a higher priority.
 * @retval None
 */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority) {
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b086      	sub	sp, #24
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	4603      	mov	r3, r0
 8000c70:	60b9      	str	r1, [r7, #8]
 8000c72:	607a      	str	r2, [r7, #4]
 8000c74:	73fb      	strb	r3, [r7, #15]
	uint32_t prioritygroup = 0x00U;
 8000c76:	2300      	movs	r3, #0
 8000c78:	617b      	str	r3, [r7, #20]

	/* Check the parameters */
	assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
	assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

	prioritygroup = NVIC_GetPriorityGrouping();
 8000c7a:	f7ff ff3d 	bl	8000af8 <__NVIC_GetPriorityGrouping>
 8000c7e:	6178      	str	r0, [r7, #20]

	NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c80:	687a      	ldr	r2, [r7, #4]
 8000c82:	68b9      	ldr	r1, [r7, #8]
 8000c84:	6978      	ldr	r0, [r7, #20]
 8000c86:	f7ff ffb1 	bl	8000bec <NVIC_EncodePriority>
 8000c8a:	4602      	mov	r2, r0
 8000c8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c90:	4611      	mov	r1, r2
 8000c92:	4618      	mov	r0, r3
 8000c94:	f7ff ff80 	bl	8000b98 <__NVIC_SetPriority>
}
 8000c98:	bf00      	nop
 8000c9a:	3718      	adds	r7, #24
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}

08000ca0 <HAL_NVIC_EnableIRQ>:
 * @param  IRQn External interrupt number
 *         This parameter can be an enumerator of IRQn_Type enumeration
 *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
 * @retval None
 */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn) {
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	71fb      	strb	r3, [r7, #7]
	/* Check the parameters */
	assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

	/* Enable interrupt */
	NVIC_EnableIRQ(IRQn);
 8000caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f7ff ff30 	bl	8000b14 <__NVIC_EnableIRQ>
}
 8000cb4:	bf00      	nop
 8000cb6:	3708      	adds	r7, #8
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}

08000cbc <HAL_NVIC_DisableIRQ>:
 * @param  IRQn External interrupt number
 *         This parameter can be an enumerator of IRQn_Type enumeration
 *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
 * @retval None
 */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn) {
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	71fb      	strb	r3, [r7, #7]
	/* Check the parameters */
	assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

	/* Disable interrupt */
	NVIC_DisableIRQ(IRQn);
 8000cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f7ff ff40 	bl	8000b50 <__NVIC_DisableIRQ>
}
 8000cd0:	bf00      	nop
 8000cd2:	3708      	adds	r7, #8
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}

08000cd8 <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8000cd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cda:	b087      	sub	sp, #28
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	60f8      	str	r0, [r7, #12]
 8000ce0:	60b9      	str	r1, [r7, #8]
 8000ce2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0U;
 8000cea:	2300      	movs	r3, #0
 8000cec:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0U;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000cf2:	4b2f      	ldr	r3, [pc, #188]	; (8000db0 <HAL_FLASH_Program+0xd8>)
 8000cf4:	7e1b      	ldrb	r3, [r3, #24]
 8000cf6:	2b01      	cmp	r3, #1
 8000cf8:	d101      	bne.n	8000cfe <HAL_FLASH_Program+0x26>
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	e054      	b.n	8000da8 <HAL_FLASH_Program+0xd0>
 8000cfe:	4b2c      	ldr	r3, [pc, #176]	; (8000db0 <HAL_FLASH_Program+0xd8>)
 8000d00:	2201      	movs	r2, #1
 8000d02:	761a      	strb	r2, [r3, #24]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000d04:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000d08:	f000 f8a8 	bl	8000e5c <FLASH_WaitForLastOperation>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8000d10:	7dfb      	ldrb	r3, [r7, #23]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d144      	bne.n	8000da0 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	2b01      	cmp	r3, #1
 8000d1a:	d102      	bne.n	8000d22 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	757b      	strb	r3, [r7, #21]
 8000d20:	e007      	b.n	8000d32 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	2b02      	cmp	r3, #2
 8000d26:	d102      	bne.n	8000d2e <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8000d28:	2302      	movs	r3, #2
 8000d2a:	757b      	strb	r3, [r7, #21]
 8000d2c:	e001      	b.n	8000d32 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8000d2e:	2304      	movs	r3, #4
 8000d30:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8000d32:	2300      	movs	r3, #0
 8000d34:	75bb      	strb	r3, [r7, #22]
 8000d36:	e02d      	b.n	8000d94 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000d38:	7dbb      	ldrb	r3, [r7, #22]
 8000d3a:	005a      	lsls	r2, r3, #1
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	eb02 0c03 	add.w	ip, r2, r3
 8000d42:	7dbb      	ldrb	r3, [r7, #22]
 8000d44:	0119      	lsls	r1, r3, #4
 8000d46:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000d4a:	f1c1 0620 	rsb	r6, r1, #32
 8000d4e:	f1a1 0020 	sub.w	r0, r1, #32
 8000d52:	fa22 f401 	lsr.w	r4, r2, r1
 8000d56:	fa03 f606 	lsl.w	r6, r3, r6
 8000d5a:	4334      	orrs	r4, r6
 8000d5c:	fa23 f000 	lsr.w	r0, r3, r0
 8000d60:	4304      	orrs	r4, r0
 8000d62:	fa23 f501 	lsr.w	r5, r3, r1
 8000d66:	b2a3      	uxth	r3, r4
 8000d68:	4619      	mov	r1, r3
 8000d6a:	4660      	mov	r0, ip
 8000d6c:	f000 f85a 	bl	8000e24 <FLASH_Program_HalfWord>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000d70:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000d74:	f000 f872 	bl	8000e5c <FLASH_WaitForLastOperation>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8000d7c:	4b0d      	ldr	r3, [pc, #52]	; (8000db4 <HAL_FLASH_Program+0xdc>)
 8000d7e:	691b      	ldr	r3, [r3, #16]
 8000d80:	4a0c      	ldr	r2, [pc, #48]	; (8000db4 <HAL_FLASH_Program+0xdc>)
 8000d82:	f023 0301 	bic.w	r3, r3, #1
 8000d86:	6113      	str	r3, [r2, #16]
      /* In case of error, stop programming procedure */
      if (status != HAL_OK)
 8000d88:	7dfb      	ldrb	r3, [r7, #23]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d107      	bne.n	8000d9e <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8000d8e:	7dbb      	ldrb	r3, [r7, #22]
 8000d90:	3301      	adds	r3, #1
 8000d92:	75bb      	strb	r3, [r7, #22]
 8000d94:	7dba      	ldrb	r2, [r7, #22]
 8000d96:	7d7b      	ldrb	r3, [r7, #21]
 8000d98:	429a      	cmp	r2, r3
 8000d9a:	d3cd      	bcc.n	8000d38 <HAL_FLASH_Program+0x60>
 8000d9c:	e000      	b.n	8000da0 <HAL_FLASH_Program+0xc8>
      {
        break;
 8000d9e:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000da0:	4b03      	ldr	r3, [pc, #12]	; (8000db0 <HAL_FLASH_Program+0xd8>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	761a      	strb	r2, [r3, #24]

  return status;
 8000da6:	7dfb      	ldrb	r3, [r7, #23]
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	371c      	adds	r7, #28
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000db0:	200012e0 	.word	0x200012e0
 8000db4:	40022000 	.word	0x40022000

08000db8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000dc2:	4b0d      	ldr	r3, [pc, #52]	; (8000df8 <HAL_FLASH_Unlock+0x40>)
 8000dc4:	691b      	ldr	r3, [r3, #16]
 8000dc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d00d      	beq.n	8000dea <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000dce:	4b0a      	ldr	r3, [pc, #40]	; (8000df8 <HAL_FLASH_Unlock+0x40>)
 8000dd0:	4a0a      	ldr	r2, [pc, #40]	; (8000dfc <HAL_FLASH_Unlock+0x44>)
 8000dd2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000dd4:	4b08      	ldr	r3, [pc, #32]	; (8000df8 <HAL_FLASH_Unlock+0x40>)
 8000dd6:	4a0a      	ldr	r2, [pc, #40]	; (8000e00 <HAL_FLASH_Unlock+0x48>)
 8000dd8:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000dda:	4b07      	ldr	r3, [pc, #28]	; (8000df8 <HAL_FLASH_Unlock+0x40>)
 8000ddc:	691b      	ldr	r3, [r3, #16]
 8000dde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8000de6:	2301      	movs	r3, #1
 8000de8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8000dea:	79fb      	ldrb	r3, [r7, #7]
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	370c      	adds	r7, #12
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr
 8000df8:	40022000 	.word	0x40022000
 8000dfc:	45670123 	.word	0x45670123
 8000e00:	cdef89ab 	.word	0xcdef89ab

08000e04 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8000e08:	4b05      	ldr	r3, [pc, #20]	; (8000e20 <HAL_FLASH_Lock+0x1c>)
 8000e0a:	691b      	ldr	r3, [r3, #16]
 8000e0c:	4a04      	ldr	r2, [pc, #16]	; (8000e20 <HAL_FLASH_Lock+0x1c>)
 8000e0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e12:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8000e14:	2300      	movs	r3, #0
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr
 8000e20:	40022000 	.word	0x40022000

08000e24 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
 8000e2c:	460b      	mov	r3, r1
 8000e2e:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000e30:	4b08      	ldr	r3, [pc, #32]	; (8000e54 <FLASH_Program_HalfWord+0x30>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000e36:	4b08      	ldr	r3, [pc, #32]	; (8000e58 <FLASH_Program_HalfWord+0x34>)
 8000e38:	691b      	ldr	r3, [r3, #16]
 8000e3a:	4a07      	ldr	r2, [pc, #28]	; (8000e58 <FLASH_Program_HalfWord+0x34>)
 8000e3c:	f043 0301 	orr.w	r3, r3, #1
 8000e40:	6113      	str	r3, [r2, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	887a      	ldrh	r2, [r7, #2]
 8000e46:	801a      	strh	r2, [r3, #0]
}
 8000e48:	bf00      	nop
 8000e4a:	370c      	adds	r7, #12
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr
 8000e54:	200012e0 	.word	0x200012e0
 8000e58:	40022000 	.word	0x40022000

08000e5c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b084      	sub	sp, #16
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8000e64:	f7ff fdf4 	bl	8000a50 <HAL_GetTick>
 8000e68:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000e6a:	e010      	b.n	8000e8e <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e72:	d00c      	beq.n	8000e8e <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d007      	beq.n	8000e8a <FLASH_WaitForLastOperation+0x2e>
 8000e7a:	f7ff fde9 	bl	8000a50 <HAL_GetTick>
 8000e7e:	4602      	mov	r2, r0
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	1ad3      	subs	r3, r2, r3
 8000e84:	687a      	ldr	r2, [r7, #4]
 8000e86:	429a      	cmp	r2, r3
 8000e88:	d201      	bcs.n	8000e8e <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8000e8a:	2303      	movs	r3, #3
 8000e8c:	e01f      	b.n	8000ece <FLASH_WaitForLastOperation+0x72>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000e8e:	4b12      	ldr	r3, [pc, #72]	; (8000ed8 <FLASH_WaitForLastOperation+0x7c>)
 8000e90:	68db      	ldr	r3, [r3, #12]
 8000e92:	f003 0301 	and.w	r3, r3, #1
 8000e96:	2b01      	cmp	r3, #1
 8000e98:	d0e8      	beq.n	8000e6c <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8000e9a:	4b0f      	ldr	r3, [pc, #60]	; (8000ed8 <FLASH_WaitForLastOperation+0x7c>)
 8000e9c:	68db      	ldr	r3, [r3, #12]
 8000e9e:	f003 0320 	and.w	r3, r3, #32
 8000ea2:	2b20      	cmp	r3, #32
 8000ea4:	d102      	bne.n	8000eac <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000ea6:	4b0c      	ldr	r3, [pc, #48]	; (8000ed8 <FLASH_WaitForLastOperation+0x7c>)
 8000ea8:	2220      	movs	r2, #32
 8000eaa:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000eac:	4b0a      	ldr	r3, [pc, #40]	; (8000ed8 <FLASH_WaitForLastOperation+0x7c>)
 8000eae:	68db      	ldr	r3, [r3, #12]
 8000eb0:	f003 0310 	and.w	r3, r3, #16
 8000eb4:	2b10      	cmp	r3, #16
 8000eb6:	d005      	beq.n	8000ec4 <FLASH_WaitForLastOperation+0x68>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000eb8:	4b07      	ldr	r3, [pc, #28]	; (8000ed8 <FLASH_WaitForLastOperation+0x7c>)
 8000eba:	68db      	ldr	r3, [r3, #12]
 8000ebc:	f003 0304 	and.w	r3, r3, #4
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000ec0:	2b04      	cmp	r3, #4
 8000ec2:	d103      	bne.n	8000ecc <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8000ec4:	f000 f80a 	bl	8000edc <FLASH_SetErrorCode>
    return HAL_ERROR;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	e000      	b.n	8000ece <FLASH_WaitForLastOperation+0x72>
  }

  /* There is no error flag set */
  return HAL_OK;
 8000ecc:	2300      	movs	r3, #0
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	3710      	adds	r7, #16
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	40022000 	.word	0x40022000

08000edc <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8000ee6:	4b14      	ldr	r3, [pc, #80]	; (8000f38 <FLASH_SetErrorCode+0x5c>)
 8000ee8:	68db      	ldr	r3, [r3, #12]
 8000eea:	f003 0310 	and.w	r3, r3, #16
 8000eee:	2b10      	cmp	r3, #16
 8000ef0:	d109      	bne.n	8000f06 <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8000ef2:	4b12      	ldr	r3, [pc, #72]	; (8000f3c <FLASH_SetErrorCode+0x60>)
 8000ef4:	69db      	ldr	r3, [r3, #28]
 8000ef6:	f043 0302 	orr.w	r3, r3, #2
 8000efa:	4a10      	ldr	r2, [pc, #64]	; (8000f3c <FLASH_SetErrorCode+0x60>)
 8000efc:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_WRPERR;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	f043 0310 	orr.w	r3, r3, #16
 8000f04:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000f06:	4b0c      	ldr	r3, [pc, #48]	; (8000f38 <FLASH_SetErrorCode+0x5c>)
 8000f08:	68db      	ldr	r3, [r3, #12]
 8000f0a:	f003 0304 	and.w	r3, r3, #4
 8000f0e:	2b04      	cmp	r3, #4
 8000f10:	d109      	bne.n	8000f26 <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8000f12:	4b0a      	ldr	r3, [pc, #40]	; (8000f3c <FLASH_SetErrorCode+0x60>)
 8000f14:	69db      	ldr	r3, [r3, #28]
 8000f16:	f043 0301 	orr.w	r3, r3, #1
 8000f1a:	4a08      	ldr	r2, [pc, #32]	; (8000f3c <FLASH_SetErrorCode+0x60>)
 8000f1c:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_PGERR;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	f043 0304 	orr.w	r3, r3, #4
 8000f24:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8000f26:	4a04      	ldr	r2, [pc, #16]	; (8000f38 <FLASH_SetErrorCode+0x5c>)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	60d3      	str	r3, [r2, #12]
}  
 8000f2c:	bf00      	nop
 8000f2e:	370c      	adds	r7, #12
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr
 8000f38:	40022000 	.word	0x40022000
 8000f3c:	200012e0 	.word	0x200012e0

08000f40 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b084      	sub	sp, #16
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
 8000f48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000f52:	4b2e      	ldr	r3, [pc, #184]	; (800100c <HAL_FLASHEx_Erase+0xcc>)
 8000f54:	7e1b      	ldrb	r3, [r3, #24]
 8000f56:	2b01      	cmp	r3, #1
 8000f58:	d101      	bne.n	8000f5e <HAL_FLASHEx_Erase+0x1e>
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	e052      	b.n	8001004 <HAL_FLASHEx_Erase+0xc4>
 8000f5e:	4b2b      	ldr	r3, [pc, #172]	; (800100c <HAL_FLASHEx_Erase+0xcc>)
 8000f60:	2201      	movs	r2, #1
 8000f62:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	2b01      	cmp	r3, #1
 8000f6a:	d115      	bne.n	8000f98 <HAL_FLASHEx_Erase+0x58>
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000f6c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000f70:	f7ff ff74 	bl	8000e5c <FLASH_WaitForLastOperation>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d140      	bne.n	8000ffc <HAL_FLASHEx_Erase+0xbc>
      {
        /*Mass erase to be done*/
        FLASH_MassErase();
 8000f7a:	f000 f84b 	bl	8001014 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000f7e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000f82:	f7ff ff6b 	bl	8000e5c <FLASH_WaitForLastOperation>
 8000f86:	4603      	mov	r3, r0
 8000f88:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8000f8a:	4b21      	ldr	r3, [pc, #132]	; (8001010 <HAL_FLASHEx_Erase+0xd0>)
 8000f8c:	691b      	ldr	r3, [r3, #16]
 8000f8e:	4a20      	ldr	r2, [pc, #128]	; (8001010 <HAL_FLASHEx_Erase+0xd0>)
 8000f90:	f023 0304 	bic.w	r3, r3, #4
 8000f94:	6113      	str	r3, [r2, #16]
 8000f96:	e031      	b.n	8000ffc <HAL_FLASHEx_Erase+0xbc>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000f98:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000f9c:	f7ff ff5e 	bl	8000e5c <FLASH_WaitForLastOperation>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d12a      	bne.n	8000ffc <HAL_FLASHEx_Erase+0xbc>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	f04f 32ff 	mov.w	r2, #4294967295
 8000fac:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	60bb      	str	r3, [r7, #8]
 8000fb4:	e019      	b.n	8000fea <HAL_FLASHEx_Erase+0xaa>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8000fb6:	68b8      	ldr	r0, [r7, #8]
 8000fb8:	f000 f846 	bl	8001048 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000fbc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000fc0:	f7ff ff4c 	bl	8000e5c <FLASH_WaitForLastOperation>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8000fc8:	4b11      	ldr	r3, [pc, #68]	; (8001010 <HAL_FLASHEx_Erase+0xd0>)
 8000fca:	691b      	ldr	r3, [r3, #16]
 8000fcc:	4a10      	ldr	r2, [pc, #64]	; (8001010 <HAL_FLASHEx_Erase+0xd0>)
 8000fce:	f023 0302 	bic.w	r3, r3, #2
 8000fd2:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8000fd4:	7bfb      	ldrb	r3, [r7, #15]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d003      	beq.n	8000fe2 <HAL_FLASHEx_Erase+0xa2>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	68ba      	ldr	r2, [r7, #8]
 8000fde:	601a      	str	r2, [r3, #0]
            break;
 8000fe0:	e00c      	b.n	8000ffc <HAL_FLASHEx_Erase+0xbc>
            address += FLASH_PAGE_SIZE)
 8000fe2:	68bb      	ldr	r3, [r7, #8]
 8000fe4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8000fe8:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	689b      	ldr	r3, [r3, #8]
 8000fee:	02da      	lsls	r2, r3, #11
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8000ff6:	68ba      	ldr	r2, [r7, #8]
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	d3dc      	bcc.n	8000fb6 <HAL_FLASHEx_Erase+0x76>
        }
      }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000ffc:	4b03      	ldr	r3, [pc, #12]	; (800100c <HAL_FLASHEx_Erase+0xcc>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	761a      	strb	r2, [r3, #24]

  return status;
 8001002:	7bfb      	ldrb	r3, [r7, #15]
}
 8001004:	4618      	mov	r0, r3
 8001006:	3710      	adds	r7, #16
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	200012e0 	.word	0x200012e0
 8001010:	40022000 	.word	0x40022000

08001014 <FLASH_MassErase>:
  * @brief  Full erase of FLASH memory Bank 
  *
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001018:	4b09      	ldr	r3, [pc, #36]	; (8001040 <FLASH_MassErase+0x2c>)
 800101a:	2200      	movs	r2, #0
 800101c:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800101e:	4b09      	ldr	r3, [pc, #36]	; (8001044 <FLASH_MassErase+0x30>)
 8001020:	691b      	ldr	r3, [r3, #16]
 8001022:	4a08      	ldr	r2, [pc, #32]	; (8001044 <FLASH_MassErase+0x30>)
 8001024:	f043 0304 	orr.w	r3, r3, #4
 8001028:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800102a:	4b06      	ldr	r3, [pc, #24]	; (8001044 <FLASH_MassErase+0x30>)
 800102c:	691b      	ldr	r3, [r3, #16]
 800102e:	4a05      	ldr	r2, [pc, #20]	; (8001044 <FLASH_MassErase+0x30>)
 8001030:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001034:	6113      	str	r3, [r2, #16]
}
 8001036:	bf00      	nop
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr
 8001040:	200012e0 	.word	0x200012e0
 8001044:	40022000 	.word	0x40022000

08001048 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001050:	4b0b      	ldr	r3, [pc, #44]	; (8001080 <FLASH_PageErase+0x38>)
 8001052:	2200      	movs	r2, #0
 8001054:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8001056:	4b0b      	ldr	r3, [pc, #44]	; (8001084 <FLASH_PageErase+0x3c>)
 8001058:	691b      	ldr	r3, [r3, #16]
 800105a:	4a0a      	ldr	r2, [pc, #40]	; (8001084 <FLASH_PageErase+0x3c>)
 800105c:	f043 0302 	orr.w	r3, r3, #2
 8001060:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8001062:	4a08      	ldr	r2, [pc, #32]	; (8001084 <FLASH_PageErase+0x3c>)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001068:	4b06      	ldr	r3, [pc, #24]	; (8001084 <FLASH_PageErase+0x3c>)
 800106a:	691b      	ldr	r3, [r3, #16]
 800106c:	4a05      	ldr	r2, [pc, #20]	; (8001084 <FLASH_PageErase+0x3c>)
 800106e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001072:	6113      	str	r3, [r2, #16]
}
 8001074:	bf00      	nop
 8001076:	370c      	adds	r7, #12
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr
 8001080:	200012e0 	.word	0x200012e0
 8001084:	40022000 	.word	0x40022000

08001088 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001088:	b480      	push	{r7}
 800108a:	b087      	sub	sp, #28
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001092:	2300      	movs	r3, #0
 8001094:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001096:	e154      	b.n	8001342 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	2101      	movs	r1, #1
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	fa01 f303 	lsl.w	r3, r1, r3
 80010a4:	4013      	ands	r3, r2
 80010a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	f000 8146 	beq.w	800133c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	2b01      	cmp	r3, #1
 80010b6:	d00b      	beq.n	80010d0 <HAL_GPIO_Init+0x48>
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	2b02      	cmp	r3, #2
 80010be:	d007      	beq.n	80010d0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010c4:	2b11      	cmp	r3, #17
 80010c6:	d003      	beq.n	80010d0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	2b12      	cmp	r3, #18
 80010ce:	d130      	bne.n	8001132 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	689b      	ldr	r3, [r3, #8]
 80010d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	005b      	lsls	r3, r3, #1
 80010da:	2203      	movs	r2, #3
 80010dc:	fa02 f303 	lsl.w	r3, r2, r3
 80010e0:	43db      	mvns	r3, r3
 80010e2:	693a      	ldr	r2, [r7, #16]
 80010e4:	4013      	ands	r3, r2
 80010e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	68da      	ldr	r2, [r3, #12]
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	005b      	lsls	r3, r3, #1
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
 80010f4:	693a      	ldr	r2, [r7, #16]
 80010f6:	4313      	orrs	r3, r2
 80010f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	693a      	ldr	r2, [r7, #16]
 80010fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001106:	2201      	movs	r2, #1
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	fa02 f303 	lsl.w	r3, r2, r3
 800110e:	43db      	mvns	r3, r3
 8001110:	693a      	ldr	r2, [r7, #16]
 8001112:	4013      	ands	r3, r2
 8001114:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	091b      	lsrs	r3, r3, #4
 800111c:	f003 0201 	and.w	r2, r3, #1
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	fa02 f303 	lsl.w	r3, r2, r3
 8001126:	693a      	ldr	r2, [r7, #16]
 8001128:	4313      	orrs	r3, r2
 800112a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	693a      	ldr	r2, [r7, #16]
 8001130:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	68db      	ldr	r3, [r3, #12]
 8001136:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	005b      	lsls	r3, r3, #1
 800113c:	2203      	movs	r2, #3
 800113e:	fa02 f303 	lsl.w	r3, r2, r3
 8001142:	43db      	mvns	r3, r3
 8001144:	693a      	ldr	r2, [r7, #16]
 8001146:	4013      	ands	r3, r2
 8001148:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	689a      	ldr	r2, [r3, #8]
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	005b      	lsls	r3, r3, #1
 8001152:	fa02 f303 	lsl.w	r3, r2, r3
 8001156:	693a      	ldr	r2, [r7, #16]
 8001158:	4313      	orrs	r3, r2
 800115a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	693a      	ldr	r2, [r7, #16]
 8001160:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	2b02      	cmp	r3, #2
 8001168:	d003      	beq.n	8001172 <HAL_GPIO_Init+0xea>
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	2b12      	cmp	r3, #18
 8001170:	d123      	bne.n	80011ba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	08da      	lsrs	r2, r3, #3
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	3208      	adds	r2, #8
 800117a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800117e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	f003 0307 	and.w	r3, r3, #7
 8001186:	009b      	lsls	r3, r3, #2
 8001188:	220f      	movs	r2, #15
 800118a:	fa02 f303 	lsl.w	r3, r2, r3
 800118e:	43db      	mvns	r3, r3
 8001190:	693a      	ldr	r2, [r7, #16]
 8001192:	4013      	ands	r3, r2
 8001194:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	691a      	ldr	r2, [r3, #16]
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	f003 0307 	and.w	r3, r3, #7
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	fa02 f303 	lsl.w	r3, r2, r3
 80011a6:	693a      	ldr	r2, [r7, #16]
 80011a8:	4313      	orrs	r3, r2
 80011aa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	08da      	lsrs	r2, r3, #3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	3208      	adds	r2, #8
 80011b4:	6939      	ldr	r1, [r7, #16]
 80011b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	005b      	lsls	r3, r3, #1
 80011c4:	2203      	movs	r2, #3
 80011c6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ca:	43db      	mvns	r3, r3
 80011cc:	693a      	ldr	r2, [r7, #16]
 80011ce:	4013      	ands	r3, r2
 80011d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	f003 0203 	and.w	r2, r3, #3
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	005b      	lsls	r3, r3, #1
 80011de:	fa02 f303 	lsl.w	r3, r2, r3
 80011e2:	693a      	ldr	r2, [r7, #16]
 80011e4:	4313      	orrs	r3, r2
 80011e6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	693a      	ldr	r2, [r7, #16]
 80011ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	f000 80a0 	beq.w	800133c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011fc:	4b58      	ldr	r3, [pc, #352]	; (8001360 <HAL_GPIO_Init+0x2d8>)
 80011fe:	699b      	ldr	r3, [r3, #24]
 8001200:	4a57      	ldr	r2, [pc, #348]	; (8001360 <HAL_GPIO_Init+0x2d8>)
 8001202:	f043 0301 	orr.w	r3, r3, #1
 8001206:	6193      	str	r3, [r2, #24]
 8001208:	4b55      	ldr	r3, [pc, #340]	; (8001360 <HAL_GPIO_Init+0x2d8>)
 800120a:	699b      	ldr	r3, [r3, #24]
 800120c:	f003 0301 	and.w	r3, r3, #1
 8001210:	60bb      	str	r3, [r7, #8]
 8001212:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001214:	4a53      	ldr	r2, [pc, #332]	; (8001364 <HAL_GPIO_Init+0x2dc>)
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	089b      	lsrs	r3, r3, #2
 800121a:	3302      	adds	r3, #2
 800121c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001220:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	f003 0303 	and.w	r3, r3, #3
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	220f      	movs	r2, #15
 800122c:	fa02 f303 	lsl.w	r3, r2, r3
 8001230:	43db      	mvns	r3, r3
 8001232:	693a      	ldr	r2, [r7, #16]
 8001234:	4013      	ands	r3, r2
 8001236:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800123e:	d019      	beq.n	8001274 <HAL_GPIO_Init+0x1ec>
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	4a49      	ldr	r2, [pc, #292]	; (8001368 <HAL_GPIO_Init+0x2e0>)
 8001244:	4293      	cmp	r3, r2
 8001246:	d013      	beq.n	8001270 <HAL_GPIO_Init+0x1e8>
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	4a48      	ldr	r2, [pc, #288]	; (800136c <HAL_GPIO_Init+0x2e4>)
 800124c:	4293      	cmp	r3, r2
 800124e:	d00d      	beq.n	800126c <HAL_GPIO_Init+0x1e4>
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	4a47      	ldr	r2, [pc, #284]	; (8001370 <HAL_GPIO_Init+0x2e8>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d007      	beq.n	8001268 <HAL_GPIO_Init+0x1e0>
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	4a46      	ldr	r2, [pc, #280]	; (8001374 <HAL_GPIO_Init+0x2ec>)
 800125c:	4293      	cmp	r3, r2
 800125e:	d101      	bne.n	8001264 <HAL_GPIO_Init+0x1dc>
 8001260:	2304      	movs	r3, #4
 8001262:	e008      	b.n	8001276 <HAL_GPIO_Init+0x1ee>
 8001264:	2305      	movs	r3, #5
 8001266:	e006      	b.n	8001276 <HAL_GPIO_Init+0x1ee>
 8001268:	2303      	movs	r3, #3
 800126a:	e004      	b.n	8001276 <HAL_GPIO_Init+0x1ee>
 800126c:	2302      	movs	r3, #2
 800126e:	e002      	b.n	8001276 <HAL_GPIO_Init+0x1ee>
 8001270:	2301      	movs	r3, #1
 8001272:	e000      	b.n	8001276 <HAL_GPIO_Init+0x1ee>
 8001274:	2300      	movs	r3, #0
 8001276:	697a      	ldr	r2, [r7, #20]
 8001278:	f002 0203 	and.w	r2, r2, #3
 800127c:	0092      	lsls	r2, r2, #2
 800127e:	4093      	lsls	r3, r2
 8001280:	693a      	ldr	r2, [r7, #16]
 8001282:	4313      	orrs	r3, r2
 8001284:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001286:	4937      	ldr	r1, [pc, #220]	; (8001364 <HAL_GPIO_Init+0x2dc>)
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	089b      	lsrs	r3, r3, #2
 800128c:	3302      	adds	r3, #2
 800128e:	693a      	ldr	r2, [r7, #16]
 8001290:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001294:	4b38      	ldr	r3, [pc, #224]	; (8001378 <HAL_GPIO_Init+0x2f0>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	43db      	mvns	r3, r3
 800129e:	693a      	ldr	r2, [r7, #16]
 80012a0:	4013      	ands	r3, r2
 80012a2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d003      	beq.n	80012b8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80012b0:	693a      	ldr	r2, [r7, #16]
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	4313      	orrs	r3, r2
 80012b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80012b8:	4a2f      	ldr	r2, [pc, #188]	; (8001378 <HAL_GPIO_Init+0x2f0>)
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80012be:	4b2e      	ldr	r3, [pc, #184]	; (8001378 <HAL_GPIO_Init+0x2f0>)
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	43db      	mvns	r3, r3
 80012c8:	693a      	ldr	r2, [r7, #16]
 80012ca:	4013      	ands	r3, r2
 80012cc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d003      	beq.n	80012e2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80012da:	693a      	ldr	r2, [r7, #16]
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	4313      	orrs	r3, r2
 80012e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80012e2:	4a25      	ldr	r2, [pc, #148]	; (8001378 <HAL_GPIO_Init+0x2f0>)
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012e8:	4b23      	ldr	r3, [pc, #140]	; (8001378 <HAL_GPIO_Init+0x2f0>)
 80012ea:	689b      	ldr	r3, [r3, #8]
 80012ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	43db      	mvns	r3, r3
 80012f2:	693a      	ldr	r2, [r7, #16]
 80012f4:	4013      	ands	r3, r2
 80012f6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001300:	2b00      	cmp	r3, #0
 8001302:	d003      	beq.n	800130c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001304:	693a      	ldr	r2, [r7, #16]
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	4313      	orrs	r3, r2
 800130a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800130c:	4a1a      	ldr	r2, [pc, #104]	; (8001378 <HAL_GPIO_Init+0x2f0>)
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001312:	4b19      	ldr	r3, [pc, #100]	; (8001378 <HAL_GPIO_Init+0x2f0>)
 8001314:	68db      	ldr	r3, [r3, #12]
 8001316:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	43db      	mvns	r3, r3
 800131c:	693a      	ldr	r2, [r7, #16]
 800131e:	4013      	ands	r3, r2
 8001320:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800132a:	2b00      	cmp	r3, #0
 800132c:	d003      	beq.n	8001336 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800132e:	693a      	ldr	r2, [r7, #16]
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	4313      	orrs	r3, r2
 8001334:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001336:	4a10      	ldr	r2, [pc, #64]	; (8001378 <HAL_GPIO_Init+0x2f0>)
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	3301      	adds	r3, #1
 8001340:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	fa22 f303 	lsr.w	r3, r2, r3
 800134c:	2b00      	cmp	r3, #0
 800134e:	f47f aea3 	bne.w	8001098 <HAL_GPIO_Init+0x10>
  }
}
 8001352:	bf00      	nop
 8001354:	bf00      	nop
 8001356:	371c      	adds	r7, #28
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr
 8001360:	40021000 	.word	0x40021000
 8001364:	40010000 	.word	0x40010000
 8001368:	48000400 	.word	0x48000400
 800136c:	48000800 	.word	0x48000800
 8001370:	48000c00 	.word	0x48000c00
 8001374:	48001000 	.word	0x48001000
 8001378:	40010400 	.word	0x40010400

0800137c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
 8001384:	460b      	mov	r3, r1
 8001386:	807b      	strh	r3, [r7, #2]
 8001388:	4613      	mov	r3, r2
 800138a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800138c:	787b      	ldrb	r3, [r7, #1]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d003      	beq.n	800139a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001392:	887a      	ldrh	r2, [r7, #2]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001398:	e002      	b.n	80013a0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800139a:	887a      	ldrh	r2, [r7, #2]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	629a      	str	r2, [r3, #40]	; 0x28
}
 80013a0:	bf00      	nop
 80013a2:	370c      	adds	r7, #12
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr

080013ac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	4603      	mov	r3, r0
 80013b4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80013b6:	4b08      	ldr	r3, [pc, #32]	; (80013d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013b8:	695a      	ldr	r2, [r3, #20]
 80013ba:	88fb      	ldrh	r3, [r7, #6]
 80013bc:	4013      	ands	r3, r2
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d006      	beq.n	80013d0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80013c2:	4a05      	ldr	r2, [pc, #20]	; (80013d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013c4:	88fb      	ldrh	r3, [r7, #6]
 80013c6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80013c8:	88fb      	ldrh	r3, [r7, #6]
 80013ca:	4618      	mov	r0, r3
 80013cc:	f004 fbec 	bl	8005ba8 <HAL_GPIO_EXTI_Callback>
  }
}
 80013d0:	bf00      	nop
 80013d2:	3708      	adds	r7, #8
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	40010400 	.word	0x40010400

080013dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d101      	bne.n	80013ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80013ea:	2301      	movs	r3, #1
 80013ec:	e081      	b.n	80014f2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d106      	bne.n	8001408 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2200      	movs	r2, #0
 80013fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001402:	6878      	ldr	r0, [r7, #4]
 8001404:	f006 f906 	bl	8007614 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2224      	movs	r2, #36	; 0x24
 800140c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f022 0201 	bic.w	r2, r2, #1
 800141e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	685a      	ldr	r2, [r3, #4]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800142c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	689a      	ldr	r2, [r3, #8]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800143c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	68db      	ldr	r3, [r3, #12]
 8001442:	2b01      	cmp	r3, #1
 8001444:	d107      	bne.n	8001456 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	689a      	ldr	r2, [r3, #8]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001452:	609a      	str	r2, [r3, #8]
 8001454:	e006      	b.n	8001464 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	689a      	ldr	r2, [r3, #8]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001462:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	68db      	ldr	r3, [r3, #12]
 8001468:	2b02      	cmp	r3, #2
 800146a:	d104      	bne.n	8001476 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001474:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	687a      	ldr	r2, [r7, #4]
 800147e:	6812      	ldr	r2, [r2, #0]
 8001480:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001484:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001488:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	68da      	ldr	r2, [r3, #12]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001498:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	691a      	ldr	r2, [r3, #16]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	695b      	ldr	r3, [r3, #20]
 80014a2:	ea42 0103 	orr.w	r1, r2, r3
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	699b      	ldr	r3, [r3, #24]
 80014aa:	021a      	lsls	r2, r3, #8
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	430a      	orrs	r2, r1
 80014b2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	69d9      	ldr	r1, [r3, #28]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6a1a      	ldr	r2, [r3, #32]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	430a      	orrs	r2, r1
 80014c2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f042 0201 	orr.w	r2, r2, #1
 80014d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2200      	movs	r2, #0
 80014d8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2220      	movs	r2, #32
 80014de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2200      	movs	r2, #0
 80014e6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2200      	movs	r2, #0
 80014ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80014f0:	2300      	movs	r3, #0
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3708      	adds	r7, #8
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
	...

080014fc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b088      	sub	sp, #32
 8001500:	af02      	add	r7, sp, #8
 8001502:	60f8      	str	r0, [r7, #12]
 8001504:	4608      	mov	r0, r1
 8001506:	4611      	mov	r1, r2
 8001508:	461a      	mov	r2, r3
 800150a:	4603      	mov	r3, r0
 800150c:	817b      	strh	r3, [r7, #10]
 800150e:	460b      	mov	r3, r1
 8001510:	813b      	strh	r3, [r7, #8]
 8001512:	4613      	mov	r3, r2
 8001514:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800151c:	b2db      	uxtb	r3, r3
 800151e:	2b20      	cmp	r3, #32
 8001520:	f040 80f9 	bne.w	8001716 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001524:	6a3b      	ldr	r3, [r7, #32]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d002      	beq.n	8001530 <HAL_I2C_Mem_Write+0x34>
 800152a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800152c:	2b00      	cmp	r3, #0
 800152e:	d105      	bne.n	800153c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001536:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001538:	2301      	movs	r3, #1
 800153a:	e0ed      	b.n	8001718 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001542:	2b01      	cmp	r3, #1
 8001544:	d101      	bne.n	800154a <HAL_I2C_Mem_Write+0x4e>
 8001546:	2302      	movs	r3, #2
 8001548:	e0e6      	b.n	8001718 <HAL_I2C_Mem_Write+0x21c>
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	2201      	movs	r2, #1
 800154e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001552:	f7ff fa7d 	bl	8000a50 <HAL_GetTick>
 8001556:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	9300      	str	r3, [sp, #0]
 800155c:	2319      	movs	r3, #25
 800155e:	2201      	movs	r2, #1
 8001560:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001564:	68f8      	ldr	r0, [r7, #12]
 8001566:	f000 f955 	bl	8001814 <I2C_WaitOnFlagUntilTimeout>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001570:	2301      	movs	r3, #1
 8001572:	e0d1      	b.n	8001718 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	2221      	movs	r2, #33	; 0x21
 8001578:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	2240      	movs	r2, #64	; 0x40
 8001580:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	2200      	movs	r2, #0
 8001588:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	6a3a      	ldr	r2, [r7, #32]
 800158e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001594:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	2200      	movs	r2, #0
 800159a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800159c:	88f8      	ldrh	r0, [r7, #6]
 800159e:	893a      	ldrh	r2, [r7, #8]
 80015a0:	8979      	ldrh	r1, [r7, #10]
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	9301      	str	r3, [sp, #4]
 80015a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015a8:	9300      	str	r3, [sp, #0]
 80015aa:	4603      	mov	r3, r0
 80015ac:	68f8      	ldr	r0, [r7, #12]
 80015ae:	f000 f8b9 	bl	8001724 <I2C_RequestMemoryWrite>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d005      	beq.n	80015c4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	2200      	movs	r2, #0
 80015bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80015c0:	2301      	movs	r3, #1
 80015c2:	e0a9      	b.n	8001718 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015c8:	b29b      	uxth	r3, r3
 80015ca:	2bff      	cmp	r3, #255	; 0xff
 80015cc:	d90e      	bls.n	80015ec <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	22ff      	movs	r2, #255	; 0xff
 80015d2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015d8:	b2da      	uxtb	r2, r3
 80015da:	8979      	ldrh	r1, [r7, #10]
 80015dc:	2300      	movs	r3, #0
 80015de:	9300      	str	r3, [sp, #0]
 80015e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80015e4:	68f8      	ldr	r0, [r7, #12]
 80015e6:	f000 fa37 	bl	8001a58 <I2C_TransferConfig>
 80015ea:	e00f      	b.n	800160c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015f0:	b29a      	uxth	r2, r3
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015fa:	b2da      	uxtb	r2, r3
 80015fc:	8979      	ldrh	r1, [r7, #10]
 80015fe:	2300      	movs	r3, #0
 8001600:	9300      	str	r3, [sp, #0]
 8001602:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001606:	68f8      	ldr	r0, [r7, #12]
 8001608:	f000 fa26 	bl	8001a58 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800160c:	697a      	ldr	r2, [r7, #20]
 800160e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001610:	68f8      	ldr	r0, [r7, #12]
 8001612:	f000 f93f 	bl	8001894 <I2C_WaitOnTXISFlagUntilTimeout>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800161c:	2301      	movs	r3, #1
 800161e:	e07b      	b.n	8001718 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001624:	781a      	ldrb	r2, [r3, #0]
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001630:	1c5a      	adds	r2, r3, #1
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800163a:	b29b      	uxth	r3, r3
 800163c:	3b01      	subs	r3, #1
 800163e:	b29a      	uxth	r2, r3
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001648:	3b01      	subs	r3, #1
 800164a:	b29a      	uxth	r2, r3
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001654:	b29b      	uxth	r3, r3
 8001656:	2b00      	cmp	r3, #0
 8001658:	d034      	beq.n	80016c4 <HAL_I2C_Mem_Write+0x1c8>
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800165e:	2b00      	cmp	r3, #0
 8001660:	d130      	bne.n	80016c4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	9300      	str	r3, [sp, #0]
 8001666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001668:	2200      	movs	r2, #0
 800166a:	2180      	movs	r1, #128	; 0x80
 800166c:	68f8      	ldr	r0, [r7, #12]
 800166e:	f000 f8d1 	bl	8001814 <I2C_WaitOnFlagUntilTimeout>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001678:	2301      	movs	r3, #1
 800167a:	e04d      	b.n	8001718 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001680:	b29b      	uxth	r3, r3
 8001682:	2bff      	cmp	r3, #255	; 0xff
 8001684:	d90e      	bls.n	80016a4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	22ff      	movs	r2, #255	; 0xff
 800168a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001690:	b2da      	uxtb	r2, r3
 8001692:	8979      	ldrh	r1, [r7, #10]
 8001694:	2300      	movs	r3, #0
 8001696:	9300      	str	r3, [sp, #0]
 8001698:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800169c:	68f8      	ldr	r0, [r7, #12]
 800169e:	f000 f9db 	bl	8001a58 <I2C_TransferConfig>
 80016a2:	e00f      	b.n	80016c4 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016a8:	b29a      	uxth	r2, r3
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016b2:	b2da      	uxtb	r2, r3
 80016b4:	8979      	ldrh	r1, [r7, #10]
 80016b6:	2300      	movs	r3, #0
 80016b8:	9300      	str	r3, [sp, #0]
 80016ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80016be:	68f8      	ldr	r0, [r7, #12]
 80016c0:	f000 f9ca 	bl	8001a58 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016c8:	b29b      	uxth	r3, r3
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d19e      	bne.n	800160c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016ce:	697a      	ldr	r2, [r7, #20]
 80016d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80016d2:	68f8      	ldr	r0, [r7, #12]
 80016d4:	f000 f91e 	bl	8001914 <I2C_WaitOnSTOPFlagUntilTimeout>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e01a      	b.n	8001718 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	2220      	movs	r2, #32
 80016e8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	6859      	ldr	r1, [r3, #4]
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	4b0a      	ldr	r3, [pc, #40]	; (8001720 <HAL_I2C_Mem_Write+0x224>)
 80016f6:	400b      	ands	r3, r1
 80016f8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	2220      	movs	r2, #32
 80016fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	2200      	movs	r2, #0
 8001706:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	2200      	movs	r2, #0
 800170e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001712:	2300      	movs	r3, #0
 8001714:	e000      	b.n	8001718 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001716:	2302      	movs	r3, #2
  }
}
 8001718:	4618      	mov	r0, r3
 800171a:	3718      	adds	r7, #24
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	fe00e800 	.word	0xfe00e800

08001724 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b086      	sub	sp, #24
 8001728:	af02      	add	r7, sp, #8
 800172a:	60f8      	str	r0, [r7, #12]
 800172c:	4608      	mov	r0, r1
 800172e:	4611      	mov	r1, r2
 8001730:	461a      	mov	r2, r3
 8001732:	4603      	mov	r3, r0
 8001734:	817b      	strh	r3, [r7, #10]
 8001736:	460b      	mov	r3, r1
 8001738:	813b      	strh	r3, [r7, #8]
 800173a:	4613      	mov	r3, r2
 800173c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800173e:	88fb      	ldrh	r3, [r7, #6]
 8001740:	b2da      	uxtb	r2, r3
 8001742:	8979      	ldrh	r1, [r7, #10]
 8001744:	4b20      	ldr	r3, [pc, #128]	; (80017c8 <I2C_RequestMemoryWrite+0xa4>)
 8001746:	9300      	str	r3, [sp, #0]
 8001748:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800174c:	68f8      	ldr	r0, [r7, #12]
 800174e:	f000 f983 	bl	8001a58 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001752:	69fa      	ldr	r2, [r7, #28]
 8001754:	69b9      	ldr	r1, [r7, #24]
 8001756:	68f8      	ldr	r0, [r7, #12]
 8001758:	f000 f89c 	bl	8001894 <I2C_WaitOnTXISFlagUntilTimeout>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	e02c      	b.n	80017c0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001766:	88fb      	ldrh	r3, [r7, #6]
 8001768:	2b01      	cmp	r3, #1
 800176a:	d105      	bne.n	8001778 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800176c:	893b      	ldrh	r3, [r7, #8]
 800176e:	b2da      	uxtb	r2, r3
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	629a      	str	r2, [r3, #40]	; 0x28
 8001776:	e015      	b.n	80017a4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001778:	893b      	ldrh	r3, [r7, #8]
 800177a:	0a1b      	lsrs	r3, r3, #8
 800177c:	b29b      	uxth	r3, r3
 800177e:	b2da      	uxtb	r2, r3
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001786:	69fa      	ldr	r2, [r7, #28]
 8001788:	69b9      	ldr	r1, [r7, #24]
 800178a:	68f8      	ldr	r0, [r7, #12]
 800178c:	f000 f882 	bl	8001894 <I2C_WaitOnTXISFlagUntilTimeout>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e012      	b.n	80017c0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800179a:	893b      	ldrh	r3, [r7, #8]
 800179c:	b2da      	uxtb	r2, r3
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80017a4:	69fb      	ldr	r3, [r7, #28]
 80017a6:	9300      	str	r3, [sp, #0]
 80017a8:	69bb      	ldr	r3, [r7, #24]
 80017aa:	2200      	movs	r2, #0
 80017ac:	2180      	movs	r1, #128	; 0x80
 80017ae:	68f8      	ldr	r0, [r7, #12]
 80017b0:	f000 f830 	bl	8001814 <I2C_WaitOnFlagUntilTimeout>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e000      	b.n	80017c0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80017be:	2300      	movs	r3, #0
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	3710      	adds	r7, #16
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	80002000 	.word	0x80002000

080017cc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	699b      	ldr	r3, [r3, #24]
 80017da:	f003 0302 	and.w	r3, r3, #2
 80017de:	2b02      	cmp	r3, #2
 80017e0:	d103      	bne.n	80017ea <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	2200      	movs	r2, #0
 80017e8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	699b      	ldr	r3, [r3, #24]
 80017f0:	f003 0301 	and.w	r3, r3, #1
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d007      	beq.n	8001808 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	699a      	ldr	r2, [r3, #24]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f042 0201 	orr.w	r2, r2, #1
 8001806:	619a      	str	r2, [r3, #24]
  }
}
 8001808:	bf00      	nop
 800180a:	370c      	adds	r7, #12
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr

08001814 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0
 800181a:	60f8      	str	r0, [r7, #12]
 800181c:	60b9      	str	r1, [r7, #8]
 800181e:	603b      	str	r3, [r7, #0]
 8001820:	4613      	mov	r3, r2
 8001822:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001824:	e022      	b.n	800186c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800182c:	d01e      	beq.n	800186c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800182e:	f7ff f90f 	bl	8000a50 <HAL_GetTick>
 8001832:	4602      	mov	r2, r0
 8001834:	69bb      	ldr	r3, [r7, #24]
 8001836:	1ad3      	subs	r3, r2, r3
 8001838:	683a      	ldr	r2, [r7, #0]
 800183a:	429a      	cmp	r2, r3
 800183c:	d302      	bcc.n	8001844 <I2C_WaitOnFlagUntilTimeout+0x30>
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d113      	bne.n	800186c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001848:	f043 0220 	orr.w	r2, r3, #32
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	2220      	movs	r2, #32
 8001854:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	2200      	movs	r2, #0
 800185c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	2200      	movs	r2, #0
 8001864:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	e00f      	b.n	800188c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	699a      	ldr	r2, [r3, #24]
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	4013      	ands	r3, r2
 8001876:	68ba      	ldr	r2, [r7, #8]
 8001878:	429a      	cmp	r2, r3
 800187a:	bf0c      	ite	eq
 800187c:	2301      	moveq	r3, #1
 800187e:	2300      	movne	r3, #0
 8001880:	b2db      	uxtb	r3, r3
 8001882:	461a      	mov	r2, r3
 8001884:	79fb      	ldrb	r3, [r7, #7]
 8001886:	429a      	cmp	r2, r3
 8001888:	d0cd      	beq.n	8001826 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800188a:	2300      	movs	r3, #0
}
 800188c:	4618      	mov	r0, r3
 800188e:	3710      	adds	r7, #16
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}

08001894 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b084      	sub	sp, #16
 8001898:	af00      	add	r7, sp, #0
 800189a:	60f8      	str	r0, [r7, #12]
 800189c:	60b9      	str	r1, [r7, #8]
 800189e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80018a0:	e02c      	b.n	80018fc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80018a2:	687a      	ldr	r2, [r7, #4]
 80018a4:	68b9      	ldr	r1, [r7, #8]
 80018a6:	68f8      	ldr	r0, [r7, #12]
 80018a8:	f000 f870 	bl	800198c <I2C_IsAcknowledgeFailed>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e02a      	b.n	800190c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80018b6:	68bb      	ldr	r3, [r7, #8]
 80018b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018bc:	d01e      	beq.n	80018fc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018be:	f7ff f8c7 	bl	8000a50 <HAL_GetTick>
 80018c2:	4602      	mov	r2, r0
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	1ad3      	subs	r3, r2, r3
 80018c8:	68ba      	ldr	r2, [r7, #8]
 80018ca:	429a      	cmp	r2, r3
 80018cc:	d302      	bcc.n	80018d4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d113      	bne.n	80018fc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018d8:	f043 0220 	orr.w	r2, r3, #32
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	2220      	movs	r2, #32
 80018e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	2200      	movs	r2, #0
 80018ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	2200      	movs	r2, #0
 80018f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	e007      	b.n	800190c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	699b      	ldr	r3, [r3, #24]
 8001902:	f003 0302 	and.w	r3, r3, #2
 8001906:	2b02      	cmp	r3, #2
 8001908:	d1cb      	bne.n	80018a2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800190a:	2300      	movs	r3, #0
}
 800190c:	4618      	mov	r0, r3
 800190e:	3710      	adds	r7, #16
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}

08001914 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af00      	add	r7, sp, #0
 800191a:	60f8      	str	r0, [r7, #12]
 800191c:	60b9      	str	r1, [r7, #8]
 800191e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001920:	e028      	b.n	8001974 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001922:	687a      	ldr	r2, [r7, #4]
 8001924:	68b9      	ldr	r1, [r7, #8]
 8001926:	68f8      	ldr	r0, [r7, #12]
 8001928:	f000 f830 	bl	800198c <I2C_IsAcknowledgeFailed>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e026      	b.n	8001984 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001936:	f7ff f88b 	bl	8000a50 <HAL_GetTick>
 800193a:	4602      	mov	r2, r0
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	1ad3      	subs	r3, r2, r3
 8001940:	68ba      	ldr	r2, [r7, #8]
 8001942:	429a      	cmp	r2, r3
 8001944:	d302      	bcc.n	800194c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d113      	bne.n	8001974 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001950:	f043 0220 	orr.w	r2, r3, #32
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	2220      	movs	r2, #32
 800195c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	2200      	movs	r2, #0
 8001964:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	2200      	movs	r2, #0
 800196c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	e007      	b.n	8001984 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	699b      	ldr	r3, [r3, #24]
 800197a:	f003 0320 	and.w	r3, r3, #32
 800197e:	2b20      	cmp	r3, #32
 8001980:	d1cf      	bne.n	8001922 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001982:	2300      	movs	r3, #0
}
 8001984:	4618      	mov	r0, r3
 8001986:	3710      	adds	r7, #16
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}

0800198c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b084      	sub	sp, #16
 8001990:	af00      	add	r7, sp, #0
 8001992:	60f8      	str	r0, [r7, #12]
 8001994:	60b9      	str	r1, [r7, #8]
 8001996:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	699b      	ldr	r3, [r3, #24]
 800199e:	f003 0310 	and.w	r3, r3, #16
 80019a2:	2b10      	cmp	r3, #16
 80019a4:	d151      	bne.n	8001a4a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80019a6:	e022      	b.n	80019ee <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019ae:	d01e      	beq.n	80019ee <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019b0:	f7ff f84e 	bl	8000a50 <HAL_GetTick>
 80019b4:	4602      	mov	r2, r0
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	68ba      	ldr	r2, [r7, #8]
 80019bc:	429a      	cmp	r2, r3
 80019be:	d302      	bcc.n	80019c6 <I2C_IsAcknowledgeFailed+0x3a>
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d113      	bne.n	80019ee <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ca:	f043 0220 	orr.w	r2, r3, #32
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	2220      	movs	r2, #32
 80019d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	2200      	movs	r2, #0
 80019de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	2200      	movs	r2, #0
 80019e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e02e      	b.n	8001a4c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	699b      	ldr	r3, [r3, #24]
 80019f4:	f003 0320 	and.w	r3, r3, #32
 80019f8:	2b20      	cmp	r3, #32
 80019fa:	d1d5      	bne.n	80019a8 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	2210      	movs	r2, #16
 8001a02:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	2220      	movs	r2, #32
 8001a0a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001a0c:	68f8      	ldr	r0, [r7, #12]
 8001a0e:	f7ff fedd 	bl	80017cc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	6859      	ldr	r1, [r3, #4]
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	4b0d      	ldr	r3, [pc, #52]	; (8001a54 <I2C_IsAcknowledgeFailed+0xc8>)
 8001a1e:	400b      	ands	r3, r1
 8001a20:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a26:	f043 0204 	orr.w	r2, r3, #4
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	2220      	movs	r2, #32
 8001a32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	2200      	movs	r2, #0
 8001a42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e000      	b.n	8001a4c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8001a4a:	2300      	movs	r3, #0
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3710      	adds	r7, #16
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	fe00e800 	.word	0xfe00e800

08001a58 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b085      	sub	sp, #20
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	60f8      	str	r0, [r7, #12]
 8001a60:	607b      	str	r3, [r7, #4]
 8001a62:	460b      	mov	r3, r1
 8001a64:	817b      	strh	r3, [r7, #10]
 8001a66:	4613      	mov	r3, r2
 8001a68:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	685a      	ldr	r2, [r3, #4]
 8001a70:	69bb      	ldr	r3, [r7, #24]
 8001a72:	0d5b      	lsrs	r3, r3, #21
 8001a74:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001a78:	4b0d      	ldr	r3, [pc, #52]	; (8001ab0 <I2C_TransferConfig+0x58>)
 8001a7a:	430b      	orrs	r3, r1
 8001a7c:	43db      	mvns	r3, r3
 8001a7e:	ea02 0103 	and.w	r1, r2, r3
 8001a82:	897b      	ldrh	r3, [r7, #10]
 8001a84:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001a88:	7a7b      	ldrb	r3, [r7, #9]
 8001a8a:	041b      	lsls	r3, r3, #16
 8001a8c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001a90:	431a      	orrs	r2, r3
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	431a      	orrs	r2, r3
 8001a96:	69bb      	ldr	r3, [r7, #24]
 8001a98:	431a      	orrs	r2, r3
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	430a      	orrs	r2, r1
 8001aa0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8001aa2:	bf00      	nop
 8001aa4:	3714      	adds	r7, #20
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	03ff63ff 	.word	0x03ff63ff

08001ab4 <HAL_I2CEx_ConfigAnalogFilter>:
 * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
 *                the configuration information for the specified I2Cx peripheral.
 * @param  AnalogFilter New state of the Analog filter.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter) {
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
 8001abc:	6039      	str	r1, [r7, #0]
	/* Check the parameters */
	assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
	assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

	if (hi2c->State == HAL_I2C_STATE_READY) {
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	2b20      	cmp	r3, #32
 8001ac8:	d138      	bne.n	8001b3c <HAL_I2CEx_ConfigAnalogFilter+0x88>
		/* Process Locked */
		__HAL_LOCK(hi2c);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d101      	bne.n	8001ad8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001ad4:	2302      	movs	r3, #2
 8001ad6:	e032      	b.n	8001b3e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2201      	movs	r2, #1
 8001adc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

		hi2c->State = HAL_I2C_STATE_BUSY;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2224      	movs	r2, #36	; 0x24
 8001ae4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

		/* Disable the selected I2C peripheral */
		__HAL_I2C_DISABLE(hi2c);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f022 0201 	bic.w	r2, r2, #1
 8001af6:	601a      	str	r2, [r3, #0]

		/* Reset I2Cx ANOFF bit */
		hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001b06:	601a      	str	r2, [r3, #0]

		/* Set analog filter bit*/
		hi2c->Instance->CR1 |= AnalogFilter;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	6819      	ldr	r1, [r3, #0]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	683a      	ldr	r2, [r7, #0]
 8001b14:	430a      	orrs	r2, r1
 8001b16:	601a      	str	r2, [r3, #0]

		__HAL_I2C_ENABLE(hi2c);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f042 0201 	orr.w	r2, r2, #1
 8001b26:	601a      	str	r2, [r3, #0]

		hi2c->State = HAL_I2C_STATE_READY;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2220      	movs	r2, #32
 8001b2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

		/* Process Unlocked */
		__HAL_UNLOCK(hi2c);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2200      	movs	r2, #0
 8001b34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

		return HAL_OK;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	e000      	b.n	8001b3e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
	} else {
		return HAL_BUSY;
 8001b3c:	2302      	movs	r3, #2
	}
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	370c      	adds	r7, #12
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr

08001b4a <HAL_I2CEx_ConfigDigitalFilter>:
 * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
 *                the configuration information for the specified I2Cx peripheral.
 * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter) {
 8001b4a:	b480      	push	{r7}
 8001b4c:	b085      	sub	sp, #20
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	6078      	str	r0, [r7, #4]
 8001b52:	6039      	str	r1, [r7, #0]

	/* Check the parameters */
	assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
	assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

	if (hi2c->State == HAL_I2C_STATE_READY) {
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	2b20      	cmp	r3, #32
 8001b5e:	d139      	bne.n	8001bd4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
		/* Process Locked */
		__HAL_LOCK(hi2c);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d101      	bne.n	8001b6e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	e033      	b.n	8001bd6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2201      	movs	r2, #1
 8001b72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

		hi2c->State = HAL_I2C_STATE_BUSY;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2224      	movs	r2, #36	; 0x24
 8001b7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

		/* Disable the selected I2C peripheral */
		__HAL_I2C_DISABLE(hi2c);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f022 0201 	bic.w	r2, r2, #1
 8001b8c:	601a      	str	r2, [r3, #0]

		/* Get the old register value */
		tmpreg = hi2c->Instance->CR1;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	60fb      	str	r3, [r7, #12]

		/* Reset I2Cx DNF bits [11:8] */
		tmpreg &= ~(I2C_CR1_DNF);
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001b9c:	60fb      	str	r3, [r7, #12]

		/* Set I2Cx DNF coefficient */
		tmpreg |= DigitalFilter << 8U;
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	021b      	lsls	r3, r3, #8
 8001ba2:	68fa      	ldr	r2, [r7, #12]
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	60fb      	str	r3, [r7, #12]

		/* Store the new register value */
		hi2c->Instance->CR1 = tmpreg;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	68fa      	ldr	r2, [r7, #12]
 8001bae:	601a      	str	r2, [r3, #0]

		__HAL_I2C_ENABLE(hi2c);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f042 0201 	orr.w	r2, r2, #1
 8001bbe:	601a      	str	r2, [r3, #0]

		hi2c->State = HAL_I2C_STATE_READY;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2220      	movs	r2, #32
 8001bc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

		/* Process Unlocked */
		__HAL_UNLOCK(hi2c);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

		return HAL_OK;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	e000      	b.n	8001bd6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
	} else {
		return HAL_BUSY;
 8001bd4:	2302      	movs	r3, #2
	}
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3714      	adds	r7, #20
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr

08001be2 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8001be2:	b580      	push	{r7, lr}
 8001be4:	b084      	sub	sp, #16
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d101      	bne.n	8001bf4 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	e038      	b.n	8001c66 <HAL_IWDG_Init+0x84>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8001bfc:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f245 5255 	movw	r2, #21845	; 0x5555
 8001c06:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	687a      	ldr	r2, [r7, #4]
 8001c0e:	6852      	ldr	r2, [r2, #4]
 8001c10:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	687a      	ldr	r2, [r7, #4]
 8001c18:	6892      	ldr	r2, [r2, #8]
 8001c1a:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8001c1c:	f7fe ff18 	bl	8000a50 <HAL_GetTick>
 8001c20:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != 0x00u)
 8001c22:	e008      	b.n	8001c36 <HAL_IWDG_Init+0x54>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8001c24:	f7fe ff14 	bl	8000a50 <HAL_GetTick>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	2b30      	cmp	r3, #48	; 0x30
 8001c30:	d901      	bls.n	8001c36 <HAL_IWDG_Init+0x54>
    {
      return HAL_TIMEOUT;
 8001c32:	2303      	movs	r3, #3
 8001c34:	e017      	b.n	8001c66 <HAL_IWDG_Init+0x84>
  while (hiwdg->Instance->SR != 0x00u)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d1f1      	bne.n	8001c24 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	691a      	ldr	r2, [r3, #16]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	68db      	ldr	r3, [r3, #12]
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	d005      	beq.n	8001c5a <HAL_IWDG_Init+0x78>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	687a      	ldr	r2, [r7, #4]
 8001c54:	68d2      	ldr	r2, [r2, #12]
 8001c56:	611a      	str	r2, [r3, #16]
 8001c58:	e004      	b.n	8001c64 <HAL_IWDG_Init+0x82>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8001c62:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c64:	2300      	movs	r3, #0
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3710      	adds	r7, #16
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}

08001c6e <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8001c6e:	b480      	push	{r7}
 8001c70:	b083      	sub	sp, #12
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8001c7e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001c80:	2300      	movs	r3, #0
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	370c      	adds	r7, #12
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr
	...

08001c90 <HAL_PWR_EnableBkUpAccess>:
  * @note  If the HSE divided by 32 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR, PWR_CR_DBP);  
 8001c94:	4b05      	ldr	r3, [pc, #20]	; (8001cac <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a04      	ldr	r2, [pc, #16]	; (8001cac <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001c9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c9e:	6013      	str	r3, [r2, #0]
}
 8001ca0:	bf00      	nop
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	40007000 	.word	0x40007000

08001cb0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	1d3b      	adds	r3, r7, #4
 8001cba:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001cbc:	1d3b      	adds	r3, r7, #4
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d102      	bne.n	8001cca <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	f000 bef4 	b.w	8002ab2 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cca:	1d3b      	adds	r3, r7, #4
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 0301 	and.w	r3, r3, #1
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	f000 816a 	beq.w	8001fae <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001cda:	4bb3      	ldr	r3, [pc, #716]	; (8001fa8 <HAL_RCC_OscConfig+0x2f8>)
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	f003 030c 	and.w	r3, r3, #12
 8001ce2:	2b04      	cmp	r3, #4
 8001ce4:	d00c      	beq.n	8001d00 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ce6:	4bb0      	ldr	r3, [pc, #704]	; (8001fa8 <HAL_RCC_OscConfig+0x2f8>)
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f003 030c 	and.w	r3, r3, #12
 8001cee:	2b08      	cmp	r3, #8
 8001cf0:	d159      	bne.n	8001da6 <HAL_RCC_OscConfig+0xf6>
 8001cf2:	4bad      	ldr	r3, [pc, #692]	; (8001fa8 <HAL_RCC_OscConfig+0x2f8>)
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cfa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cfe:	d152      	bne.n	8001da6 <HAL_RCC_OscConfig+0xf6>
 8001d00:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d04:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
	uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d08:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001d0c:	fa93 f3a3 	rbit	r3, r3
 8001d10:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
	return result;
 8001d14:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d18:	fab3 f383 	clz	r3, r3
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	095b      	lsrs	r3, r3, #5
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	f043 0301 	orr.w	r3, r3, #1
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d102      	bne.n	8001d32 <HAL_RCC_OscConfig+0x82>
 8001d2c:	4b9e      	ldr	r3, [pc, #632]	; (8001fa8 <HAL_RCC_OscConfig+0x2f8>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	e015      	b.n	8001d5e <HAL_RCC_OscConfig+0xae>
 8001d32:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d36:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d3a:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001d3e:	fa93 f3a3 	rbit	r3, r3
 8001d42:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001d46:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d4a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001d4e:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001d52:	fa93 f3a3 	rbit	r3, r3
 8001d56:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001d5a:	4b93      	ldr	r3, [pc, #588]	; (8001fa8 <HAL_RCC_OscConfig+0x2f8>)
 8001d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d5e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d62:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001d66:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001d6a:	fa92 f2a2 	rbit	r2, r2
 8001d6e:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
	return result;
 8001d72:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001d76:	fab2 f282 	clz	r2, r2
 8001d7a:	b2d2      	uxtb	r2, r2
 8001d7c:	f042 0220 	orr.w	r2, r2, #32
 8001d80:	b2d2      	uxtb	r2, r2
 8001d82:	f002 021f 	and.w	r2, r2, #31
 8001d86:	2101      	movs	r1, #1
 8001d88:	fa01 f202 	lsl.w	r2, r1, r2
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	f000 810c 	beq.w	8001fac <HAL_RCC_OscConfig+0x2fc>
 8001d94:	1d3b      	adds	r3, r7, #4
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	f040 8106 	bne.w	8001fac <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	f000 be86 	b.w	8002ab2 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001da6:	1d3b      	adds	r3, r7, #4
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001db0:	d106      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x110>
 8001db2:	4b7d      	ldr	r3, [pc, #500]	; (8001fa8 <HAL_RCC_OscConfig+0x2f8>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a7c      	ldr	r2, [pc, #496]	; (8001fa8 <HAL_RCC_OscConfig+0x2f8>)
 8001db8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dbc:	6013      	str	r3, [r2, #0]
 8001dbe:	e030      	b.n	8001e22 <HAL_RCC_OscConfig+0x172>
 8001dc0:	1d3b      	adds	r3, r7, #4
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d10c      	bne.n	8001de4 <HAL_RCC_OscConfig+0x134>
 8001dca:	4b77      	ldr	r3, [pc, #476]	; (8001fa8 <HAL_RCC_OscConfig+0x2f8>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a76      	ldr	r2, [pc, #472]	; (8001fa8 <HAL_RCC_OscConfig+0x2f8>)
 8001dd0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dd4:	6013      	str	r3, [r2, #0]
 8001dd6:	4b74      	ldr	r3, [pc, #464]	; (8001fa8 <HAL_RCC_OscConfig+0x2f8>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a73      	ldr	r2, [pc, #460]	; (8001fa8 <HAL_RCC_OscConfig+0x2f8>)
 8001ddc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001de0:	6013      	str	r3, [r2, #0]
 8001de2:	e01e      	b.n	8001e22 <HAL_RCC_OscConfig+0x172>
 8001de4:	1d3b      	adds	r3, r7, #4
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001dee:	d10c      	bne.n	8001e0a <HAL_RCC_OscConfig+0x15a>
 8001df0:	4b6d      	ldr	r3, [pc, #436]	; (8001fa8 <HAL_RCC_OscConfig+0x2f8>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a6c      	ldr	r2, [pc, #432]	; (8001fa8 <HAL_RCC_OscConfig+0x2f8>)
 8001df6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dfa:	6013      	str	r3, [r2, #0]
 8001dfc:	4b6a      	ldr	r3, [pc, #424]	; (8001fa8 <HAL_RCC_OscConfig+0x2f8>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a69      	ldr	r2, [pc, #420]	; (8001fa8 <HAL_RCC_OscConfig+0x2f8>)
 8001e02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e06:	6013      	str	r3, [r2, #0]
 8001e08:	e00b      	b.n	8001e22 <HAL_RCC_OscConfig+0x172>
 8001e0a:	4b67      	ldr	r3, [pc, #412]	; (8001fa8 <HAL_RCC_OscConfig+0x2f8>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a66      	ldr	r2, [pc, #408]	; (8001fa8 <HAL_RCC_OscConfig+0x2f8>)
 8001e10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e14:	6013      	str	r3, [r2, #0]
 8001e16:	4b64      	ldr	r3, [pc, #400]	; (8001fa8 <HAL_RCC_OscConfig+0x2f8>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a63      	ldr	r2, [pc, #396]	; (8001fa8 <HAL_RCC_OscConfig+0x2f8>)
 8001e1c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e20:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e22:	4b61      	ldr	r3, [pc, #388]	; (8001fa8 <HAL_RCC_OscConfig+0x2f8>)
 8001e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e26:	f023 020f 	bic.w	r2, r3, #15
 8001e2a:	1d3b      	adds	r3, r7, #4
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	495d      	ldr	r1, [pc, #372]	; (8001fa8 <HAL_RCC_OscConfig+0x2f8>)
 8001e32:	4313      	orrs	r3, r2
 8001e34:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e36:	1d3b      	adds	r3, r7, #4
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d059      	beq.n	8001ef4 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e40:	f7fe fe06 	bl	8000a50 <HAL_GetTick>
 8001e44:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e48:	e00a      	b.n	8001e60 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e4a:	f7fe fe01 	bl	8000a50 <HAL_GetTick>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	2b64      	cmp	r3, #100	; 0x64
 8001e58:	d902      	bls.n	8001e60 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	f000 be29 	b.w	8002ab2 <HAL_RCC_OscConfig+0xe02>
 8001e60:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e64:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e68:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001e6c:	fa93 f3a3 	rbit	r3, r3
 8001e70:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
	return result;
 8001e74:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e78:	fab3 f383 	clz	r3, r3
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	095b      	lsrs	r3, r3, #5
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	f043 0301 	orr.w	r3, r3, #1
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d102      	bne.n	8001e92 <HAL_RCC_OscConfig+0x1e2>
 8001e8c:	4b46      	ldr	r3, [pc, #280]	; (8001fa8 <HAL_RCC_OscConfig+0x2f8>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	e015      	b.n	8001ebe <HAL_RCC_OscConfig+0x20e>
 8001e92:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e96:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e9a:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001e9e:	fa93 f3a3 	rbit	r3, r3
 8001ea2:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001ea6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001eaa:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001eae:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001eb2:	fa93 f3a3 	rbit	r3, r3
 8001eb6:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001eba:	4b3b      	ldr	r3, [pc, #236]	; (8001fa8 <HAL_RCC_OscConfig+0x2f8>)
 8001ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ebe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001ec2:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001ec6:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001eca:	fa92 f2a2 	rbit	r2, r2
 8001ece:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
	return result;
 8001ed2:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001ed6:	fab2 f282 	clz	r2, r2
 8001eda:	b2d2      	uxtb	r2, r2
 8001edc:	f042 0220 	orr.w	r2, r2, #32
 8001ee0:	b2d2      	uxtb	r2, r2
 8001ee2:	f002 021f 	and.w	r2, r2, #31
 8001ee6:	2101      	movs	r1, #1
 8001ee8:	fa01 f202 	lsl.w	r2, r1, r2
 8001eec:	4013      	ands	r3, r2
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d0ab      	beq.n	8001e4a <HAL_RCC_OscConfig+0x19a>
 8001ef2:	e05c      	b.n	8001fae <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ef4:	f7fe fdac 	bl	8000a50 <HAL_GetTick>
 8001ef8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001efc:	e00a      	b.n	8001f14 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001efe:	f7fe fda7 	bl	8000a50 <HAL_GetTick>
 8001f02:	4602      	mov	r2, r0
 8001f04:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	2b64      	cmp	r3, #100	; 0x64
 8001f0c:	d902      	bls.n	8001f14 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	f000 bdcf 	b.w	8002ab2 <HAL_RCC_OscConfig+0xe02>
 8001f14:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f18:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f1c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001f20:	fa93 f3a3 	rbit	r3, r3
 8001f24:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
	return result;
 8001f28:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f2c:	fab3 f383 	clz	r3, r3
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	095b      	lsrs	r3, r3, #5
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	f043 0301 	orr.w	r3, r3, #1
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d102      	bne.n	8001f46 <HAL_RCC_OscConfig+0x296>
 8001f40:	4b19      	ldr	r3, [pc, #100]	; (8001fa8 <HAL_RCC_OscConfig+0x2f8>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	e015      	b.n	8001f72 <HAL_RCC_OscConfig+0x2c2>
 8001f46:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f4a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f4e:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001f52:	fa93 f3a3 	rbit	r3, r3
 8001f56:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001f5a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f5e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001f62:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001f66:	fa93 f3a3 	rbit	r3, r3
 8001f6a:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001f6e:	4b0e      	ldr	r3, [pc, #56]	; (8001fa8 <HAL_RCC_OscConfig+0x2f8>)
 8001f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f72:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001f76:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001f7a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001f7e:	fa92 f2a2 	rbit	r2, r2
 8001f82:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
	return result;
 8001f86:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001f8a:	fab2 f282 	clz	r2, r2
 8001f8e:	b2d2      	uxtb	r2, r2
 8001f90:	f042 0220 	orr.w	r2, r2, #32
 8001f94:	b2d2      	uxtb	r2, r2
 8001f96:	f002 021f 	and.w	r2, r2, #31
 8001f9a:	2101      	movs	r1, #1
 8001f9c:	fa01 f202 	lsl.w	r2, r1, r2
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d1ab      	bne.n	8001efe <HAL_RCC_OscConfig+0x24e>
 8001fa6:	e002      	b.n	8001fae <HAL_RCC_OscConfig+0x2fe>
 8001fa8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fae:	1d3b      	adds	r3, r7, #4
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 0302 	and.w	r3, r3, #2
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	f000 816f 	beq.w	800229c <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001fbe:	4bd0      	ldr	r3, [pc, #832]	; (8002300 <HAL_RCC_OscConfig+0x650>)
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	f003 030c 	and.w	r3, r3, #12
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d00b      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001fca:	4bcd      	ldr	r3, [pc, #820]	; (8002300 <HAL_RCC_OscConfig+0x650>)
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	f003 030c 	and.w	r3, r3, #12
 8001fd2:	2b08      	cmp	r3, #8
 8001fd4:	d16c      	bne.n	80020b0 <HAL_RCC_OscConfig+0x400>
 8001fd6:	4bca      	ldr	r3, [pc, #808]	; (8002300 <HAL_RCC_OscConfig+0x650>)
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d166      	bne.n	80020b0 <HAL_RCC_OscConfig+0x400>
 8001fe2:	2302      	movs	r3, #2
 8001fe4:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe8:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001fec:	fa93 f3a3 	rbit	r3, r3
 8001ff0:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
	return result;
 8001ff4:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ff8:	fab3 f383 	clz	r3, r3
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	095b      	lsrs	r3, r3, #5
 8002000:	b2db      	uxtb	r3, r3
 8002002:	f043 0301 	orr.w	r3, r3, #1
 8002006:	b2db      	uxtb	r3, r3
 8002008:	2b01      	cmp	r3, #1
 800200a:	d102      	bne.n	8002012 <HAL_RCC_OscConfig+0x362>
 800200c:	4bbc      	ldr	r3, [pc, #752]	; (8002300 <HAL_RCC_OscConfig+0x650>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	e013      	b.n	800203a <HAL_RCC_OscConfig+0x38a>
 8002012:	2302      	movs	r3, #2
 8002014:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002018:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800201c:	fa93 f3a3 	rbit	r3, r3
 8002020:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002024:	2302      	movs	r3, #2
 8002026:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800202a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800202e:	fa93 f3a3 	rbit	r3, r3
 8002032:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002036:	4bb2      	ldr	r3, [pc, #712]	; (8002300 <HAL_RCC_OscConfig+0x650>)
 8002038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800203a:	2202      	movs	r2, #2
 800203c:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002040:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002044:	fa92 f2a2 	rbit	r2, r2
 8002048:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
	return result;
 800204c:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002050:	fab2 f282 	clz	r2, r2
 8002054:	b2d2      	uxtb	r2, r2
 8002056:	f042 0220 	orr.w	r2, r2, #32
 800205a:	b2d2      	uxtb	r2, r2
 800205c:	f002 021f 	and.w	r2, r2, #31
 8002060:	2101      	movs	r1, #1
 8002062:	fa01 f202 	lsl.w	r2, r1, r2
 8002066:	4013      	ands	r3, r2
 8002068:	2b00      	cmp	r3, #0
 800206a:	d007      	beq.n	800207c <HAL_RCC_OscConfig+0x3cc>
 800206c:	1d3b      	adds	r3, r7, #4
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	691b      	ldr	r3, [r3, #16]
 8002072:	2b01      	cmp	r3, #1
 8002074:	d002      	beq.n	800207c <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	f000 bd1b 	b.w	8002ab2 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800207c:	4ba0      	ldr	r3, [pc, #640]	; (8002300 <HAL_RCC_OscConfig+0x650>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002084:	1d3b      	adds	r3, r7, #4
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	695b      	ldr	r3, [r3, #20]
 800208a:	21f8      	movs	r1, #248	; 0xf8
 800208c:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002090:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002094:	fa91 f1a1 	rbit	r1, r1
 8002098:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
	return result;
 800209c:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80020a0:	fab1 f181 	clz	r1, r1
 80020a4:	b2c9      	uxtb	r1, r1
 80020a6:	408b      	lsls	r3, r1
 80020a8:	4995      	ldr	r1, [pc, #596]	; (8002300 <HAL_RCC_OscConfig+0x650>)
 80020aa:	4313      	orrs	r3, r2
 80020ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020ae:	e0f5      	b.n	800229c <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020b0:	1d3b      	adds	r3, r7, #4
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	691b      	ldr	r3, [r3, #16]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	f000 8085 	beq.w	80021c6 <HAL_RCC_OscConfig+0x516>
 80020bc:	2301      	movs	r3, #1
 80020be:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80020c6:	fa93 f3a3 	rbit	r3, r3
 80020ca:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
	return result;
 80020ce:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020d2:	fab3 f383 	clz	r3, r3
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80020dc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	461a      	mov	r2, r3
 80020e4:	2301      	movs	r3, #1
 80020e6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e8:	f7fe fcb2 	bl	8000a50 <HAL_GetTick>
 80020ec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020f0:	e00a      	b.n	8002108 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020f2:	f7fe fcad 	bl	8000a50 <HAL_GetTick>
 80020f6:	4602      	mov	r2, r0
 80020f8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d902      	bls.n	8002108 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8002102:	2303      	movs	r3, #3
 8002104:	f000 bcd5 	b.w	8002ab2 <HAL_RCC_OscConfig+0xe02>
 8002108:	2302      	movs	r3, #2
 800210a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800210e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002112:	fa93 f3a3 	rbit	r3, r3
 8002116:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
	return result;
 800211a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800211e:	fab3 f383 	clz	r3, r3
 8002122:	b2db      	uxtb	r3, r3
 8002124:	095b      	lsrs	r3, r3, #5
 8002126:	b2db      	uxtb	r3, r3
 8002128:	f043 0301 	orr.w	r3, r3, #1
 800212c:	b2db      	uxtb	r3, r3
 800212e:	2b01      	cmp	r3, #1
 8002130:	d102      	bne.n	8002138 <HAL_RCC_OscConfig+0x488>
 8002132:	4b73      	ldr	r3, [pc, #460]	; (8002300 <HAL_RCC_OscConfig+0x650>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	e013      	b.n	8002160 <HAL_RCC_OscConfig+0x4b0>
 8002138:	2302      	movs	r3, #2
 800213a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800213e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002142:	fa93 f3a3 	rbit	r3, r3
 8002146:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800214a:	2302      	movs	r3, #2
 800214c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002150:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002154:	fa93 f3a3 	rbit	r3, r3
 8002158:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800215c:	4b68      	ldr	r3, [pc, #416]	; (8002300 <HAL_RCC_OscConfig+0x650>)
 800215e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002160:	2202      	movs	r2, #2
 8002162:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002166:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800216a:	fa92 f2a2 	rbit	r2, r2
 800216e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
	return result;
 8002172:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002176:	fab2 f282 	clz	r2, r2
 800217a:	b2d2      	uxtb	r2, r2
 800217c:	f042 0220 	orr.w	r2, r2, #32
 8002180:	b2d2      	uxtb	r2, r2
 8002182:	f002 021f 	and.w	r2, r2, #31
 8002186:	2101      	movs	r1, #1
 8002188:	fa01 f202 	lsl.w	r2, r1, r2
 800218c:	4013      	ands	r3, r2
 800218e:	2b00      	cmp	r3, #0
 8002190:	d0af      	beq.n	80020f2 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002192:	4b5b      	ldr	r3, [pc, #364]	; (8002300 <HAL_RCC_OscConfig+0x650>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800219a:	1d3b      	adds	r3, r7, #4
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	695b      	ldr	r3, [r3, #20]
 80021a0:	21f8      	movs	r1, #248	; 0xf8
 80021a2:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a6:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80021aa:	fa91 f1a1 	rbit	r1, r1
 80021ae:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
	return result;
 80021b2:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80021b6:	fab1 f181 	clz	r1, r1
 80021ba:	b2c9      	uxtb	r1, r1
 80021bc:	408b      	lsls	r3, r1
 80021be:	4950      	ldr	r1, [pc, #320]	; (8002300 <HAL_RCC_OscConfig+0x650>)
 80021c0:	4313      	orrs	r3, r2
 80021c2:	600b      	str	r3, [r1, #0]
 80021c4:	e06a      	b.n	800229c <HAL_RCC_OscConfig+0x5ec>
 80021c6:	2301      	movs	r3, #1
 80021c8:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021cc:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80021d0:	fa93 f3a3 	rbit	r3, r3
 80021d4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
	return result;
 80021d8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021dc:	fab3 f383 	clz	r3, r3
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80021e6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	461a      	mov	r2, r3
 80021ee:	2300      	movs	r3, #0
 80021f0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021f2:	f7fe fc2d 	bl	8000a50 <HAL_GetTick>
 80021f6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021fa:	e00a      	b.n	8002212 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021fc:	f7fe fc28 	bl	8000a50 <HAL_GetTick>
 8002200:	4602      	mov	r2, r0
 8002202:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002206:	1ad3      	subs	r3, r2, r3
 8002208:	2b02      	cmp	r3, #2
 800220a:	d902      	bls.n	8002212 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 800220c:	2303      	movs	r3, #3
 800220e:	f000 bc50 	b.w	8002ab2 <HAL_RCC_OscConfig+0xe02>
 8002212:	2302      	movs	r3, #2
 8002214:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002218:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800221c:	fa93 f3a3 	rbit	r3, r3
 8002220:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	return result;
 8002224:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002228:	fab3 f383 	clz	r3, r3
 800222c:	b2db      	uxtb	r3, r3
 800222e:	095b      	lsrs	r3, r3, #5
 8002230:	b2db      	uxtb	r3, r3
 8002232:	f043 0301 	orr.w	r3, r3, #1
 8002236:	b2db      	uxtb	r3, r3
 8002238:	2b01      	cmp	r3, #1
 800223a:	d102      	bne.n	8002242 <HAL_RCC_OscConfig+0x592>
 800223c:	4b30      	ldr	r3, [pc, #192]	; (8002300 <HAL_RCC_OscConfig+0x650>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	e013      	b.n	800226a <HAL_RCC_OscConfig+0x5ba>
 8002242:	2302      	movs	r3, #2
 8002244:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002248:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800224c:	fa93 f3a3 	rbit	r3, r3
 8002250:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002254:	2302      	movs	r3, #2
 8002256:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800225a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800225e:	fa93 f3a3 	rbit	r3, r3
 8002262:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002266:	4b26      	ldr	r3, [pc, #152]	; (8002300 <HAL_RCC_OscConfig+0x650>)
 8002268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800226a:	2202      	movs	r2, #2
 800226c:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002270:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002274:	fa92 f2a2 	rbit	r2, r2
 8002278:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
	return result;
 800227c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002280:	fab2 f282 	clz	r2, r2
 8002284:	b2d2      	uxtb	r2, r2
 8002286:	f042 0220 	orr.w	r2, r2, #32
 800228a:	b2d2      	uxtb	r2, r2
 800228c:	f002 021f 	and.w	r2, r2, #31
 8002290:	2101      	movs	r1, #1
 8002292:	fa01 f202 	lsl.w	r2, r1, r2
 8002296:	4013      	ands	r3, r2
 8002298:	2b00      	cmp	r3, #0
 800229a:	d1af      	bne.n	80021fc <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800229c:	1d3b      	adds	r3, r7, #4
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0308 	and.w	r3, r3, #8
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	f000 80da 	beq.w	8002460 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022ac:	1d3b      	adds	r3, r7, #4
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	699b      	ldr	r3, [r3, #24]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d069      	beq.n	800238a <HAL_RCC_OscConfig+0x6da>
 80022b6:	2301      	movs	r3, #1
 80022b8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022bc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80022c0:	fa93 f3a3 	rbit	r3, r3
 80022c4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	return result;
 80022c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022cc:	fab3 f383 	clz	r3, r3
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	461a      	mov	r2, r3
 80022d4:	4b0b      	ldr	r3, [pc, #44]	; (8002304 <HAL_RCC_OscConfig+0x654>)
 80022d6:	4413      	add	r3, r2
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	461a      	mov	r2, r3
 80022dc:	2301      	movs	r3, #1
 80022de:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022e0:	f7fe fbb6 	bl	8000a50 <HAL_GetTick>
 80022e4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022e8:	e00e      	b.n	8002308 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022ea:	f7fe fbb1 	bl	8000a50 <HAL_GetTick>
 80022ee:	4602      	mov	r2, r0
 80022f0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d906      	bls.n	8002308 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 80022fa:	2303      	movs	r3, #3
 80022fc:	e3d9      	b.n	8002ab2 <HAL_RCC_OscConfig+0xe02>
 80022fe:	bf00      	nop
 8002300:	40021000 	.word	0x40021000
 8002304:	10908120 	.word	0x10908120
 8002308:	2302      	movs	r3, #2
 800230a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800230e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002312:	fa93 f3a3 	rbit	r3, r3
 8002316:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800231a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800231e:	2202      	movs	r2, #2
 8002320:	601a      	str	r2, [r3, #0]
 8002322:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	fa93 f2a3 	rbit	r2, r3
 800232c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002330:	601a      	str	r2, [r3, #0]
 8002332:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002336:	2202      	movs	r2, #2
 8002338:	601a      	str	r2, [r3, #0]
 800233a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	fa93 f2a3 	rbit	r2, r3
 8002344:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002348:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800234a:	4ba5      	ldr	r3, [pc, #660]	; (80025e0 <HAL_RCC_OscConfig+0x930>)
 800234c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800234e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002352:	2102      	movs	r1, #2
 8002354:	6019      	str	r1, [r3, #0]
 8002356:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	fa93 f1a3 	rbit	r1, r3
 8002360:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002364:	6019      	str	r1, [r3, #0]
	return result;
 8002366:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	fab3 f383 	clz	r3, r3
 8002370:	b2db      	uxtb	r3, r3
 8002372:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002376:	b2db      	uxtb	r3, r3
 8002378:	f003 031f 	and.w	r3, r3, #31
 800237c:	2101      	movs	r1, #1
 800237e:	fa01 f303 	lsl.w	r3, r1, r3
 8002382:	4013      	ands	r3, r2
 8002384:	2b00      	cmp	r3, #0
 8002386:	d0b0      	beq.n	80022ea <HAL_RCC_OscConfig+0x63a>
 8002388:	e06a      	b.n	8002460 <HAL_RCC_OscConfig+0x7b0>
 800238a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800238e:	2201      	movs	r2, #1
 8002390:	601a      	str	r2, [r3, #0]
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002392:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	fa93 f2a3 	rbit	r2, r3
 800239c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80023a0:	601a      	str	r2, [r3, #0]
	return result;
 80023a2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80023a6:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023a8:	fab3 f383 	clz	r3, r3
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	461a      	mov	r2, r3
 80023b0:	4b8c      	ldr	r3, [pc, #560]	; (80025e4 <HAL_RCC_OscConfig+0x934>)
 80023b2:	4413      	add	r3, r2
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	461a      	mov	r2, r3
 80023b8:	2300      	movs	r3, #0
 80023ba:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023bc:	f7fe fb48 	bl	8000a50 <HAL_GetTick>
 80023c0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023c4:	e009      	b.n	80023da <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023c6:	f7fe fb43 	bl	8000a50 <HAL_GetTick>
 80023ca:	4602      	mov	r2, r0
 80023cc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d901      	bls.n	80023da <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e36b      	b.n	8002ab2 <HAL_RCC_OscConfig+0xe02>
 80023da:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80023de:	2202      	movs	r2, #2
 80023e0:	601a      	str	r2, [r3, #0]
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	fa93 f2a3 	rbit	r2, r3
 80023ec:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80023f0:	601a      	str	r2, [r3, #0]
 80023f2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80023f6:	2202      	movs	r2, #2
 80023f8:	601a      	str	r2, [r3, #0]
 80023fa:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	fa93 f2a3 	rbit	r2, r3
 8002404:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002408:	601a      	str	r2, [r3, #0]
 800240a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800240e:	2202      	movs	r2, #2
 8002410:	601a      	str	r2, [r3, #0]
 8002412:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	fa93 f2a3 	rbit	r2, r3
 800241c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002420:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002422:	4b6f      	ldr	r3, [pc, #444]	; (80025e0 <HAL_RCC_OscConfig+0x930>)
 8002424:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002426:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800242a:	2102      	movs	r1, #2
 800242c:	6019      	str	r1, [r3, #0]
 800242e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	fa93 f1a3 	rbit	r1, r3
 8002438:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800243c:	6019      	str	r1, [r3, #0]
	return result;
 800243e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	fab3 f383 	clz	r3, r3
 8002448:	b2db      	uxtb	r3, r3
 800244a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800244e:	b2db      	uxtb	r3, r3
 8002450:	f003 031f 	and.w	r3, r3, #31
 8002454:	2101      	movs	r1, #1
 8002456:	fa01 f303 	lsl.w	r3, r1, r3
 800245a:	4013      	ands	r3, r2
 800245c:	2b00      	cmp	r3, #0
 800245e:	d1b2      	bne.n	80023c6 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002460:	1d3b      	adds	r3, r7, #4
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0304 	and.w	r3, r3, #4
 800246a:	2b00      	cmp	r3, #0
 800246c:	f000 8158 	beq.w	8002720 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002470:	2300      	movs	r3, #0
 8002472:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002476:	4b5a      	ldr	r3, [pc, #360]	; (80025e0 <HAL_RCC_OscConfig+0x930>)
 8002478:	69db      	ldr	r3, [r3, #28]
 800247a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d112      	bne.n	80024a8 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002482:	4b57      	ldr	r3, [pc, #348]	; (80025e0 <HAL_RCC_OscConfig+0x930>)
 8002484:	69db      	ldr	r3, [r3, #28]
 8002486:	4a56      	ldr	r2, [pc, #344]	; (80025e0 <HAL_RCC_OscConfig+0x930>)
 8002488:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800248c:	61d3      	str	r3, [r2, #28]
 800248e:	4b54      	ldr	r3, [pc, #336]	; (80025e0 <HAL_RCC_OscConfig+0x930>)
 8002490:	69db      	ldr	r3, [r3, #28]
 8002492:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002496:	f107 0308 	add.w	r3, r7, #8
 800249a:	601a      	str	r2, [r3, #0]
 800249c:	f107 0308 	add.w	r3, r7, #8
 80024a0:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80024a2:	2301      	movs	r3, #1
 80024a4:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024a8:	4b4f      	ldr	r3, [pc, #316]	; (80025e8 <HAL_RCC_OscConfig+0x938>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d11a      	bne.n	80024ea <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024b4:	4b4c      	ldr	r3, [pc, #304]	; (80025e8 <HAL_RCC_OscConfig+0x938>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a4b      	ldr	r2, [pc, #300]	; (80025e8 <HAL_RCC_OscConfig+0x938>)
 80024ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024be:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024c0:	f7fe fac6 	bl	8000a50 <HAL_GetTick>
 80024c4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024c8:	e009      	b.n	80024de <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024ca:	f7fe fac1 	bl	8000a50 <HAL_GetTick>
 80024ce:	4602      	mov	r2, r0
 80024d0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	2b64      	cmp	r3, #100	; 0x64
 80024d8:	d901      	bls.n	80024de <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 80024da:	2303      	movs	r3, #3
 80024dc:	e2e9      	b.n	8002ab2 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024de:	4b42      	ldr	r3, [pc, #264]	; (80025e8 <HAL_RCC_OscConfig+0x938>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d0ef      	beq.n	80024ca <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024ea:	1d3b      	adds	r3, r7, #4
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d106      	bne.n	8002502 <HAL_RCC_OscConfig+0x852>
 80024f4:	4b3a      	ldr	r3, [pc, #232]	; (80025e0 <HAL_RCC_OscConfig+0x930>)
 80024f6:	6a1b      	ldr	r3, [r3, #32]
 80024f8:	4a39      	ldr	r2, [pc, #228]	; (80025e0 <HAL_RCC_OscConfig+0x930>)
 80024fa:	f043 0301 	orr.w	r3, r3, #1
 80024fe:	6213      	str	r3, [r2, #32]
 8002500:	e02f      	b.n	8002562 <HAL_RCC_OscConfig+0x8b2>
 8002502:	1d3b      	adds	r3, r7, #4
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d10c      	bne.n	8002526 <HAL_RCC_OscConfig+0x876>
 800250c:	4b34      	ldr	r3, [pc, #208]	; (80025e0 <HAL_RCC_OscConfig+0x930>)
 800250e:	6a1b      	ldr	r3, [r3, #32]
 8002510:	4a33      	ldr	r2, [pc, #204]	; (80025e0 <HAL_RCC_OscConfig+0x930>)
 8002512:	f023 0301 	bic.w	r3, r3, #1
 8002516:	6213      	str	r3, [r2, #32]
 8002518:	4b31      	ldr	r3, [pc, #196]	; (80025e0 <HAL_RCC_OscConfig+0x930>)
 800251a:	6a1b      	ldr	r3, [r3, #32]
 800251c:	4a30      	ldr	r2, [pc, #192]	; (80025e0 <HAL_RCC_OscConfig+0x930>)
 800251e:	f023 0304 	bic.w	r3, r3, #4
 8002522:	6213      	str	r3, [r2, #32]
 8002524:	e01d      	b.n	8002562 <HAL_RCC_OscConfig+0x8b2>
 8002526:	1d3b      	adds	r3, r7, #4
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	2b05      	cmp	r3, #5
 800252e:	d10c      	bne.n	800254a <HAL_RCC_OscConfig+0x89a>
 8002530:	4b2b      	ldr	r3, [pc, #172]	; (80025e0 <HAL_RCC_OscConfig+0x930>)
 8002532:	6a1b      	ldr	r3, [r3, #32]
 8002534:	4a2a      	ldr	r2, [pc, #168]	; (80025e0 <HAL_RCC_OscConfig+0x930>)
 8002536:	f043 0304 	orr.w	r3, r3, #4
 800253a:	6213      	str	r3, [r2, #32]
 800253c:	4b28      	ldr	r3, [pc, #160]	; (80025e0 <HAL_RCC_OscConfig+0x930>)
 800253e:	6a1b      	ldr	r3, [r3, #32]
 8002540:	4a27      	ldr	r2, [pc, #156]	; (80025e0 <HAL_RCC_OscConfig+0x930>)
 8002542:	f043 0301 	orr.w	r3, r3, #1
 8002546:	6213      	str	r3, [r2, #32]
 8002548:	e00b      	b.n	8002562 <HAL_RCC_OscConfig+0x8b2>
 800254a:	4b25      	ldr	r3, [pc, #148]	; (80025e0 <HAL_RCC_OscConfig+0x930>)
 800254c:	6a1b      	ldr	r3, [r3, #32]
 800254e:	4a24      	ldr	r2, [pc, #144]	; (80025e0 <HAL_RCC_OscConfig+0x930>)
 8002550:	f023 0301 	bic.w	r3, r3, #1
 8002554:	6213      	str	r3, [r2, #32]
 8002556:	4b22      	ldr	r3, [pc, #136]	; (80025e0 <HAL_RCC_OscConfig+0x930>)
 8002558:	6a1b      	ldr	r3, [r3, #32]
 800255a:	4a21      	ldr	r2, [pc, #132]	; (80025e0 <HAL_RCC_OscConfig+0x930>)
 800255c:	f023 0304 	bic.w	r3, r3, #4
 8002560:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002562:	1d3b      	adds	r3, r7, #4
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d06b      	beq.n	8002644 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800256c:	f7fe fa70 	bl	8000a50 <HAL_GetTick>
 8002570:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002574:	e00b      	b.n	800258e <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002576:	f7fe fa6b 	bl	8000a50 <HAL_GetTick>
 800257a:	4602      	mov	r2, r0
 800257c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	f241 3288 	movw	r2, #5000	; 0x1388
 8002586:	4293      	cmp	r3, r2
 8002588:	d901      	bls.n	800258e <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 800258a:	2303      	movs	r3, #3
 800258c:	e291      	b.n	8002ab2 <HAL_RCC_OscConfig+0xe02>
 800258e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002592:	2202      	movs	r2, #2
 8002594:	601a      	str	r2, [r3, #0]
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002596:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	fa93 f2a3 	rbit	r2, r3
 80025a0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80025a4:	601a      	str	r2, [r3, #0]
 80025a6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80025aa:	2202      	movs	r2, #2
 80025ac:	601a      	str	r2, [r3, #0]
 80025ae:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	fa93 f2a3 	rbit	r2, r3
 80025b8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80025bc:	601a      	str	r2, [r3, #0]
	return result;
 80025be:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80025c2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025c4:	fab3 f383 	clz	r3, r3
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	095b      	lsrs	r3, r3, #5
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	f043 0302 	orr.w	r3, r3, #2
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	2b02      	cmp	r3, #2
 80025d6:	d109      	bne.n	80025ec <HAL_RCC_OscConfig+0x93c>
 80025d8:	4b01      	ldr	r3, [pc, #4]	; (80025e0 <HAL_RCC_OscConfig+0x930>)
 80025da:	6a1b      	ldr	r3, [r3, #32]
 80025dc:	e014      	b.n	8002608 <HAL_RCC_OscConfig+0x958>
 80025de:	bf00      	nop
 80025e0:	40021000 	.word	0x40021000
 80025e4:	10908120 	.word	0x10908120
 80025e8:	40007000 	.word	0x40007000
 80025ec:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80025f0:	2202      	movs	r2, #2
 80025f2:	601a      	str	r2, [r3, #0]
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	fa93 f2a3 	rbit	r2, r3
 80025fe:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002602:	601a      	str	r2, [r3, #0]
 8002604:	4bbb      	ldr	r3, [pc, #748]	; (80028f4 <HAL_RCC_OscConfig+0xc44>)
 8002606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002608:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800260c:	2102      	movs	r1, #2
 800260e:	6011      	str	r1, [r2, #0]
 8002610:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002614:	6812      	ldr	r2, [r2, #0]
 8002616:	fa92 f1a2 	rbit	r1, r2
 800261a:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800261e:	6011      	str	r1, [r2, #0]
	return result;
 8002620:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002624:	6812      	ldr	r2, [r2, #0]
 8002626:	fab2 f282 	clz	r2, r2
 800262a:	b2d2      	uxtb	r2, r2
 800262c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002630:	b2d2      	uxtb	r2, r2
 8002632:	f002 021f 	and.w	r2, r2, #31
 8002636:	2101      	movs	r1, #1
 8002638:	fa01 f202 	lsl.w	r2, r1, r2
 800263c:	4013      	ands	r3, r2
 800263e:	2b00      	cmp	r3, #0
 8002640:	d099      	beq.n	8002576 <HAL_RCC_OscConfig+0x8c6>
 8002642:	e063      	b.n	800270c <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002644:	f7fe fa04 	bl	8000a50 <HAL_GetTick>
 8002648:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800264c:	e00b      	b.n	8002666 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800264e:	f7fe f9ff 	bl	8000a50 <HAL_GetTick>
 8002652:	4602      	mov	r2, r0
 8002654:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	f241 3288 	movw	r2, #5000	; 0x1388
 800265e:	4293      	cmp	r3, r2
 8002660:	d901      	bls.n	8002666 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	e225      	b.n	8002ab2 <HAL_RCC_OscConfig+0xe02>
 8002666:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800266a:	2202      	movs	r2, #2
 800266c:	601a      	str	r2, [r3, #0]
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800266e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	fa93 f2a3 	rbit	r2, r3
 8002678:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800267c:	601a      	str	r2, [r3, #0]
 800267e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002682:	2202      	movs	r2, #2
 8002684:	601a      	str	r2, [r3, #0]
 8002686:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	fa93 f2a3 	rbit	r2, r3
 8002690:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002694:	601a      	str	r2, [r3, #0]
	return result;
 8002696:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800269a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800269c:	fab3 f383 	clz	r3, r3
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	095b      	lsrs	r3, r3, #5
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	f043 0302 	orr.w	r3, r3, #2
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	2b02      	cmp	r3, #2
 80026ae:	d102      	bne.n	80026b6 <HAL_RCC_OscConfig+0xa06>
 80026b0:	4b90      	ldr	r3, [pc, #576]	; (80028f4 <HAL_RCC_OscConfig+0xc44>)
 80026b2:	6a1b      	ldr	r3, [r3, #32]
 80026b4:	e00d      	b.n	80026d2 <HAL_RCC_OscConfig+0xa22>
 80026b6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80026ba:	2202      	movs	r2, #2
 80026bc:	601a      	str	r2, [r3, #0]
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026be:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	fa93 f2a3 	rbit	r2, r3
 80026c8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80026cc:	601a      	str	r2, [r3, #0]
 80026ce:	4b89      	ldr	r3, [pc, #548]	; (80028f4 <HAL_RCC_OscConfig+0xc44>)
 80026d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80026d6:	2102      	movs	r1, #2
 80026d8:	6011      	str	r1, [r2, #0]
 80026da:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80026de:	6812      	ldr	r2, [r2, #0]
 80026e0:	fa92 f1a2 	rbit	r1, r2
 80026e4:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80026e8:	6011      	str	r1, [r2, #0]
	return result;
 80026ea:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80026ee:	6812      	ldr	r2, [r2, #0]
 80026f0:	fab2 f282 	clz	r2, r2
 80026f4:	b2d2      	uxtb	r2, r2
 80026f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80026fa:	b2d2      	uxtb	r2, r2
 80026fc:	f002 021f 	and.w	r2, r2, #31
 8002700:	2101      	movs	r1, #1
 8002702:	fa01 f202 	lsl.w	r2, r1, r2
 8002706:	4013      	ands	r3, r2
 8002708:	2b00      	cmp	r3, #0
 800270a:	d1a0      	bne.n	800264e <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800270c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002710:	2b01      	cmp	r3, #1
 8002712:	d105      	bne.n	8002720 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002714:	4b77      	ldr	r3, [pc, #476]	; (80028f4 <HAL_RCC_OscConfig+0xc44>)
 8002716:	69db      	ldr	r3, [r3, #28]
 8002718:	4a76      	ldr	r2, [pc, #472]	; (80028f4 <HAL_RCC_OscConfig+0xc44>)
 800271a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800271e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002720:	1d3b      	adds	r3, r7, #4
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	69db      	ldr	r3, [r3, #28]
 8002726:	2b00      	cmp	r3, #0
 8002728:	f000 81c2 	beq.w	8002ab0 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800272c:	4b71      	ldr	r3, [pc, #452]	; (80028f4 <HAL_RCC_OscConfig+0xc44>)
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	f003 030c 	and.w	r3, r3, #12
 8002734:	2b08      	cmp	r3, #8
 8002736:	f000 819c 	beq.w	8002a72 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800273a:	1d3b      	adds	r3, r7, #4
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	69db      	ldr	r3, [r3, #28]
 8002740:	2b02      	cmp	r3, #2
 8002742:	f040 8114 	bne.w	800296e <HAL_RCC_OscConfig+0xcbe>
 8002746:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800274a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800274e:	601a      	str	r2, [r3, #0]
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002750:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	fa93 f2a3 	rbit	r2, r3
 800275a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800275e:	601a      	str	r2, [r3, #0]
	return result;
 8002760:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002764:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002766:	fab3 f383 	clz	r3, r3
 800276a:	b2db      	uxtb	r3, r3
 800276c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002770:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	461a      	mov	r2, r3
 8002778:	2300      	movs	r3, #0
 800277a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800277c:	f7fe f968 	bl	8000a50 <HAL_GetTick>
 8002780:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002784:	e009      	b.n	800279a <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002786:	f7fe f963 	bl	8000a50 <HAL_GetTick>
 800278a:	4602      	mov	r2, r0
 800278c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	2b02      	cmp	r3, #2
 8002794:	d901      	bls.n	800279a <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8002796:	2303      	movs	r3, #3
 8002798:	e18b      	b.n	8002ab2 <HAL_RCC_OscConfig+0xe02>
 800279a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800279e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027a2:	601a      	str	r2, [r3, #0]
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027a4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	fa93 f2a3 	rbit	r2, r3
 80027ae:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80027b2:	601a      	str	r2, [r3, #0]
	return result;
 80027b4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80027b8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027ba:	fab3 f383 	clz	r3, r3
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	095b      	lsrs	r3, r3, #5
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	f043 0301 	orr.w	r3, r3, #1
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d102      	bne.n	80027d4 <HAL_RCC_OscConfig+0xb24>
 80027ce:	4b49      	ldr	r3, [pc, #292]	; (80028f4 <HAL_RCC_OscConfig+0xc44>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	e01b      	b.n	800280c <HAL_RCC_OscConfig+0xb5c>
 80027d4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80027d8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027dc:	601a      	str	r2, [r3, #0]
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027de:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	fa93 f2a3 	rbit	r2, r3
 80027e8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80027ec:	601a      	str	r2, [r3, #0]
 80027ee:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80027f2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027f6:	601a      	str	r2, [r3, #0]
 80027f8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	fa93 f2a3 	rbit	r2, r3
 8002802:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002806:	601a      	str	r2, [r3, #0]
 8002808:	4b3a      	ldr	r3, [pc, #232]	; (80028f4 <HAL_RCC_OscConfig+0xc44>)
 800280a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800280c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002810:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002814:	6011      	str	r1, [r2, #0]
 8002816:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800281a:	6812      	ldr	r2, [r2, #0]
 800281c:	fa92 f1a2 	rbit	r1, r2
 8002820:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002824:	6011      	str	r1, [r2, #0]
	return result;
 8002826:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800282a:	6812      	ldr	r2, [r2, #0]
 800282c:	fab2 f282 	clz	r2, r2
 8002830:	b2d2      	uxtb	r2, r2
 8002832:	f042 0220 	orr.w	r2, r2, #32
 8002836:	b2d2      	uxtb	r2, r2
 8002838:	f002 021f 	and.w	r2, r2, #31
 800283c:	2101      	movs	r1, #1
 800283e:	fa01 f202 	lsl.w	r2, r1, r2
 8002842:	4013      	ands	r3, r2
 8002844:	2b00      	cmp	r3, #0
 8002846:	d19e      	bne.n	8002786 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002848:	4b2a      	ldr	r3, [pc, #168]	; (80028f4 <HAL_RCC_OscConfig+0xc44>)
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002850:	1d3b      	adds	r3, r7, #4
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002856:	1d3b      	adds	r3, r7, #4
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	6a1b      	ldr	r3, [r3, #32]
 800285c:	430b      	orrs	r3, r1
 800285e:	4925      	ldr	r1, [pc, #148]	; (80028f4 <HAL_RCC_OscConfig+0xc44>)
 8002860:	4313      	orrs	r3, r2
 8002862:	604b      	str	r3, [r1, #4]
 8002864:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002868:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800286c:	601a      	str	r2, [r3, #0]
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800286e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	fa93 f2a3 	rbit	r2, r3
 8002878:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800287c:	601a      	str	r2, [r3, #0]
	return result;
 800287e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002882:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002884:	fab3 f383 	clz	r3, r3
 8002888:	b2db      	uxtb	r3, r3
 800288a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800288e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	461a      	mov	r2, r3
 8002896:	2301      	movs	r3, #1
 8002898:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800289a:	f7fe f8d9 	bl	8000a50 <HAL_GetTick>
 800289e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028a2:	e009      	b.n	80028b8 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028a4:	f7fe f8d4 	bl	8000a50 <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80028ae:	1ad3      	subs	r3, r2, r3
 80028b0:	2b02      	cmp	r3, #2
 80028b2:	d901      	bls.n	80028b8 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80028b4:	2303      	movs	r3, #3
 80028b6:	e0fc      	b.n	8002ab2 <HAL_RCC_OscConfig+0xe02>
 80028b8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80028bc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028c0:	601a      	str	r2, [r3, #0]
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	fa93 f2a3 	rbit	r2, r3
 80028cc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80028d0:	601a      	str	r2, [r3, #0]
	return result;
 80028d2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80028d6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028d8:	fab3 f383 	clz	r3, r3
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	095b      	lsrs	r3, r3, #5
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	f043 0301 	orr.w	r3, r3, #1
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d105      	bne.n	80028f8 <HAL_RCC_OscConfig+0xc48>
 80028ec:	4b01      	ldr	r3, [pc, #4]	; (80028f4 <HAL_RCC_OscConfig+0xc44>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	e01e      	b.n	8002930 <HAL_RCC_OscConfig+0xc80>
 80028f2:	bf00      	nop
 80028f4:	40021000 	.word	0x40021000
 80028f8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80028fc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002900:	601a      	str	r2, [r3, #0]
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002902:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	fa93 f2a3 	rbit	r2, r3
 800290c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002910:	601a      	str	r2, [r3, #0]
 8002912:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002916:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800291a:	601a      	str	r2, [r3, #0]
 800291c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	fa93 f2a3 	rbit	r2, r3
 8002926:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800292a:	601a      	str	r2, [r3, #0]
 800292c:	4b63      	ldr	r3, [pc, #396]	; (8002abc <HAL_RCC_OscConfig+0xe0c>)
 800292e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002930:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002934:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002938:	6011      	str	r1, [r2, #0]
 800293a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800293e:	6812      	ldr	r2, [r2, #0]
 8002940:	fa92 f1a2 	rbit	r1, r2
 8002944:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002948:	6011      	str	r1, [r2, #0]
	return result;
 800294a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800294e:	6812      	ldr	r2, [r2, #0]
 8002950:	fab2 f282 	clz	r2, r2
 8002954:	b2d2      	uxtb	r2, r2
 8002956:	f042 0220 	orr.w	r2, r2, #32
 800295a:	b2d2      	uxtb	r2, r2
 800295c:	f002 021f 	and.w	r2, r2, #31
 8002960:	2101      	movs	r1, #1
 8002962:	fa01 f202 	lsl.w	r2, r1, r2
 8002966:	4013      	ands	r3, r2
 8002968:	2b00      	cmp	r3, #0
 800296a:	d09b      	beq.n	80028a4 <HAL_RCC_OscConfig+0xbf4>
 800296c:	e0a0      	b.n	8002ab0 <HAL_RCC_OscConfig+0xe00>
 800296e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002972:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002976:	601a      	str	r2, [r3, #0]
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002978:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	fa93 f2a3 	rbit	r2, r3
 8002982:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002986:	601a      	str	r2, [r3, #0]
	return result;
 8002988:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800298c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800298e:	fab3 f383 	clz	r3, r3
 8002992:	b2db      	uxtb	r3, r3
 8002994:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002998:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	461a      	mov	r2, r3
 80029a0:	2300      	movs	r3, #0
 80029a2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029a4:	f7fe f854 	bl	8000a50 <HAL_GetTick>
 80029a8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029ac:	e009      	b.n	80029c2 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029ae:	f7fe f84f 	bl	8000a50 <HAL_GetTick>
 80029b2:	4602      	mov	r2, r0
 80029b4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d901      	bls.n	80029c2 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	e077      	b.n	8002ab2 <HAL_RCC_OscConfig+0xe02>
 80029c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80029c6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029ca:	601a      	str	r2, [r3, #0]
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	fa93 f2a3 	rbit	r2, r3
 80029d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029da:	601a      	str	r2, [r3, #0]
	return result;
 80029dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029e0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029e2:	fab3 f383 	clz	r3, r3
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	095b      	lsrs	r3, r3, #5
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	f043 0301 	orr.w	r3, r3, #1
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d102      	bne.n	80029fc <HAL_RCC_OscConfig+0xd4c>
 80029f6:	4b31      	ldr	r3, [pc, #196]	; (8002abc <HAL_RCC_OscConfig+0xe0c>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	e01b      	b.n	8002a34 <HAL_RCC_OscConfig+0xd84>
 80029fc:	f107 0320 	add.w	r3, r7, #32
 8002a00:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a04:	601a      	str	r2, [r3, #0]
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a06:	f107 0320 	add.w	r3, r7, #32
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	fa93 f2a3 	rbit	r2, r3
 8002a10:	f107 031c 	add.w	r3, r7, #28
 8002a14:	601a      	str	r2, [r3, #0]
 8002a16:	f107 0318 	add.w	r3, r7, #24
 8002a1a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a1e:	601a      	str	r2, [r3, #0]
 8002a20:	f107 0318 	add.w	r3, r7, #24
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	fa93 f2a3 	rbit	r2, r3
 8002a2a:	f107 0314 	add.w	r3, r7, #20
 8002a2e:	601a      	str	r2, [r3, #0]
 8002a30:	4b22      	ldr	r3, [pc, #136]	; (8002abc <HAL_RCC_OscConfig+0xe0c>)
 8002a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a34:	f107 0210 	add.w	r2, r7, #16
 8002a38:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002a3c:	6011      	str	r1, [r2, #0]
 8002a3e:	f107 0210 	add.w	r2, r7, #16
 8002a42:	6812      	ldr	r2, [r2, #0]
 8002a44:	fa92 f1a2 	rbit	r1, r2
 8002a48:	f107 020c 	add.w	r2, r7, #12
 8002a4c:	6011      	str	r1, [r2, #0]
	return result;
 8002a4e:	f107 020c 	add.w	r2, r7, #12
 8002a52:	6812      	ldr	r2, [r2, #0]
 8002a54:	fab2 f282 	clz	r2, r2
 8002a58:	b2d2      	uxtb	r2, r2
 8002a5a:	f042 0220 	orr.w	r2, r2, #32
 8002a5e:	b2d2      	uxtb	r2, r2
 8002a60:	f002 021f 	and.w	r2, r2, #31
 8002a64:	2101      	movs	r1, #1
 8002a66:	fa01 f202 	lsl.w	r2, r1, r2
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d19e      	bne.n	80029ae <HAL_RCC_OscConfig+0xcfe>
 8002a70:	e01e      	b.n	8002ab0 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a72:	1d3b      	adds	r3, r7, #4
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	69db      	ldr	r3, [r3, #28]
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d101      	bne.n	8002a80 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e018      	b.n	8002ab2 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002a80:	4b0e      	ldr	r3, [pc, #56]	; (8002abc <HAL_RCC_OscConfig+0xe0c>)
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002a88:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002a8c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002a90:	1d3b      	adds	r3, r7, #4
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	6a1b      	ldr	r3, [r3, #32]
 8002a96:	429a      	cmp	r2, r3
 8002a98:	d108      	bne.n	8002aac <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002a9a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002a9e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002aa2:	1d3b      	adds	r3, r7, #4
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d001      	beq.n	8002ab0 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	e000      	b.n	8002ab2 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8002ab0:	2300      	movs	r3, #0
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	40021000 	.word	0x40021000

08002ac0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b09e      	sub	sp, #120	; 0x78
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002aca:	2300      	movs	r3, #0
 8002acc:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d101      	bne.n	8002ad8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e162      	b.n	8002d9e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ad8:	4b90      	ldr	r3, [pc, #576]	; (8002d1c <HAL_RCC_ClockConfig+0x25c>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 0307 	and.w	r3, r3, #7
 8002ae0:	683a      	ldr	r2, [r7, #0]
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d910      	bls.n	8002b08 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ae6:	4b8d      	ldr	r3, [pc, #564]	; (8002d1c <HAL_RCC_ClockConfig+0x25c>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f023 0207 	bic.w	r2, r3, #7
 8002aee:	498b      	ldr	r1, [pc, #556]	; (8002d1c <HAL_RCC_ClockConfig+0x25c>)
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	4313      	orrs	r3, r2
 8002af4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002af6:	4b89      	ldr	r3, [pc, #548]	; (8002d1c <HAL_RCC_ClockConfig+0x25c>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 0307 	and.w	r3, r3, #7
 8002afe:	683a      	ldr	r2, [r7, #0]
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d001      	beq.n	8002b08 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e14a      	b.n	8002d9e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 0302 	and.w	r3, r3, #2
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d008      	beq.n	8002b26 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b14:	4b82      	ldr	r3, [pc, #520]	; (8002d20 <HAL_RCC_ClockConfig+0x260>)
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	497f      	ldr	r1, [pc, #508]	; (8002d20 <HAL_RCC_ClockConfig+0x260>)
 8002b22:	4313      	orrs	r3, r2
 8002b24:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0301 	and.w	r3, r3, #1
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	f000 80dc 	beq.w	8002cec <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d13c      	bne.n	8002bb6 <HAL_RCC_ClockConfig+0xf6>
 8002b3c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b40:	673b      	str	r3, [r7, #112]	; 0x70
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b42:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b44:	fa93 f3a3 	rbit	r3, r3
 8002b48:	66fb      	str	r3, [r7, #108]	; 0x6c
	return result;
 8002b4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b4c:	fab3 f383 	clz	r3, r3
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	095b      	lsrs	r3, r3, #5
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	f043 0301 	orr.w	r3, r3, #1
 8002b5a:	b2db      	uxtb	r3, r3
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d102      	bne.n	8002b66 <HAL_RCC_ClockConfig+0xa6>
 8002b60:	4b6f      	ldr	r3, [pc, #444]	; (8002d20 <HAL_RCC_ClockConfig+0x260>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	e00f      	b.n	8002b86 <HAL_RCC_ClockConfig+0xc6>
 8002b66:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b6a:	66bb      	str	r3, [r7, #104]	; 0x68
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b6c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b6e:	fa93 f3a3 	rbit	r3, r3
 8002b72:	667b      	str	r3, [r7, #100]	; 0x64
 8002b74:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b78:	663b      	str	r3, [r7, #96]	; 0x60
 8002b7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b7c:	fa93 f3a3 	rbit	r3, r3
 8002b80:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002b82:	4b67      	ldr	r3, [pc, #412]	; (8002d20 <HAL_RCC_ClockConfig+0x260>)
 8002b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b86:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002b8a:	65ba      	str	r2, [r7, #88]	; 0x58
 8002b8c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002b8e:	fa92 f2a2 	rbit	r2, r2
 8002b92:	657a      	str	r2, [r7, #84]	; 0x54
	return result;
 8002b94:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002b96:	fab2 f282 	clz	r2, r2
 8002b9a:	b2d2      	uxtb	r2, r2
 8002b9c:	f042 0220 	orr.w	r2, r2, #32
 8002ba0:	b2d2      	uxtb	r2, r2
 8002ba2:	f002 021f 	and.w	r2, r2, #31
 8002ba6:	2101      	movs	r1, #1
 8002ba8:	fa01 f202 	lsl.w	r2, r1, r2
 8002bac:	4013      	ands	r3, r2
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d17b      	bne.n	8002caa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e0f3      	b.n	8002d9e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d13c      	bne.n	8002c38 <HAL_RCC_ClockConfig+0x178>
 8002bbe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002bc2:	653b      	str	r3, [r7, #80]	; 0x50
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bc6:	fa93 f3a3 	rbit	r3, r3
 8002bca:	64fb      	str	r3, [r7, #76]	; 0x4c
	return result;
 8002bcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bce:	fab3 f383 	clz	r3, r3
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	095b      	lsrs	r3, r3, #5
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	f043 0301 	orr.w	r3, r3, #1
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d102      	bne.n	8002be8 <HAL_RCC_ClockConfig+0x128>
 8002be2:	4b4f      	ldr	r3, [pc, #316]	; (8002d20 <HAL_RCC_ClockConfig+0x260>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	e00f      	b.n	8002c08 <HAL_RCC_ClockConfig+0x148>
 8002be8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002bec:	64bb      	str	r3, [r7, #72]	; 0x48
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bf0:	fa93 f3a3 	rbit	r3, r3
 8002bf4:	647b      	str	r3, [r7, #68]	; 0x44
 8002bf6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002bfa:	643b      	str	r3, [r7, #64]	; 0x40
 8002bfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bfe:	fa93 f3a3 	rbit	r3, r3
 8002c02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c04:	4b46      	ldr	r3, [pc, #280]	; (8002d20 <HAL_RCC_ClockConfig+0x260>)
 8002c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c08:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c0c:	63ba      	str	r2, [r7, #56]	; 0x38
 8002c0e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c10:	fa92 f2a2 	rbit	r2, r2
 8002c14:	637a      	str	r2, [r7, #52]	; 0x34
	return result;
 8002c16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c18:	fab2 f282 	clz	r2, r2
 8002c1c:	b2d2      	uxtb	r2, r2
 8002c1e:	f042 0220 	orr.w	r2, r2, #32
 8002c22:	b2d2      	uxtb	r2, r2
 8002c24:	f002 021f 	and.w	r2, r2, #31
 8002c28:	2101      	movs	r1, #1
 8002c2a:	fa01 f202 	lsl.w	r2, r1, r2
 8002c2e:	4013      	ands	r3, r2
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d13a      	bne.n	8002caa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	e0b2      	b.n	8002d9e <HAL_RCC_ClockConfig+0x2de>
 8002c38:	2302      	movs	r3, #2
 8002c3a:	633b      	str	r3, [r7, #48]	; 0x30
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c3e:	fa93 f3a3 	rbit	r3, r3
 8002c42:	62fb      	str	r3, [r7, #44]	; 0x2c
	return result;
 8002c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c46:	fab3 f383 	clz	r3, r3
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	095b      	lsrs	r3, r3, #5
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	f043 0301 	orr.w	r3, r3, #1
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d102      	bne.n	8002c60 <HAL_RCC_ClockConfig+0x1a0>
 8002c5a:	4b31      	ldr	r3, [pc, #196]	; (8002d20 <HAL_RCC_ClockConfig+0x260>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	e00d      	b.n	8002c7c <HAL_RCC_ClockConfig+0x1bc>
 8002c60:	2302      	movs	r3, #2
 8002c62:	62bb      	str	r3, [r7, #40]	; 0x28
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c66:	fa93 f3a3 	rbit	r3, r3
 8002c6a:	627b      	str	r3, [r7, #36]	; 0x24
 8002c6c:	2302      	movs	r3, #2
 8002c6e:	623b      	str	r3, [r7, #32]
 8002c70:	6a3b      	ldr	r3, [r7, #32]
 8002c72:	fa93 f3a3 	rbit	r3, r3
 8002c76:	61fb      	str	r3, [r7, #28]
 8002c78:	4b29      	ldr	r3, [pc, #164]	; (8002d20 <HAL_RCC_ClockConfig+0x260>)
 8002c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7c:	2202      	movs	r2, #2
 8002c7e:	61ba      	str	r2, [r7, #24]
 8002c80:	69ba      	ldr	r2, [r7, #24]
 8002c82:	fa92 f2a2 	rbit	r2, r2
 8002c86:	617a      	str	r2, [r7, #20]
	return result;
 8002c88:	697a      	ldr	r2, [r7, #20]
 8002c8a:	fab2 f282 	clz	r2, r2
 8002c8e:	b2d2      	uxtb	r2, r2
 8002c90:	f042 0220 	orr.w	r2, r2, #32
 8002c94:	b2d2      	uxtb	r2, r2
 8002c96:	f002 021f 	and.w	r2, r2, #31
 8002c9a:	2101      	movs	r1, #1
 8002c9c:	fa01 f202 	lsl.w	r2, r1, r2
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d101      	bne.n	8002caa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e079      	b.n	8002d9e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002caa:	4b1d      	ldr	r3, [pc, #116]	; (8002d20 <HAL_RCC_ClockConfig+0x260>)
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	f023 0203 	bic.w	r2, r3, #3
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	491a      	ldr	r1, [pc, #104]	; (8002d20 <HAL_RCC_ClockConfig+0x260>)
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cbc:	f7fd fec8 	bl	8000a50 <HAL_GetTick>
 8002cc0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cc2:	e00a      	b.n	8002cda <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cc4:	f7fd fec4 	bl	8000a50 <HAL_GetTick>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d901      	bls.n	8002cda <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e061      	b.n	8002d9e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cda:	4b11      	ldr	r3, [pc, #68]	; (8002d20 <HAL_RCC_ClockConfig+0x260>)
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	f003 020c 	and.w	r2, r3, #12
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d1eb      	bne.n	8002cc4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cec:	4b0b      	ldr	r3, [pc, #44]	; (8002d1c <HAL_RCC_ClockConfig+0x25c>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0307 	and.w	r3, r3, #7
 8002cf4:	683a      	ldr	r2, [r7, #0]
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d214      	bcs.n	8002d24 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cfa:	4b08      	ldr	r3, [pc, #32]	; (8002d1c <HAL_RCC_ClockConfig+0x25c>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f023 0207 	bic.w	r2, r3, #7
 8002d02:	4906      	ldr	r1, [pc, #24]	; (8002d1c <HAL_RCC_ClockConfig+0x25c>)
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d0a:	4b04      	ldr	r3, [pc, #16]	; (8002d1c <HAL_RCC_ClockConfig+0x25c>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0307 	and.w	r3, r3, #7
 8002d12:	683a      	ldr	r2, [r7, #0]
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d005      	beq.n	8002d24 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e040      	b.n	8002d9e <HAL_RCC_ClockConfig+0x2de>
 8002d1c:	40022000 	.word	0x40022000
 8002d20:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 0304 	and.w	r3, r3, #4
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d008      	beq.n	8002d42 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d30:	4b1d      	ldr	r3, [pc, #116]	; (8002da8 <HAL_RCC_ClockConfig+0x2e8>)
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	491a      	ldr	r1, [pc, #104]	; (8002da8 <HAL_RCC_ClockConfig+0x2e8>)
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0308 	and.w	r3, r3, #8
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d009      	beq.n	8002d62 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d4e:	4b16      	ldr	r3, [pc, #88]	; (8002da8 <HAL_RCC_ClockConfig+0x2e8>)
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	691b      	ldr	r3, [r3, #16]
 8002d5a:	00db      	lsls	r3, r3, #3
 8002d5c:	4912      	ldr	r1, [pc, #72]	; (8002da8 <HAL_RCC_ClockConfig+0x2e8>)
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002d62:	f000 f829 	bl	8002db8 <HAL_RCC_GetSysClockFreq>
 8002d66:	4601      	mov	r1, r0
 8002d68:	4b0f      	ldr	r3, [pc, #60]	; (8002da8 <HAL_RCC_ClockConfig+0x2e8>)
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d70:	22f0      	movs	r2, #240	; 0xf0
 8002d72:	613a      	str	r2, [r7, #16]
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d74:	693a      	ldr	r2, [r7, #16]
 8002d76:	fa92 f2a2 	rbit	r2, r2
 8002d7a:	60fa      	str	r2, [r7, #12]
	return result;
 8002d7c:	68fa      	ldr	r2, [r7, #12]
 8002d7e:	fab2 f282 	clz	r2, r2
 8002d82:	b2d2      	uxtb	r2, r2
 8002d84:	40d3      	lsrs	r3, r2
 8002d86:	4a09      	ldr	r2, [pc, #36]	; (8002dac <HAL_RCC_ClockConfig+0x2ec>)
 8002d88:	5cd3      	ldrb	r3, [r2, r3]
 8002d8a:	fa21 f303 	lsr.w	r3, r1, r3
 8002d8e:	4a08      	ldr	r2, [pc, #32]	; (8002db0 <HAL_RCC_ClockConfig+0x2f0>)
 8002d90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002d92:	4b08      	ldr	r3, [pc, #32]	; (8002db4 <HAL_RCC_ClockConfig+0x2f4>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4618      	mov	r0, r3
 8002d98:	f004 fe76 	bl	8007a88 <HAL_InitTick>
  
  return HAL_OK;
 8002d9c:	2300      	movs	r3, #0
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3778      	adds	r7, #120	; 0x78
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	40021000 	.word	0x40021000
 8002dac:	0800b090 	.word	0x0800b090
 8002db0:	2000000c 	.word	0x2000000c
 8002db4:	20000000 	.word	0x20000000

08002db8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b08b      	sub	sp, #44	; 0x2c
 8002dbc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	61fb      	str	r3, [r7, #28]
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	61bb      	str	r3, [r7, #24]
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	627b      	str	r3, [r7, #36]	; 0x24
 8002dca:	2300      	movs	r3, #0
 8002dcc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002dd2:	4b29      	ldr	r3, [pc, #164]	; (8002e78 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002dd8:	69fb      	ldr	r3, [r7, #28]
 8002dda:	f003 030c 	and.w	r3, r3, #12
 8002dde:	2b04      	cmp	r3, #4
 8002de0:	d002      	beq.n	8002de8 <HAL_RCC_GetSysClockFreq+0x30>
 8002de2:	2b08      	cmp	r3, #8
 8002de4:	d003      	beq.n	8002dee <HAL_RCC_GetSysClockFreq+0x36>
 8002de6:	e03c      	b.n	8002e62 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002de8:	4b24      	ldr	r3, [pc, #144]	; (8002e7c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002dea:	623b      	str	r3, [r7, #32]
      break;
 8002dec:	e03c      	b.n	8002e68 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002df4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002df8:	60ba      	str	r2, [r7, #8]
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dfa:	68ba      	ldr	r2, [r7, #8]
 8002dfc:	fa92 f2a2 	rbit	r2, r2
 8002e00:	607a      	str	r2, [r7, #4]
	return result;
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	fab2 f282 	clz	r2, r2
 8002e08:	b2d2      	uxtb	r2, r2
 8002e0a:	40d3      	lsrs	r3, r2
 8002e0c:	4a1c      	ldr	r2, [pc, #112]	; (8002e80 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002e0e:	5cd3      	ldrb	r3, [r2, r3]
 8002e10:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002e12:	4b19      	ldr	r3, [pc, #100]	; (8002e78 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e16:	f003 030f 	and.w	r3, r3, #15
 8002e1a:	220f      	movs	r2, #15
 8002e1c:	613a      	str	r2, [r7, #16]
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e1e:	693a      	ldr	r2, [r7, #16]
 8002e20:	fa92 f2a2 	rbit	r2, r2
 8002e24:	60fa      	str	r2, [r7, #12]
	return result;
 8002e26:	68fa      	ldr	r2, [r7, #12]
 8002e28:	fab2 f282 	clz	r2, r2
 8002e2c:	b2d2      	uxtb	r2, r2
 8002e2e:	40d3      	lsrs	r3, r2
 8002e30:	4a14      	ldr	r2, [pc, #80]	; (8002e84 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002e32:	5cd3      	ldrb	r3, [r2, r3]
 8002e34:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d008      	beq.n	8002e52 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002e40:	4a0e      	ldr	r2, [pc, #56]	; (8002e7c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002e42:	69bb      	ldr	r3, [r7, #24]
 8002e44:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	fb02 f303 	mul.w	r3, r2, r3
 8002e4e:	627b      	str	r3, [r7, #36]	; 0x24
 8002e50:	e004      	b.n	8002e5c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	4a0c      	ldr	r2, [pc, #48]	; (8002e88 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002e56:	fb02 f303 	mul.w	r3, r2, r3
 8002e5a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5e:	623b      	str	r3, [r7, #32]
      break;
 8002e60:	e002      	b.n	8002e68 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002e62:	4b06      	ldr	r3, [pc, #24]	; (8002e7c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002e64:	623b      	str	r3, [r7, #32]
      break;
 8002e66:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e68:	6a3b      	ldr	r3, [r7, #32]
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	372c      	adds	r7, #44	; 0x2c
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr
 8002e76:	bf00      	nop
 8002e78:	40021000 	.word	0x40021000
 8002e7c:	007a1200 	.word	0x007a1200
 8002e80:	0800afe4 	.word	0x0800afe4
 8002e84:	0800aff4 	.word	0x0800aff4
 8002e88:	003d0900 	.word	0x003d0900

08002e8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e90:	4b03      	ldr	r3, [pc, #12]	; (8002ea0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e92:	681b      	ldr	r3, [r3, #0]
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr
 8002e9e:	bf00      	nop
 8002ea0:	2000000c 	.word	0x2000000c

08002ea4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b082      	sub	sp, #8
 8002ea8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002eaa:	f7ff ffef 	bl	8002e8c <HAL_RCC_GetHCLKFreq>
 8002eae:	4601      	mov	r1, r0
 8002eb0:	4b0b      	ldr	r3, [pc, #44]	; (8002ee0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002eb8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002ebc:	607a      	str	r2, [r7, #4]
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	fa92 f2a2 	rbit	r2, r2
 8002ec4:	603a      	str	r2, [r7, #0]
	return result;
 8002ec6:	683a      	ldr	r2, [r7, #0]
 8002ec8:	fab2 f282 	clz	r2, r2
 8002ecc:	b2d2      	uxtb	r2, r2
 8002ece:	40d3      	lsrs	r3, r2
 8002ed0:	4a04      	ldr	r2, [pc, #16]	; (8002ee4 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002ed2:	5cd3      	ldrb	r3, [r2, r3]
 8002ed4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002ed8:	4618      	mov	r0, r3
 8002eda:	3708      	adds	r7, #8
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	40021000 	.word	0x40021000
 8002ee4:	0800b0a0 	.word	0x0800b0a0

08002ee8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b083      	sub	sp, #12
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
 8002ef0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	220f      	movs	r2, #15
 8002ef6:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002ef8:	4b12      	ldr	r3, [pc, #72]	; (8002f44 <HAL_RCC_GetClockConfig+0x5c>)
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	f003 0203 	and.w	r2, r3, #3
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8002f04:	4b0f      	ldr	r3, [pc, #60]	; (8002f44 <HAL_RCC_GetClockConfig+0x5c>)
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8002f10:	4b0c      	ldr	r3, [pc, #48]	; (8002f44 <HAL_RCC_GetClockConfig+0x5c>)
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002f1c:	4b09      	ldr	r3, [pc, #36]	; (8002f44 <HAL_RCC_GetClockConfig+0x5c>)
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	08db      	lsrs	r3, r3, #3
 8002f22:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8002f2a:	4b07      	ldr	r3, [pc, #28]	; (8002f48 <HAL_RCC_GetClockConfig+0x60>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 0207 	and.w	r2, r3, #7
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	601a      	str	r2, [r3, #0]
}
 8002f36:	bf00      	nop
 8002f38:	370c      	adds	r7, #12
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr
 8002f42:	bf00      	nop
 8002f44:	40021000 	.word	0x40021000
 8002f48:	40022000 	.word	0x40022000

08002f4c <HAL_RCCEx_PeriphCLKConfig>:
 *         APB clock x 2 depending on the APB prescaler.
 *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
 *
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef *PeriphClkInit) {
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b092      	sub	sp, #72	; 0x48
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
	uint32_t tickstart = 0U;
 8002f54:	2300      	movs	r3, #0
 8002f56:	643b      	str	r3, [r7, #64]	; 0x40
	uint32_t temp_reg = 0U;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Check the parameters */
	assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

	/*---------------------------- RTC configuration -------------------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC)) {
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	f000 80d7 	beq.w	8003118 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
		/* check for RTC Parameters used to output RTCCLK */
		assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

		FlagStatus pwrclkchanged = RESET;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

		/* As soon as function is called to change RTC clock source, activation of the 
		 power domain is done. */
		/* Requires to enable write access to Backup Domain of necessary */
		if (__HAL_RCC_PWR_IS_CLK_DISABLED()) {
 8002f70:	4b4e      	ldr	r3, [pc, #312]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f72:	69db      	ldr	r3, [r3, #28]
 8002f74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d10e      	bne.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x4e>
			__HAL_RCC_PWR_CLK_ENABLE();
 8002f7c:	4b4b      	ldr	r3, [pc, #300]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f7e:	69db      	ldr	r3, [r3, #28]
 8002f80:	4a4a      	ldr	r2, [pc, #296]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f86:	61d3      	str	r3, [r2, #28]
 8002f88:	4b48      	ldr	r3, [pc, #288]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f8a:	69db      	ldr	r3, [r3, #28]
 8002f8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f90:	60bb      	str	r3, [r7, #8]
 8002f92:	68bb      	ldr	r3, [r7, #8]
			pwrclkchanged = SET;
 8002f94:	2301      	movs	r3, #1
 8002f96:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}

		if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP)) {
 8002f9a:	4b45      	ldr	r3, [pc, #276]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d118      	bne.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
			/* Enable write access to Backup domain */
			SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fa6:	4b42      	ldr	r3, [pc, #264]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a41      	ldr	r2, [pc, #260]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002fac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fb0:	6013      	str	r3, [r2, #0]

			/* Wait for Backup domain Write protection disable */
			tickstart = HAL_GetTick();
 8002fb2:	f7fd fd4d 	bl	8000a50 <HAL_GetTick>
 8002fb6:	6438      	str	r0, [r7, #64]	; 0x40

			while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP)) {
 8002fb8:	e008      	b.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x80>
				if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE) {
 8002fba:	f7fd fd49 	bl	8000a50 <HAL_GetTick>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fc2:	1ad3      	subs	r3, r2, r3
 8002fc4:	2b64      	cmp	r3, #100	; 0x64
 8002fc6:	d901      	bls.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x80>
					return HAL_TIMEOUT;
 8002fc8:	2303      	movs	r3, #3
 8002fca:	e169      	b.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x354>
			while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP)) {
 8002fcc:	4b38      	ldr	r3, [pc, #224]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d0f0      	beq.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x6e>
				}
			}
		}

		/* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
		temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002fd8:	4b34      	ldr	r3, [pc, #208]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fda:	6a1b      	ldr	r3, [r3, #32]
 8002fdc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fe0:	63fb      	str	r3, [r7, #60]	; 0x3c
		if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))) {
 8002fe2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	f000 8084 	beq.w	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ff2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d07c      	beq.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
			/* Store the content of BDCR register before the reset of Backup Domain */
			temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ff8:	4b2c      	ldr	r3, [pc, #176]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ffa:	6a1b      	ldr	r3, [r3, #32]
 8002ffc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003000:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003002:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003006:	633b      	str	r3, [r7, #48]	; 0x30
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800300a:	fa93 f3a3 	rbit	r3, r3
 800300e:	62fb      	str	r3, [r7, #44]	; 0x2c
	return result;
 8003010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
			/* RTC Clock selection can be changed only if the Backup Domain is reset */
			__HAL_RCC_BACKUPRESET_FORCE();
 8003012:	fab3 f383 	clz	r3, r3
 8003016:	b2db      	uxtb	r3, r3
 8003018:	461a      	mov	r2, r3
 800301a:	4b26      	ldr	r3, [pc, #152]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800301c:	4413      	add	r3, r2
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	461a      	mov	r2, r3
 8003022:	2301      	movs	r3, #1
 8003024:	6013      	str	r3, [r2, #0]
 8003026:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800302a:	63bb      	str	r3, [r7, #56]	; 0x38
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800302c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800302e:	fa93 f3a3 	rbit	r3, r3
 8003032:	637b      	str	r3, [r7, #52]	; 0x34
	return result;
 8003034:	6b7b      	ldr	r3, [r7, #52]	; 0x34
			__HAL_RCC_BACKUPRESET_RELEASE();
 8003036:	fab3 f383 	clz	r3, r3
 800303a:	b2db      	uxtb	r3, r3
 800303c:	461a      	mov	r2, r3
 800303e:	4b1d      	ldr	r3, [pc, #116]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003040:	4413      	add	r3, r2
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	461a      	mov	r2, r3
 8003046:	2300      	movs	r3, #0
 8003048:	6013      	str	r3, [r2, #0]
			/* Restore the Content of BDCR register */
			RCC->BDCR = temp_reg;
 800304a:	4a18      	ldr	r2, [pc, #96]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800304c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800304e:	6213      	str	r3, [r2, #32]

			/* Wait for LSERDY if LSE was enabled */
			if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON)) {
 8003050:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003052:	f003 0301 	and.w	r3, r3, #1
 8003056:	2b00      	cmp	r3, #0
 8003058:	d04b      	beq.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
				/* Get Start Tick */
				tickstart = HAL_GetTick();
 800305a:	f7fd fcf9 	bl	8000a50 <HAL_GetTick>
 800305e:	6438      	str	r0, [r7, #64]	; 0x40

				/* Wait till LSE is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET) {
 8003060:	e00a      	b.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x12c>
					if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE) {
 8003062:	f7fd fcf5 	bl	8000a50 <HAL_GetTick>
 8003066:	4602      	mov	r2, r0
 8003068:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800306a:	1ad3      	subs	r3, r2, r3
 800306c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003070:	4293      	cmp	r3, r2
 8003072:	d901      	bls.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x12c>
						return HAL_TIMEOUT;
 8003074:	2303      	movs	r3, #3
 8003076:	e113      	b.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8003078:	2302      	movs	r3, #2
 800307a:	62bb      	str	r3, [r7, #40]	; 0x28
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800307c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800307e:	fa93 f3a3 	rbit	r3, r3
 8003082:	627b      	str	r3, [r7, #36]	; 0x24
 8003084:	2302      	movs	r3, #2
 8003086:	623b      	str	r3, [r7, #32]
 8003088:	6a3b      	ldr	r3, [r7, #32]
 800308a:	fa93 f3a3 	rbit	r3, r3
 800308e:	61fb      	str	r3, [r7, #28]
	return result;
 8003090:	69fb      	ldr	r3, [r7, #28]
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET) {
 8003092:	fab3 f383 	clz	r3, r3
 8003096:	b2db      	uxtb	r3, r3
 8003098:	095b      	lsrs	r3, r3, #5
 800309a:	b2db      	uxtb	r3, r3
 800309c:	f043 0302 	orr.w	r3, r3, #2
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	2b02      	cmp	r3, #2
 80030a4:	d108      	bne.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80030a6:	4b01      	ldr	r3, [pc, #4]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030a8:	6a1b      	ldr	r3, [r3, #32]
 80030aa:	e00d      	b.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80030ac:	40021000 	.word	0x40021000
 80030b0:	40007000 	.word	0x40007000
 80030b4:	10908100 	.word	0x10908100
 80030b8:	2302      	movs	r3, #2
 80030ba:	61bb      	str	r3, [r7, #24]
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030bc:	69bb      	ldr	r3, [r7, #24]
 80030be:	fa93 f3a3 	rbit	r3, r3
 80030c2:	617b      	str	r3, [r7, #20]
 80030c4:	4b78      	ldr	r3, [pc, #480]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80030c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c8:	2202      	movs	r2, #2
 80030ca:	613a      	str	r2, [r7, #16]
 80030cc:	693a      	ldr	r2, [r7, #16]
 80030ce:	fa92 f2a2 	rbit	r2, r2
 80030d2:	60fa      	str	r2, [r7, #12]
	return result;
 80030d4:	68fa      	ldr	r2, [r7, #12]
 80030d6:	fab2 f282 	clz	r2, r2
 80030da:	b2d2      	uxtb	r2, r2
 80030dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030e0:	b2d2      	uxtb	r2, r2
 80030e2:	f002 021f 	and.w	r2, r2, #31
 80030e6:	2101      	movs	r1, #1
 80030e8:	fa01 f202 	lsl.w	r2, r1, r2
 80030ec:	4013      	ands	r3, r2
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d0b7      	beq.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x116>
					}
				}
			}
		}
		__HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80030f2:	4b6d      	ldr	r3, [pc, #436]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80030f4:	6a1b      	ldr	r3, [r3, #32]
 80030f6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	496a      	ldr	r1, [pc, #424]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003100:	4313      	orrs	r3, r2
 8003102:	620b      	str	r3, [r1, #32]

		/* Require to disable power clock if necessary */
		if (pwrclkchanged == SET) {
 8003104:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003108:	2b01      	cmp	r3, #1
 800310a:	d105      	bne.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
			__HAL_RCC_PWR_CLK_DISABLE();
 800310c:	4b66      	ldr	r3, [pc, #408]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800310e:	69db      	ldr	r3, [r3, #28]
 8003110:	4a65      	ldr	r2, [pc, #404]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003112:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003116:	61d3      	str	r3, [r2, #28]
		}
	}

	/*------------------------------- USART1 Configuration ------------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1) {
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0301 	and.w	r3, r3, #1
 8003120:	2b00      	cmp	r3, #0
 8003122:	d008      	beq.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
		/* Check the parameters */
		assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

		/* Configure the USART1 clock source */
		__HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003124:	4b60      	ldr	r3, [pc, #384]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003128:	f023 0203 	bic.w	r2, r3, #3
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	495d      	ldr	r1, [pc, #372]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003132:	4313      	orrs	r3, r2
 8003134:	630b      	str	r3, [r1, #48]	; 0x30
	}

#if defined(RCC_CFGR3_USART2SW)
	/*----------------------------- USART2 Configuration --------------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2) {
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 0302 	and.w	r3, r3, #2
 800313e:	2b00      	cmp	r3, #0
 8003140:	d008      	beq.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x208>
		/* Check the parameters */
		assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

		/* Configure the USART2 clock source */
		__HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003142:	4b59      	ldr	r3, [pc, #356]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003146:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	68db      	ldr	r3, [r3, #12]
 800314e:	4956      	ldr	r1, [pc, #344]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003150:	4313      	orrs	r3, r2
 8003152:	630b      	str	r3, [r1, #48]	; 0x30
	}
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
	/*------------------------------ USART3 Configuration ------------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3) {
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 0304 	and.w	r3, r3, #4
 800315c:	2b00      	cmp	r3, #0
 800315e:	d008      	beq.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x226>
		/* Check the parameters */
		assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

		/* Configure the USART3 clock source */
		__HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003160:	4b51      	ldr	r3, [pc, #324]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003164:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	691b      	ldr	r3, [r3, #16]
 800316c:	494e      	ldr	r1, [pc, #312]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800316e:	4313      	orrs	r3, r2
 8003170:	630b      	str	r3, [r1, #48]	; 0x30
	}
#endif /* RCC_CFGR3_USART3SW */

	/*------------------------------ I2C1 Configuration ------------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1) {
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 0320 	and.w	r3, r3, #32
 800317a:	2b00      	cmp	r3, #0
 800317c:	d008      	beq.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x244>
		/* Check the parameters */
		assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

		/* Configure the I2C1 clock source */
		__HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800317e:	4b4a      	ldr	r3, [pc, #296]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003182:	f023 0210 	bic.w	r2, r3, #16
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	69db      	ldr	r3, [r3, #28]
 800318a:	4947      	ldr	r1, [pc, #284]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800318c:	4313      	orrs	r3, r2
 800318e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
	/*------------------------------ USB Configuration ------------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB) {
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003198:	2b00      	cmp	r3, #0
 800319a:	d008      	beq.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x262>
		/* Check the parameters */
		assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));

		/* Configure the USB clock source */
		__HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800319c:	4b42      	ldr	r3, [pc, #264]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031a8:	493f      	ldr	r1, [pc, #252]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80031aa:	4313      	orrs	r3, r2
 80031ac:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

	/*------------------------------ I2C2 Configuration ------------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2) {
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d008      	beq.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x280>
		/* Check the parameters */
		assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

		/* Configure the I2C2 clock source */
		__HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80031ba:	4b3b      	ldr	r3, [pc, #236]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80031bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031be:	f023 0220 	bic.w	r2, r3, #32
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6a1b      	ldr	r3, [r3, #32]
 80031c6:	4938      	ldr	r1, [pc, #224]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80031c8:	4313      	orrs	r3, r2
 80031ca:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

	/*------------------------------ UART4 Configuration ------------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4) {
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 0308 	and.w	r3, r3, #8
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d008      	beq.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x29e>
		/* Check the parameters */
		assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

		/* Configure the UART4 clock source */
		__HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80031d8:	4b33      	ldr	r3, [pc, #204]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80031da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031dc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	695b      	ldr	r3, [r3, #20]
 80031e4:	4930      	ldr	r1, [pc, #192]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80031e6:	4313      	orrs	r3, r2
 80031e8:	630b      	str	r3, [r1, #48]	; 0x30
	}

	/*------------------------------ UART5 Configuration ------------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5) {
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 0310 	and.w	r3, r3, #16
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d008      	beq.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
		/* Check the parameters */
		assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

		/* Configure the UART5 clock source */
		__HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80031f6:	4b2c      	ldr	r3, [pc, #176]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80031f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031fa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	699b      	ldr	r3, [r3, #24]
 8003202:	4929      	ldr	r1, [pc, #164]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003204:	4313      	orrs	r3, r2
 8003206:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
	/*------------------------------ I2S Configuration ------------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) {
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003210:	2b00      	cmp	r3, #0
 8003212:	d008      	beq.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x2da>
		/* Check the parameters */
		assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

		/* Configure the I2S clock source */
		__HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003214:	4b24      	ldr	r3, [pc, #144]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003220:	4921      	ldr	r1, [pc, #132]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003222:	4313      	orrs	r3, r2
 8003224:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)

	/*------------------------------ ADC1 & ADC2 clock Configuration -------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12) {
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800322e:	2b00      	cmp	r3, #0
 8003230:	d008      	beq.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
		/* Check the parameters */
		assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));

		/* Configure the ADC12 clock source */
		__HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003232:	4b1d      	ldr	r3, [pc, #116]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003236:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323e:	491a      	ldr	r1, [pc, #104]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003240:	4313      	orrs	r3, r2
 8003242:	62cb      	str	r3, [r1, #44]	; 0x2c

#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

	/*------------------------------ ADC3 & ADC4 clock Configuration -------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34) {
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800324c:	2b00      	cmp	r3, #0
 800324e:	d008      	beq.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x316>
		/* Check the parameters */
		assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));

		/* Configure the ADC34 clock source */
		__HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003250:	4b15      	ldr	r3, [pc, #84]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003254:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800325c:	4912      	ldr	r1, [pc, #72]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800325e:	4313      	orrs	r3, r2
 8003260:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

	/*------------------------------ TIM1 clock Configuration ----------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1) {
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d008      	beq.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x334>
		/* Check the parameters */
		assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

		/* Configure the TIM1 clock source */
		__HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800326e:	4b0e      	ldr	r3, [pc, #56]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003272:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800327a:	490b      	ldr	r1, [pc, #44]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800327c:	4313      	orrs	r3, r2
 800327e:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

	/*------------------------------ TIM8 clock Configuration ----------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8) {
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003288:	2b00      	cmp	r3, #0
 800328a:	d008      	beq.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x352>
		/* Check the parameters */
		assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));

		/* Configure the TIM8 clock source */
		__HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800328c:	4b06      	ldr	r3, [pc, #24]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800328e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003290:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003298:	4903      	ldr	r1, [pc, #12]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800329a:	4313      	orrs	r3, r2
 800329c:	630b      	str	r3, [r1, #48]	; 0x30
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

	return HAL_OK;
 800329e:	2300      	movs	r3, #0
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	3748      	adds	r7, #72	; 0x48
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}
 80032a8:	40021000 	.word	0x40021000

080032ac <HAL_RTC_Init>:
  *         in the RTC_InitTypeDef structure and initialize the associated handle.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b082      	sub	sp, #8
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d101      	bne.n	80032be <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e083      	b.n	80033c6 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	7f5b      	ldrb	r3, [r3, #29]
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d105      	bne.n	80032d4 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2200      	movs	r2, #0
 80032cc:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f004 fb86 	bl	80079e0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2202      	movs	r2, #2
 80032d8:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	22ca      	movs	r2, #202	; 0xca
 80032e0:	625a      	str	r2, [r3, #36]	; 0x24
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	2253      	movs	r2, #83	; 0x53
 80032e8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f000 fc26 	bl	8003b3c <RTC_EnterInitMode>
 80032f0:	4603      	mov	r3, r0
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d008      	beq.n	8003308 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	22ff      	movs	r2, #255	; 0xff
 80032fc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2204      	movs	r2, #4
 8003302:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	e05e      	b.n	80033c6 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	6812      	ldr	r2, [r2, #0]
 8003312:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003316:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800331a:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	6899      	ldr	r1, [r3, #8]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	685a      	ldr	r2, [r3, #4]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	691b      	ldr	r3, [r3, #16]
 800332a:	431a      	orrs	r2, r3
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	695b      	ldr	r3, [r3, #20]
 8003330:	431a      	orrs	r2, r3
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	430a      	orrs	r2, r1
 8003338:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	68d2      	ldr	r2, [r2, #12]
 8003342:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	6919      	ldr	r1, [r3, #16]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	041a      	lsls	r2, r3, #16
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	430a      	orrs	r2, r1
 8003356:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	68da      	ldr	r2, [r3, #12]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003366:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	f003 0320 	and.w	r3, r3, #32
 8003372:	2b00      	cmp	r3, #0
 8003374:	d10e      	bne.n	8003394 <HAL_RTC_Init+0xe8>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f000 fbb8 	bl	8003aec <HAL_RTC_WaitForSynchro>
 800337c:	4603      	mov	r3, r0
 800337e:	2b00      	cmp	r3, #0
 8003380:	d008      	beq.n	8003394 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	22ff      	movs	r2, #255	; 0xff
 8003388:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2204      	movs	r2, #4
 800338e:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	e018      	b.n	80033c6 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80033a2:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	699a      	ldr	r2, [r3, #24]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	430a      	orrs	r2, r1
 80033b4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	22ff      	movs	r2, #255	; 0xff
 80033bc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2201      	movs	r2, #1
 80033c2:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80033c4:	2300      	movs	r3, #0
  }
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3708      	adds	r7, #8
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}

080033ce <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80033ce:	b590      	push	{r4, r7, lr}
 80033d0:	b087      	sub	sp, #28
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	60f8      	str	r0, [r7, #12]
 80033d6:	60b9      	str	r1, [r7, #8]
 80033d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80033da:	2300      	movs	r3, #0
 80033dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	7f1b      	ldrb	r3, [r3, #28]
 80033e2:	2b01      	cmp	r3, #1
 80033e4:	d101      	bne.n	80033ea <HAL_RTC_SetTime+0x1c>
 80033e6:	2302      	movs	r3, #2
 80033e8:	e0aa      	b.n	8003540 <HAL_RTC_SetTime+0x172>
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2201      	movs	r2, #1
 80033ee:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2202      	movs	r2, #2
 80033f4:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d126      	bne.n	800344a <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003406:	2b00      	cmp	r3, #0
 8003408:	d102      	bne.n	8003410 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	2200      	movs	r2, #0
 800340e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	4618      	mov	r0, r3
 8003416:	f000 fbbd 	bl	8003b94 <RTC_ByteToBcd2>
 800341a:	4603      	mov	r3, r0
 800341c:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	785b      	ldrb	r3, [r3, #1]
 8003422:	4618      	mov	r0, r3
 8003424:	f000 fbb6 	bl	8003b94 <RTC_ByteToBcd2>
 8003428:	4603      	mov	r3, r0
 800342a:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800342c:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	789b      	ldrb	r3, [r3, #2]
 8003432:	4618      	mov	r0, r3
 8003434:	f000 fbae 	bl	8003b94 <RTC_ByteToBcd2>
 8003438:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800343a:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	78db      	ldrb	r3, [r3, #3]
 8003442:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003444:	4313      	orrs	r3, r2
 8003446:	617b      	str	r3, [r7, #20]
 8003448:	e018      	b.n	800347c <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003454:	2b00      	cmp	r3, #0
 8003456:	d102      	bne.n	800345e <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	2200      	movs	r2, #0
 800345c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	781b      	ldrb	r3, [r3, #0]
 8003462:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	785b      	ldrb	r3, [r3, #1]
 8003468:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800346a:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800346c:	68ba      	ldr	r2, [r7, #8]
 800346e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8003470:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	78db      	ldrb	r3, [r3, #3]
 8003476:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003478:	4313      	orrs	r3, r2
 800347a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	22ca      	movs	r2, #202	; 0xca
 8003482:	625a      	str	r2, [r3, #36]	; 0x24
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	2253      	movs	r2, #83	; 0x53
 800348a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800348c:	68f8      	ldr	r0, [r7, #12]
 800348e:	f000 fb55 	bl	8003b3c <RTC_EnterInitMode>
 8003492:	4603      	mov	r3, r0
 8003494:	2b00      	cmp	r3, #0
 8003496:	d00b      	beq.n	80034b0 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	22ff      	movs	r2, #255	; 0xff
 800349e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2204      	movs	r2, #4
 80034a4:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2200      	movs	r2, #0
 80034aa:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	e047      	b.n	8003540 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80034ba:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80034be:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	689a      	ldr	r2, [r3, #8]
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80034ce:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	6899      	ldr	r1, [r3, #8]
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	68da      	ldr	r2, [r3, #12]
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	691b      	ldr	r3, [r3, #16]
 80034de:	431a      	orrs	r2, r3
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	430a      	orrs	r2, r1
 80034e6:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	68da      	ldr	r2, [r3, #12]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034f6:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0U, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	f003 0320 	and.w	r3, r3, #32
 8003502:	2b00      	cmp	r3, #0
 8003504:	d111      	bne.n	800352a <HAL_RTC_SetTime+0x15c>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003506:	68f8      	ldr	r0, [r7, #12]
 8003508:	f000 faf0 	bl	8003aec <HAL_RTC_WaitForSynchro>
 800350c:	4603      	mov	r3, r0
 800350e:	2b00      	cmp	r3, #0
 8003510:	d00b      	beq.n	800352a <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	22ff      	movs	r2, #255	; 0xff
 8003518:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2204      	movs	r2, #4
 800351e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2200      	movs	r2, #0
 8003524:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e00a      	b.n	8003540 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	22ff      	movs	r2, #255	; 0xff
 8003530:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2201      	movs	r2, #1
 8003536:	775a      	strb	r2, [r3, #29]

    __HAL_UNLOCK(hrtc);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2200      	movs	r2, #0
 800353c:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800353e:	2300      	movs	r3, #0
  }
}
 8003540:	4618      	mov	r0, r3
 8003542:	371c      	adds	r7, #28
 8003544:	46bd      	mov	sp, r7
 8003546:	bd90      	pop	{r4, r7, pc}

08003548 <HAL_RTC_GetTime>:
  * @note   Call HAL_RTC_GetDate() after HAL_RTC_GetTime() to unlock the values
  *         in the higher-order calendar shadow registers.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b086      	sub	sp, #24
 800354c:	af00      	add	r7, sp, #0
 800354e:	60f8      	str	r0, [r7, #12]
 8003550:	60b9      	str	r1, [r7, #8]
 8003552:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003554:	2300      	movs	r3, #0
 8003556:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	691b      	ldr	r3, [r3, #16]
 8003568:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800357a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800357e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	0c1b      	lsrs	r3, r3, #16
 8003584:	b2db      	uxtb	r3, r3
 8003586:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800358a:	b2da      	uxtb	r2, r3
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	0a1b      	lsrs	r3, r3, #8
 8003594:	b2db      	uxtb	r3, r3
 8003596:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800359a:	b2da      	uxtb	r2, r3
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80035a8:	b2da      	uxtb	r2, r3
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	0c1b      	lsrs	r3, r3, #16
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035b8:	b2da      	uxtb	r2, r3
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d11a      	bne.n	80035fa <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	781b      	ldrb	r3, [r3, #0]
 80035c8:	4618      	mov	r0, r3
 80035ca:	f000 fb01 	bl	8003bd0 <RTC_Bcd2ToByte>
 80035ce:	4603      	mov	r3, r0
 80035d0:	461a      	mov	r2, r3
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	785b      	ldrb	r3, [r3, #1]
 80035da:	4618      	mov	r0, r3
 80035dc:	f000 faf8 	bl	8003bd0 <RTC_Bcd2ToByte>
 80035e0:	4603      	mov	r3, r0
 80035e2:	461a      	mov	r2, r3
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	789b      	ldrb	r3, [r3, #2]
 80035ec:	4618      	mov	r0, r3
 80035ee:	f000 faef 	bl	8003bd0 <RTC_Bcd2ToByte>
 80035f2:	4603      	mov	r3, r0
 80035f4:	461a      	mov	r2, r3
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80035fa:	2300      	movs	r3, #0
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	3718      	adds	r7, #24
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}

08003604 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003604:	b590      	push	{r4, r7, lr}
 8003606:	b087      	sub	sp, #28
 8003608:	af00      	add	r7, sp, #0
 800360a:	60f8      	str	r0, [r7, #12]
 800360c:	60b9      	str	r1, [r7, #8]
 800360e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003610:	2300      	movs	r3, #0
 8003612:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	7f1b      	ldrb	r3, [r3, #28]
 8003618:	2b01      	cmp	r3, #1
 800361a:	d101      	bne.n	8003620 <HAL_RTC_SetDate+0x1c>
 800361c:	2302      	movs	r3, #2
 800361e:	e094      	b.n	800374a <HAL_RTC_SetDate+0x146>
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2201      	movs	r2, #1
 8003624:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2202      	movs	r2, #2
 800362a:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d10e      	bne.n	8003650 <HAL_RTC_SetDate+0x4c>
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	785b      	ldrb	r3, [r3, #1]
 8003636:	f003 0310 	and.w	r3, r3, #16
 800363a:	2b00      	cmp	r3, #0
 800363c:	d008      	beq.n	8003650 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	785b      	ldrb	r3, [r3, #1]
 8003642:	f023 0310 	bic.w	r3, r3, #16
 8003646:	b2db      	uxtb	r3, r3
 8003648:	330a      	adds	r3, #10
 800364a:	b2da      	uxtb	r2, r3
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d11c      	bne.n	8003690 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	78db      	ldrb	r3, [r3, #3]
 800365a:	4618      	mov	r0, r3
 800365c:	f000 fa9a 	bl	8003b94 <RTC_ByteToBcd2>
 8003660:	4603      	mov	r3, r0
 8003662:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	785b      	ldrb	r3, [r3, #1]
 8003668:	4618      	mov	r0, r3
 800366a:	f000 fa93 	bl	8003b94 <RTC_ByteToBcd2>
 800366e:	4603      	mov	r3, r0
 8003670:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003672:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	789b      	ldrb	r3, [r3, #2]
 8003678:	4618      	mov	r0, r3
 800367a:	f000 fa8b 	bl	8003b94 <RTC_ByteToBcd2>
 800367e:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8003680:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	781b      	ldrb	r3, [r3, #0]
 8003688:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800368a:	4313      	orrs	r3, r2
 800368c:	617b      	str	r3, [r7, #20]
 800368e:	e00e      	b.n	80036ae <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	78db      	ldrb	r3, [r3, #3]
 8003694:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	785b      	ldrb	r3, [r3, #1]
 800369a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800369c:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800369e:	68ba      	ldr	r2, [r7, #8]
 80036a0:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 80036a2:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	781b      	ldrb	r3, [r3, #0]
 80036a8:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80036aa:	4313      	orrs	r3, r2
 80036ac:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	22ca      	movs	r2, #202	; 0xca
 80036b4:	625a      	str	r2, [r3, #36]	; 0x24
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	2253      	movs	r2, #83	; 0x53
 80036bc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80036be:	68f8      	ldr	r0, [r7, #12]
 80036c0:	f000 fa3c 	bl	8003b3c <RTC_EnterInitMode>
 80036c4:	4603      	mov	r3, r0
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d00b      	beq.n	80036e2 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	22ff      	movs	r2, #255	; 0xff
 80036d0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2204      	movs	r2, #4
 80036d6:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2200      	movs	r2, #0
 80036dc:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e033      	b.n	800374a <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80036ec:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80036f0:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	68da      	ldr	r2, [r3, #12]
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003700:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0U, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	f003 0320 	and.w	r3, r3, #32
 800370c:	2b00      	cmp	r3, #0
 800370e:	d111      	bne.n	8003734 <HAL_RTC_SetDate+0x130>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003710:	68f8      	ldr	r0, [r7, #12]
 8003712:	f000 f9eb 	bl	8003aec <HAL_RTC_WaitForSynchro>
 8003716:	4603      	mov	r3, r0
 8003718:	2b00      	cmp	r3, #0
 800371a:	d00b      	beq.n	8003734 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	22ff      	movs	r2, #255	; 0xff
 8003722:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2204      	movs	r2, #4
 8003728:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2200      	movs	r2, #0
 800372e:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	e00a      	b.n	800374a <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	22ff      	movs	r2, #255	; 0xff
 800373a:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2201      	movs	r2, #1
 8003740:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2200      	movs	r2, #0
 8003746:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8003748:	2300      	movs	r3, #0
  }
}
 800374a:	4618      	mov	r0, r3
 800374c:	371c      	adds	r7, #28
 800374e:	46bd      	mov	sp, r7
 8003750:	bd90      	pop	{r4, r7, pc}

08003752 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN :  Binary data format
  *            @arg RTC_FORMAT_BCD :  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003752:	b580      	push	{r7, lr}
 8003754:	b086      	sub	sp, #24
 8003756:	af00      	add	r7, sp, #0
 8003758:	60f8      	str	r0, [r7, #12]
 800375a:	60b9      	str	r1, [r7, #8]
 800375c:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800375e:	2300      	movs	r3, #0
 8003760:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800376c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003770:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	0c1b      	lsrs	r3, r3, #16
 8003776:	b2da      	uxtb	r2, r3
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	0a1b      	lsrs	r3, r3, #8
 8003780:	b2db      	uxtb	r3, r3
 8003782:	f003 031f 	and.w	r3, r3, #31
 8003786:	b2da      	uxtb	r2, r3
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	b2db      	uxtb	r3, r3
 8003790:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003794:	b2da      	uxtb	r2, r3
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	0b5b      	lsrs	r3, r3, #13
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	f003 0307 	and.w	r3, r3, #7
 80037a4:	b2da      	uxtb	r2, r3
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d11a      	bne.n	80037e6 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	78db      	ldrb	r3, [r3, #3]
 80037b4:	4618      	mov	r0, r3
 80037b6:	f000 fa0b 	bl	8003bd0 <RTC_Bcd2ToByte>
 80037ba:	4603      	mov	r3, r0
 80037bc:	461a      	mov	r2, r3
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	785b      	ldrb	r3, [r3, #1]
 80037c6:	4618      	mov	r0, r3
 80037c8:	f000 fa02 	bl	8003bd0 <RTC_Bcd2ToByte>
 80037cc:	4603      	mov	r3, r0
 80037ce:	461a      	mov	r2, r3
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	789b      	ldrb	r3, [r3, #2]
 80037d8:	4618      	mov	r0, r3
 80037da:	f000 f9f9 	bl	8003bd0 <RTC_Bcd2ToByte>
 80037de:	4603      	mov	r3, r0
 80037e0:	461a      	mov	r2, r3
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80037e6:	2300      	movs	r3, #0
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	3718      	adds	r7, #24
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}

080037f0 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80037f0:	b590      	push	{r4, r7, lr}
 80037f2:	b089      	sub	sp, #36	; 0x24
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	60f8      	str	r0, [r7, #12]
 80037f8:	60b9      	str	r1, [r7, #8]
 80037fa:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 80037fc:	2300      	movs	r3, #0
 80037fe:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 8003800:	2300      	movs	r3, #0
 8003802:	61fb      	str	r3, [r7, #28]
 8003804:	2300      	movs	r3, #0
 8003806:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	7f1b      	ldrb	r3, [r3, #28]
 800380c:	2b01      	cmp	r3, #1
 800380e:	d101      	bne.n	8003814 <HAL_RTC_SetAlarm_IT+0x24>
 8003810:	2302      	movs	r3, #2
 8003812:	e11f      	b.n	8003a54 <HAL_RTC_SetAlarm_IT+0x264>
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2201      	movs	r2, #1
 8003818:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2202      	movs	r2, #2
 800381e:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d137      	bne.n	8003896 <HAL_RTC_SetAlarm_IT+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003830:	2b00      	cmp	r3, #0
 8003832:	d102      	bne.n	800383a <HAL_RTC_SetAlarm_IT+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	2200      	movs	r2, #0
 8003838:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	781b      	ldrb	r3, [r3, #0]
 800383e:	4618      	mov	r0, r3
 8003840:	f000 f9a8 	bl	8003b94 <RTC_ByteToBcd2>
 8003844:	4603      	mov	r3, r0
 8003846:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	785b      	ldrb	r3, [r3, #1]
 800384c:	4618      	mov	r0, r3
 800384e:	f000 f9a1 	bl	8003b94 <RTC_ByteToBcd2>
 8003852:	4603      	mov	r3, r0
 8003854:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8003856:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	789b      	ldrb	r3, [r3, #2]
 800385c:	4618      	mov	r0, r3
 800385e:	f000 f999 	bl	8003b94 <RTC_ByteToBcd2>
 8003862:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8003864:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	78db      	ldrb	r3, [r3, #3]
 800386c:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800386e:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003878:	4618      	mov	r0, r3
 800387a:	f000 f98b 	bl	8003b94 <RTC_ByteToBcd2>
 800387e:	4603      	mov	r3, r0
 8003880:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8003882:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800388a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8003890:	4313      	orrs	r3, r2
 8003892:	61fb      	str	r3, [r7, #28]
 8003894:	e023      	b.n	80038de <HAL_RTC_SetAlarm_IT+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d102      	bne.n	80038aa <HAL_RTC_SetAlarm_IT+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	2200      	movs	r2, #0
 80038a8:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	781b      	ldrb	r3, [r3, #0]
 80038ae:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	785b      	ldrb	r3, [r3, #1]
 80038b4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80038b6:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80038b8:	68ba      	ldr	r2, [r7, #8]
 80038ba:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 80038bc:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	78db      	ldrb	r3, [r3, #3]
 80038c2:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80038c4:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80038cc:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80038ce:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80038d4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80038da:	4313      	orrs	r3, r2
 80038dc:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	685a      	ldr	r2, [r3, #4]
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	69db      	ldr	r3, [r3, #28]
 80038e6:	4313      	orrs	r3, r2
 80038e8:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	22ca      	movs	r2, #202	; 0xca
 80038f0:	625a      	str	r2, [r3, #36]	; 0x24
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	2253      	movs	r2, #83	; 0x53
 80038f8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003902:	d148      	bne.n	8003996 <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	689a      	ldr	r2, [r3, #8]
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003912:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	68db      	ldr	r3, [r3, #12]
 800391a:	b2da      	uxtb	r2, r3
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8003924:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003926:	f7fd f893 	bl	8000a50 <HAL_GetTick>
 800392a:	61b8      	str	r0, [r7, #24]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800392c:	e013      	b.n	8003956 <HAL_RTC_SetAlarm_IT+0x166>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800392e:	f7fd f88f 	bl	8000a50 <HAL_GetTick>
 8003932:	4602      	mov	r2, r0
 8003934:	69bb      	ldr	r3, [r7, #24]
 8003936:	1ad3      	subs	r3, r2, r3
 8003938:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800393c:	d90b      	bls.n	8003956 <HAL_RTC_SetAlarm_IT+0x166>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	22ff      	movs	r2, #255	; 0xff
 8003944:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2203      	movs	r2, #3
 800394a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2200      	movs	r2, #0
 8003950:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8003952:	2303      	movs	r3, #3
 8003954:	e07e      	b.n	8003a54 <HAL_RTC_SetAlarm_IT+0x264>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	f003 0301 	and.w	r3, r3, #1
 8003960:	2b00      	cmp	r3, #0
 8003962:	d0e4      	beq.n	800392e <HAL_RTC_SetAlarm_IT+0x13e>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	69fa      	ldr	r2, [r7, #28]
 800396a:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	697a      	ldr	r2, [r7, #20]
 8003972:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	689a      	ldr	r2, [r3, #8]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003982:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	689a      	ldr	r2, [r3, #8]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003992:	609a      	str	r2, [r3, #8]
 8003994:	e047      	b.n	8003a26 <HAL_RTC_SetAlarm_IT+0x236>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	689a      	ldr	r2, [r3, #8]
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80039a4:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	68db      	ldr	r3, [r3, #12]
 80039ac:	b2da      	uxtb	r2, r3
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f462 7220 	orn	r2, r2, #640	; 0x280
 80039b6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80039b8:	f7fd f84a 	bl	8000a50 <HAL_GetTick>
 80039bc:	61b8      	str	r0, [r7, #24]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 80039be:	e013      	b.n	80039e8 <HAL_RTC_SetAlarm_IT+0x1f8>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80039c0:	f7fd f846 	bl	8000a50 <HAL_GetTick>
 80039c4:	4602      	mov	r2, r0
 80039c6:	69bb      	ldr	r3, [r7, #24]
 80039c8:	1ad3      	subs	r3, r2, r3
 80039ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80039ce:	d90b      	bls.n	80039e8 <HAL_RTC_SetAlarm_IT+0x1f8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	22ff      	movs	r2, #255	; 0xff
 80039d6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2203      	movs	r2, #3
 80039dc:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2200      	movs	r2, #0
 80039e2:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80039e4:	2303      	movs	r3, #3
 80039e6:	e035      	b.n	8003a54 <HAL_RTC_SetAlarm_IT+0x264>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	68db      	ldr	r3, [r3, #12]
 80039ee:	f003 0302 	and.w	r3, r3, #2
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d0e4      	beq.n	80039c0 <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	69fa      	ldr	r2, [r7, #28]
 80039fc:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	697a      	ldr	r2, [r7, #20]
 8003a04:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	689a      	ldr	r2, [r3, #8]
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a14:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	689a      	ldr	r2, [r3, #8]
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a24:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8003a26:	4b0d      	ldr	r3, [pc, #52]	; (8003a5c <HAL_RTC_SetAlarm_IT+0x26c>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a0c      	ldr	r2, [pc, #48]	; (8003a5c <HAL_RTC_SetAlarm_IT+0x26c>)
 8003a2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a30:	6013      	str	r3, [r2, #0]

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8003a32:	4b0a      	ldr	r3, [pc, #40]	; (8003a5c <HAL_RTC_SetAlarm_IT+0x26c>)
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	4a09      	ldr	r2, [pc, #36]	; (8003a5c <HAL_RTC_SetAlarm_IT+0x26c>)
 8003a38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a3c:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	22ff      	movs	r2, #255	; 0xff
 8003a44:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2201      	movs	r2, #1
 8003a4a:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8003a52:	2300      	movs	r3, #0
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	3724      	adds	r7, #36	; 0x24
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd90      	pop	{r4, r7, pc}
 8003a5c:	40010400 	.word	0x40010400

08003a60 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b082      	sub	sp, #8
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != RESET)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d012      	beq.n	8003a9c <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != RESET)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d00b      	beq.n	8003a9c <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
    #else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	f001 fec7 	bl	8005818 <HAL_RTC_AlarmAEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	68db      	ldr	r3, [r3, #12]
 8003a90:	b2da      	uxtb	r2, r3
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8003a9a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != RESET)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d012      	beq.n	8003ad0 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != RESET)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d00b      	beq.n	8003ad0 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
    #else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	f000 f8a7 	bl	8003c0c <HAL_RTCEx_AlarmBEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	b2da      	uxtb	r2, r3
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f462 7220 	orn	r2, r2, #640	; 0x280
 8003ace:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8003ad0:	4b05      	ldr	r3, [pc, #20]	; (8003ae8 <HAL_RTC_AlarmIRQHandler+0x88>)
 8003ad2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003ad6:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2201      	movs	r2, #1
 8003adc:	775a      	strb	r2, [r3, #29]
}
 8003ade:	bf00      	nop
 8003ae0:	3708      	adds	r7, #8
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	bf00      	nop
 8003ae8:	40010400 	.word	0x40010400

08003aec <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b084      	sub	sp, #16
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003af4:	2300      	movs	r3, #0
 8003af6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	68da      	ldr	r2, [r3, #12]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003b06:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8003b08:	f7fc ffa2 	bl	8000a50 <HAL_GetTick>
 8003b0c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003b0e:	e009      	b.n	8003b24 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003b10:	f7fc ff9e 	bl	8000a50 <HAL_GetTick>
 8003b14:	4602      	mov	r2, r0
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b1e:	d901      	bls.n	8003b24 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8003b20:	2303      	movs	r3, #3
 8003b22:	e007      	b.n	8003b34 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	68db      	ldr	r3, [r3, #12]
 8003b2a:	f003 0320 	and.w	r3, r3, #32
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d0ee      	beq.n	8003b10 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8003b32:	2300      	movs	r3, #0
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	3710      	adds	r7, #16
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}

08003b3c <RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - HAL_OK : RTC is in Init mode
  *          - HAL_TIMEOUT : RTC is not in Init mode and in Timeout
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b084      	sub	sp, #16
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b44:	2300      	movs	r3, #0
 8003b46:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	68db      	ldr	r3, [r3, #12]
 8003b4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d119      	bne.n	8003b8a <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f04f 32ff 	mov.w	r2, #4294967295
 8003b5e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003b60:	f7fc ff76 	bl	8000a50 <HAL_GetTick>
 8003b64:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003b66:	e009      	b.n	8003b7c <RTC_EnterInitMode+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003b68:	f7fc ff72 	bl	8000a50 <HAL_GetTick>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	1ad3      	subs	r3, r2, r3
 8003b72:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b76:	d901      	bls.n	8003b7c <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8003b78:	2303      	movs	r3, #3
 8003b7a:	e007      	b.n	8003b8c <RTC_EnterInitMode+0x50>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	68db      	ldr	r3, [r3, #12]
 8003b82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d0ee      	beq.n	8003b68 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8003b8a:	2300      	movs	r3, #0
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	3710      	adds	r7, #16
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}

08003b94 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b085      	sub	sp, #20
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8003ba2:	e005      	b.n	8003bb0 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	3301      	adds	r3, #1
 8003ba8:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8003baa:	79fb      	ldrb	r3, [r7, #7]
 8003bac:	3b0a      	subs	r3, #10
 8003bae:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8003bb0:	79fb      	ldrb	r3, [r7, #7]
 8003bb2:	2b09      	cmp	r3, #9
 8003bb4:	d8f6      	bhi.n	8003ba4 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	011b      	lsls	r3, r3, #4
 8003bbc:	b2da      	uxtb	r2, r3
 8003bbe:	79fb      	ldrb	r3, [r7, #7]
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	b2db      	uxtb	r3, r3
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3714      	adds	r7, #20
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bce:	4770      	bx	lr

08003bd0 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b085      	sub	sp, #20
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0U) >> (uint8_t)0x4U) * 10U;
 8003bde:	79fb      	ldrb	r3, [r7, #7]
 8003be0:	091b      	lsrs	r3, r3, #4
 8003be2:	b2db      	uxtb	r3, r3
 8003be4:	461a      	mov	r2, r3
 8003be6:	4613      	mov	r3, r2
 8003be8:	009b      	lsls	r3, r3, #2
 8003bea:	4413      	add	r3, r2
 8003bec:	005b      	lsls	r3, r3, #1
 8003bee:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0FU));
 8003bf0:	79fb      	ldrb	r3, [r7, #7]
 8003bf2:	f003 030f 	and.w	r3, r3, #15
 8003bf6:	b2da      	uxtb	r2, r3
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	4413      	add	r3, r2
 8003bfe:	b2db      	uxtb	r3, r3
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3714      	adds	r7, #20
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr

08003c0c <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b083      	sub	sp, #12
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8003c14:	bf00      	nop
 8003c16:	370c      	adds	r7, #12
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr

08003c20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b082      	sub	sp, #8
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d101      	bne.n	8003c32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e01d      	b.n	8003c6e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d106      	bne.n	8003c4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f004 faa8 	bl	800819c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2202      	movs	r2, #2
 8003c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	3304      	adds	r3, #4
 8003c5c:	4619      	mov	r1, r3
 8003c5e:	4610      	mov	r0, r2
 8003c60:	f000 fcbe 	bl	80045e0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2201      	movs	r2, #1
 8003c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c6c:	2300      	movs	r3, #0
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3708      	adds	r7, #8
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}
	...

08003c78 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b085      	sub	sp, #20
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	68da      	ldr	r2, [r3, #12]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f042 0201 	orr.w	r2, r2, #1
 8003c8e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	689a      	ldr	r2, [r3, #8]
 8003c96:	4b0c      	ldr	r3, [pc, #48]	; (8003cc8 <HAL_TIM_Base_Start_IT+0x50>)
 8003c98:	4013      	ands	r3, r2
 8003c9a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2b06      	cmp	r3, #6
 8003ca0:	d00b      	beq.n	8003cba <HAL_TIM_Base_Start_IT+0x42>
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ca8:	d007      	beq.n	8003cba <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f042 0201 	orr.w	r2, r2, #1
 8003cb8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003cba:	2300      	movs	r3, #0
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	3714      	adds	r7, #20
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr
 8003cc8:	00010007 	.word	0x00010007

08003ccc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b082      	sub	sp, #8
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d101      	bne.n	8003cde <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e01d      	b.n	8003d1a <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d106      	bne.n	8003cf8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2200      	movs	r2, #0
 8003cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f004 f9d0 	bl	8008098 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2202      	movs	r2, #2
 8003cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681a      	ldr	r2, [r3, #0]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	3304      	adds	r3, #4
 8003d08:	4619      	mov	r1, r3
 8003d0a:	4610      	mov	r0, r2
 8003d0c:	f000 fc68 	bl	80045e0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2201      	movs	r2, #1
 8003d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d18:	2300      	movs	r3, #0
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3708      	adds	r7, #8
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}
	...

08003d24 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b084      	sub	sp, #16
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
 8003d2c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	2201      	movs	r2, #1
 8003d34:	6839      	ldr	r1, [r7, #0]
 8003d36:	4618      	mov	r0, r3
 8003d38:	f001 f852 	bl	8004de0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a1e      	ldr	r2, [pc, #120]	; (8003dbc <HAL_TIM_PWM_Start+0x98>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d013      	beq.n	8003d6e <HAL_TIM_PWM_Start+0x4a>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a1d      	ldr	r2, [pc, #116]	; (8003dc0 <HAL_TIM_PWM_Start+0x9c>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d00e      	beq.n	8003d6e <HAL_TIM_PWM_Start+0x4a>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a1b      	ldr	r2, [pc, #108]	; (8003dc4 <HAL_TIM_PWM_Start+0xa0>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d009      	beq.n	8003d6e <HAL_TIM_PWM_Start+0x4a>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a1a      	ldr	r2, [pc, #104]	; (8003dc8 <HAL_TIM_PWM_Start+0xa4>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d004      	beq.n	8003d6e <HAL_TIM_PWM_Start+0x4a>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a18      	ldr	r2, [pc, #96]	; (8003dcc <HAL_TIM_PWM_Start+0xa8>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d101      	bne.n	8003d72 <HAL_TIM_PWM_Start+0x4e>
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e000      	b.n	8003d74 <HAL_TIM_PWM_Start+0x50>
 8003d72:	2300      	movs	r3, #0
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d007      	beq.n	8003d88 <HAL_TIM_PWM_Start+0x64>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d86:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	689a      	ldr	r2, [r3, #8]
 8003d8e:	4b10      	ldr	r3, [pc, #64]	; (8003dd0 <HAL_TIM_PWM_Start+0xac>)
 8003d90:	4013      	ands	r3, r2
 8003d92:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2b06      	cmp	r3, #6
 8003d98:	d00b      	beq.n	8003db2 <HAL_TIM_PWM_Start+0x8e>
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003da0:	d007      	beq.n	8003db2 <HAL_TIM_PWM_Start+0x8e>
  {
    __HAL_TIM_ENABLE(htim);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f042 0201 	orr.w	r2, r2, #1
 8003db0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003db2:	2300      	movs	r3, #0
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	3710      	adds	r7, #16
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}
 8003dbc:	40012c00 	.word	0x40012c00
 8003dc0:	40013400 	.word	0x40013400
 8003dc4:	40014000 	.word	0x40014000
 8003dc8:	40014400 	.word	0x40014400
 8003dcc:	40014800 	.word	0x40014800
 8003dd0:	00010007 	.word	0x00010007

08003dd4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b086      	sub	sp, #24
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
 8003ddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d101      	bne.n	8003de8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	e083      	b.n	8003ef0 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dee:	b2db      	uxtb	r3, r3
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d106      	bne.n	8003e02 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2200      	movs	r2, #0
 8003df8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	f004 f985 	bl	800810c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2202      	movs	r2, #2
 8003e06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	687a      	ldr	r2, [r7, #4]
 8003e12:	6812      	ldr	r2, [r2, #0]
 8003e14:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8003e18:	f023 0307 	bic.w	r3, r3, #7
 8003e1c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	3304      	adds	r3, #4
 8003e26:	4619      	mov	r1, r3
 8003e28:	4610      	mov	r0, r2
 8003e2a:	f000 fbd9 	bl	80045e0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	699b      	ldr	r3, [r3, #24]
 8003e3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	6a1b      	ldr	r3, [r3, #32]
 8003e44:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	697a      	ldr	r2, [r7, #20]
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e56:	f023 0303 	bic.w	r3, r3, #3
 8003e5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	689a      	ldr	r2, [r3, #8]
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	699b      	ldr	r3, [r3, #24]
 8003e64:	021b      	lsls	r3, r3, #8
 8003e66:	4313      	orrs	r3, r2
 8003e68:	693a      	ldr	r2, [r7, #16]
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003e74:	f023 030c 	bic.w	r3, r3, #12
 8003e78:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003e80:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e84:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	68da      	ldr	r2, [r3, #12]
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	69db      	ldr	r3, [r3, #28]
 8003e8e:	021b      	lsls	r3, r3, #8
 8003e90:	4313      	orrs	r3, r2
 8003e92:	693a      	ldr	r2, [r7, #16]
 8003e94:	4313      	orrs	r3, r2
 8003e96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	691b      	ldr	r3, [r3, #16]
 8003e9c:	011a      	lsls	r2, r3, #4
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	6a1b      	ldr	r3, [r3, #32]
 8003ea2:	031b      	lsls	r3, r3, #12
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	693a      	ldr	r2, [r7, #16]
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003eb2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003eba:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	685a      	ldr	r2, [r3, #4]
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	695b      	ldr	r3, [r3, #20]
 8003ec4:	011b      	lsls	r3, r3, #4
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	68fa      	ldr	r2, [r7, #12]
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	697a      	ldr	r2, [r7, #20]
 8003ed4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	693a      	ldr	r2, [r7, #16]
 8003edc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	68fa      	ldr	r2, [r7, #12]
 8003ee4:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2201      	movs	r2, #1
 8003eea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003eee:	2300      	movs	r3, #0
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3718      	adds	r7, #24
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}

08003ef8 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b082      	sub	sp, #8
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
 8003f00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d003      	beq.n	8003f10 <HAL_TIM_Encoder_Start_IT+0x18>
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	2b04      	cmp	r3, #4
 8003f0c:	d010      	beq.n	8003f30 <HAL_TIM_Encoder_Start_IT+0x38>
 8003f0e:	e01f      	b.n	8003f50 <HAL_TIM_Encoder_Start_IT+0x58>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	2201      	movs	r2, #1
 8003f16:	2100      	movs	r1, #0
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f000 ff61 	bl	8004de0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	68da      	ldr	r2, [r3, #12]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f042 0202 	orr.w	r2, r2, #2
 8003f2c:	60da      	str	r2, [r3, #12]
      break;
 8003f2e:	e02e      	b.n	8003f8e <HAL_TIM_Encoder_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	2201      	movs	r2, #1
 8003f36:	2104      	movs	r1, #4
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f000 ff51 	bl	8004de0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	68da      	ldr	r2, [r3, #12]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f042 0204 	orr.w	r2, r2, #4
 8003f4c:	60da      	str	r2, [r3, #12]
      break;
 8003f4e:	e01e      	b.n	8003f8e <HAL_TIM_Encoder_Start_IT+0x96>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	2201      	movs	r2, #1
 8003f56:	2100      	movs	r1, #0
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f000 ff41 	bl	8004de0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	2201      	movs	r2, #1
 8003f64:	2104      	movs	r1, #4
 8003f66:	4618      	mov	r0, r3
 8003f68:	f000 ff3a 	bl	8004de0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	68da      	ldr	r2, [r3, #12]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f042 0202 	orr.w	r2, r2, #2
 8003f7a:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	68da      	ldr	r2, [r3, #12]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f042 0204 	orr.w	r2, r2, #4
 8003f8a:	60da      	str	r2, [r3, #12]
      break;
 8003f8c:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f042 0201 	orr.w	r2, r2, #1
 8003f9c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003f9e:	2300      	movs	r3, #0
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	3708      	adds	r7, #8
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}

08003fa8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b082      	sub	sp, #8
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	691b      	ldr	r3, [r3, #16]
 8003fb6:	f003 0302 	and.w	r3, r3, #2
 8003fba:	2b02      	cmp	r3, #2
 8003fbc:	d122      	bne.n	8004004 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	68db      	ldr	r3, [r3, #12]
 8003fc4:	f003 0302 	and.w	r3, r3, #2
 8003fc8:	2b02      	cmp	r3, #2
 8003fca:	d11b      	bne.n	8004004 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f06f 0202 	mvn.w	r2, #2
 8003fd4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2201      	movs	r2, #1
 8003fda:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	699b      	ldr	r3, [r3, #24]
 8003fe2:	f003 0303 	and.w	r3, r3, #3
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d003      	beq.n	8003ff2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f001 fdf4 	bl	8005bd8 <HAL_TIM_IC_CaptureCallback>
 8003ff0:	e005      	b.n	8003ffe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f000 fad6 	bl	80045a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ff8:	6878      	ldr	r0, [r7, #4]
 8003ffa:	f000 fadd 	bl	80045b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2200      	movs	r2, #0
 8004002:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	691b      	ldr	r3, [r3, #16]
 800400a:	f003 0304 	and.w	r3, r3, #4
 800400e:	2b04      	cmp	r3, #4
 8004010:	d122      	bne.n	8004058 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	68db      	ldr	r3, [r3, #12]
 8004018:	f003 0304 	and.w	r3, r3, #4
 800401c:	2b04      	cmp	r3, #4
 800401e:	d11b      	bne.n	8004058 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f06f 0204 	mvn.w	r2, #4
 8004028:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2202      	movs	r2, #2
 800402e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	699b      	ldr	r3, [r3, #24]
 8004036:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800403a:	2b00      	cmp	r3, #0
 800403c:	d003      	beq.n	8004046 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f001 fdca 	bl	8005bd8 <HAL_TIM_IC_CaptureCallback>
 8004044:	e005      	b.n	8004052 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f000 faac 	bl	80045a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800404c:	6878      	ldr	r0, [r7, #4]
 800404e:	f000 fab3 	bl	80045b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2200      	movs	r2, #0
 8004056:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	691b      	ldr	r3, [r3, #16]
 800405e:	f003 0308 	and.w	r3, r3, #8
 8004062:	2b08      	cmp	r3, #8
 8004064:	d122      	bne.n	80040ac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	68db      	ldr	r3, [r3, #12]
 800406c:	f003 0308 	and.w	r3, r3, #8
 8004070:	2b08      	cmp	r3, #8
 8004072:	d11b      	bne.n	80040ac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f06f 0208 	mvn.w	r2, #8
 800407c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2204      	movs	r2, #4
 8004082:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	69db      	ldr	r3, [r3, #28]
 800408a:	f003 0303 	and.w	r3, r3, #3
 800408e:	2b00      	cmp	r3, #0
 8004090:	d003      	beq.n	800409a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f001 fda0 	bl	8005bd8 <HAL_TIM_IC_CaptureCallback>
 8004098:	e005      	b.n	80040a6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f000 fa82 	bl	80045a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040a0:	6878      	ldr	r0, [r7, #4]
 80040a2:	f000 fa89 	bl	80045b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2200      	movs	r2, #0
 80040aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	691b      	ldr	r3, [r3, #16]
 80040b2:	f003 0310 	and.w	r3, r3, #16
 80040b6:	2b10      	cmp	r3, #16
 80040b8:	d122      	bne.n	8004100 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	68db      	ldr	r3, [r3, #12]
 80040c0:	f003 0310 	and.w	r3, r3, #16
 80040c4:	2b10      	cmp	r3, #16
 80040c6:	d11b      	bne.n	8004100 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f06f 0210 	mvn.w	r2, #16
 80040d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2208      	movs	r2, #8
 80040d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	69db      	ldr	r3, [r3, #28]
 80040de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d003      	beq.n	80040ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f001 fd76 	bl	8005bd8 <HAL_TIM_IC_CaptureCallback>
 80040ec:	e005      	b.n	80040fa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f000 fa58 	bl	80045a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	f000 fa5f 	bl	80045b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2200      	movs	r2, #0
 80040fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	691b      	ldr	r3, [r3, #16]
 8004106:	f003 0301 	and.w	r3, r3, #1
 800410a:	2b01      	cmp	r3, #1
 800410c:	d10e      	bne.n	800412c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	68db      	ldr	r3, [r3, #12]
 8004114:	f003 0301 	and.w	r3, r3, #1
 8004118:	2b01      	cmp	r3, #1
 800411a:	d107      	bne.n	800412c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f06f 0201 	mvn.w	r2, #1
 8004124:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	f003 fbd6 	bl	80078d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	691b      	ldr	r3, [r3, #16]
 8004132:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004136:	2b80      	cmp	r3, #128	; 0x80
 8004138:	d10e      	bne.n	8004158 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	68db      	ldr	r3, [r3, #12]
 8004140:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004144:	2b80      	cmp	r3, #128	; 0x80
 8004146:	d107      	bne.n	8004158 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004150:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f000 ff72 	bl	800503c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	691b      	ldr	r3, [r3, #16]
 800415e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004162:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004166:	d10e      	bne.n	8004186 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	68db      	ldr	r3, [r3, #12]
 800416e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004172:	2b80      	cmp	r3, #128	; 0x80
 8004174:	d107      	bne.n	8004186 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800417e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	f000 ff65 	bl	8005050 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	691b      	ldr	r3, [r3, #16]
 800418c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004190:	2b40      	cmp	r3, #64	; 0x40
 8004192:	d10e      	bne.n	80041b2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	68db      	ldr	r3, [r3, #12]
 800419a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800419e:	2b40      	cmp	r3, #64	; 0x40
 80041a0:	d107      	bne.n	80041b2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80041aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80041ac:	6878      	ldr	r0, [r7, #4]
 80041ae:	f000 fa0d 	bl	80045cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	691b      	ldr	r3, [r3, #16]
 80041b8:	f003 0320 	and.w	r3, r3, #32
 80041bc:	2b20      	cmp	r3, #32
 80041be:	d10e      	bne.n	80041de <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	68db      	ldr	r3, [r3, #12]
 80041c6:	f003 0320 	and.w	r3, r3, #32
 80041ca:	2b20      	cmp	r3, #32
 80041cc:	d107      	bne.n	80041de <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f06f 0220 	mvn.w	r2, #32
 80041d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80041d8:	6878      	ldr	r0, [r7, #4]
 80041da:	f000 ff25 	bl	8005028 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80041de:	bf00      	nop
 80041e0:	3708      	adds	r7, #8
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}
	...

080041e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b084      	sub	sp, #16
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	60f8      	str	r0, [r7, #12]
 80041f0:	60b9      	str	r1, [r7, #8]
 80041f2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	d101      	bne.n	8004202 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80041fe:	2302      	movs	r3, #2
 8004200:	e105      	b.n	800440e <HAL_TIM_PWM_ConfigChannel+0x226>
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2201      	movs	r2, #1
 8004206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2202      	movs	r2, #2
 800420e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2b14      	cmp	r3, #20
 8004216:	f200 80f0 	bhi.w	80043fa <HAL_TIM_PWM_ConfigChannel+0x212>
 800421a:	a201      	add	r2, pc, #4	; (adr r2, 8004220 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800421c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004220:	08004275 	.word	0x08004275
 8004224:	080043fb 	.word	0x080043fb
 8004228:	080043fb 	.word	0x080043fb
 800422c:	080043fb 	.word	0x080043fb
 8004230:	080042b5 	.word	0x080042b5
 8004234:	080043fb 	.word	0x080043fb
 8004238:	080043fb 	.word	0x080043fb
 800423c:	080043fb 	.word	0x080043fb
 8004240:	080042f7 	.word	0x080042f7
 8004244:	080043fb 	.word	0x080043fb
 8004248:	080043fb 	.word	0x080043fb
 800424c:	080043fb 	.word	0x080043fb
 8004250:	08004337 	.word	0x08004337
 8004254:	080043fb 	.word	0x080043fb
 8004258:	080043fb 	.word	0x080043fb
 800425c:	080043fb 	.word	0x080043fb
 8004260:	08004379 	.word	0x08004379
 8004264:	080043fb 	.word	0x080043fb
 8004268:	080043fb 	.word	0x080043fb
 800426c:	080043fb 	.word	0x080043fb
 8004270:	080043b9 	.word	0x080043b9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	68b9      	ldr	r1, [r7, #8]
 800427a:	4618      	mov	r0, r3
 800427c:	f000 fa40 	bl	8004700 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	699a      	ldr	r2, [r3, #24]
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f042 0208 	orr.w	r2, r2, #8
 800428e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	699a      	ldr	r2, [r3, #24]
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f022 0204 	bic.w	r2, r2, #4
 800429e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	6999      	ldr	r1, [r3, #24]
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	691a      	ldr	r2, [r3, #16]
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	430a      	orrs	r2, r1
 80042b0:	619a      	str	r2, [r3, #24]
      break;
 80042b2:	e0a3      	b.n	80043fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	68b9      	ldr	r1, [r7, #8]
 80042ba:	4618      	mov	r0, r3
 80042bc:	f000 fab0 	bl	8004820 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	699a      	ldr	r2, [r3, #24]
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	699a      	ldr	r2, [r3, #24]
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	6999      	ldr	r1, [r3, #24]
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	691b      	ldr	r3, [r3, #16]
 80042ea:	021a      	lsls	r2, r3, #8
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	430a      	orrs	r2, r1
 80042f2:	619a      	str	r2, [r3, #24]
      break;
 80042f4:	e082      	b.n	80043fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	68b9      	ldr	r1, [r7, #8]
 80042fc:	4618      	mov	r0, r3
 80042fe:	f000 fb19 	bl	8004934 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	69da      	ldr	r2, [r3, #28]
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f042 0208 	orr.w	r2, r2, #8
 8004310:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	69da      	ldr	r2, [r3, #28]
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f022 0204 	bic.w	r2, r2, #4
 8004320:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	69d9      	ldr	r1, [r3, #28]
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	691a      	ldr	r2, [r3, #16]
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	430a      	orrs	r2, r1
 8004332:	61da      	str	r2, [r3, #28]
      break;
 8004334:	e062      	b.n	80043fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	68b9      	ldr	r1, [r7, #8]
 800433c:	4618      	mov	r0, r3
 800433e:	f000 fb81 	bl	8004a44 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	69da      	ldr	r2, [r3, #28]
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004350:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	69da      	ldr	r2, [r3, #28]
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004360:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	69d9      	ldr	r1, [r3, #28]
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	691b      	ldr	r3, [r3, #16]
 800436c:	021a      	lsls	r2, r3, #8
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	430a      	orrs	r2, r1
 8004374:	61da      	str	r2, [r3, #28]
      break;
 8004376:	e041      	b.n	80043fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	68b9      	ldr	r1, [r7, #8]
 800437e:	4618      	mov	r0, r3
 8004380:	f000 fbca 	bl	8004b18 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f042 0208 	orr.w	r2, r2, #8
 8004392:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f022 0204 	bic.w	r2, r2, #4
 80043a2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	691a      	ldr	r2, [r3, #16]
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	430a      	orrs	r2, r1
 80043b4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80043b6:	e021      	b.n	80043fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	68b9      	ldr	r1, [r7, #8]
 80043be:	4618      	mov	r0, r3
 80043c0:	f000 fc0e 	bl	8004be0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043d2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043e2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	691b      	ldr	r3, [r3, #16]
 80043ee:	021a      	lsls	r2, r3, #8
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	430a      	orrs	r2, r1
 80043f6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80043f8:	e000      	b.n	80043fc <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      break;
 80043fa:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2201      	movs	r2, #1
 8004400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2200      	movs	r2, #0
 8004408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800440c:	2300      	movs	r3, #0
}
 800440e:	4618      	mov	r0, r3
 8004410:	3710      	adds	r7, #16
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}
 8004416:	bf00      	nop

08004418 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b084      	sub	sp, #16
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
 8004420:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004428:	2b01      	cmp	r3, #1
 800442a:	d101      	bne.n	8004430 <HAL_TIM_ConfigClockSource+0x18>
 800442c:	2302      	movs	r3, #2
 800442e:	e0b5      	b.n	800459c <HAL_TIM_ConfigClockSource+0x184>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2201      	movs	r2, #1
 8004434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2202      	movs	r2, #2
 800443c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800444e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004452:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800445a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	68fa      	ldr	r2, [r7, #12]
 8004462:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800446c:	d03e      	beq.n	80044ec <HAL_TIM_ConfigClockSource+0xd4>
 800446e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004472:	f200 8087 	bhi.w	8004584 <HAL_TIM_ConfigClockSource+0x16c>
 8004476:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800447a:	f000 8085 	beq.w	8004588 <HAL_TIM_ConfigClockSource+0x170>
 800447e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004482:	d87f      	bhi.n	8004584 <HAL_TIM_ConfigClockSource+0x16c>
 8004484:	2b70      	cmp	r3, #112	; 0x70
 8004486:	d01a      	beq.n	80044be <HAL_TIM_ConfigClockSource+0xa6>
 8004488:	2b70      	cmp	r3, #112	; 0x70
 800448a:	d87b      	bhi.n	8004584 <HAL_TIM_ConfigClockSource+0x16c>
 800448c:	2b60      	cmp	r3, #96	; 0x60
 800448e:	d050      	beq.n	8004532 <HAL_TIM_ConfigClockSource+0x11a>
 8004490:	2b60      	cmp	r3, #96	; 0x60
 8004492:	d877      	bhi.n	8004584 <HAL_TIM_ConfigClockSource+0x16c>
 8004494:	2b50      	cmp	r3, #80	; 0x50
 8004496:	d03c      	beq.n	8004512 <HAL_TIM_ConfigClockSource+0xfa>
 8004498:	2b50      	cmp	r3, #80	; 0x50
 800449a:	d873      	bhi.n	8004584 <HAL_TIM_ConfigClockSource+0x16c>
 800449c:	2b40      	cmp	r3, #64	; 0x40
 800449e:	d058      	beq.n	8004552 <HAL_TIM_ConfigClockSource+0x13a>
 80044a0:	2b40      	cmp	r3, #64	; 0x40
 80044a2:	d86f      	bhi.n	8004584 <HAL_TIM_ConfigClockSource+0x16c>
 80044a4:	2b30      	cmp	r3, #48	; 0x30
 80044a6:	d064      	beq.n	8004572 <HAL_TIM_ConfigClockSource+0x15a>
 80044a8:	2b30      	cmp	r3, #48	; 0x30
 80044aa:	d86b      	bhi.n	8004584 <HAL_TIM_ConfigClockSource+0x16c>
 80044ac:	2b20      	cmp	r3, #32
 80044ae:	d060      	beq.n	8004572 <HAL_TIM_ConfigClockSource+0x15a>
 80044b0:	2b20      	cmp	r3, #32
 80044b2:	d867      	bhi.n	8004584 <HAL_TIM_ConfigClockSource+0x16c>
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d05c      	beq.n	8004572 <HAL_TIM_ConfigClockSource+0x15a>
 80044b8:	2b10      	cmp	r3, #16
 80044ba:	d05a      	beq.n	8004572 <HAL_TIM_ConfigClockSource+0x15a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80044bc:	e062      	b.n	8004584 <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6818      	ldr	r0, [r3, #0]
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	6899      	ldr	r1, [r3, #8]
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	685a      	ldr	r2, [r3, #4]
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	68db      	ldr	r3, [r3, #12]
 80044ce:	f000 fc67 	bl	8004da0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80044e0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	68fa      	ldr	r2, [r7, #12]
 80044e8:	609a      	str	r2, [r3, #8]
      break;
 80044ea:	e04e      	b.n	800458a <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6818      	ldr	r0, [r3, #0]
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	6899      	ldr	r1, [r3, #8]
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	685a      	ldr	r2, [r3, #4]
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	68db      	ldr	r3, [r3, #12]
 80044fc:	f000 fc50 	bl	8004da0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	689a      	ldr	r2, [r3, #8]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800450e:	609a      	str	r2, [r3, #8]
      break;
 8004510:	e03b      	b.n	800458a <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6818      	ldr	r0, [r3, #0]
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	6859      	ldr	r1, [r3, #4]
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	68db      	ldr	r3, [r3, #12]
 800451e:	461a      	mov	r2, r3
 8004520:	f000 fbc4 	bl	8004cac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	2150      	movs	r1, #80	; 0x50
 800452a:	4618      	mov	r0, r3
 800452c:	f000 fc1d 	bl	8004d6a <TIM_ITRx_SetConfig>
      break;
 8004530:	e02b      	b.n	800458a <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6818      	ldr	r0, [r3, #0]
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	6859      	ldr	r1, [r3, #4]
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	68db      	ldr	r3, [r3, #12]
 800453e:	461a      	mov	r2, r3
 8004540:	f000 fbe3 	bl	8004d0a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	2160      	movs	r1, #96	; 0x60
 800454a:	4618      	mov	r0, r3
 800454c:	f000 fc0d 	bl	8004d6a <TIM_ITRx_SetConfig>
      break;
 8004550:	e01b      	b.n	800458a <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6818      	ldr	r0, [r3, #0]
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	6859      	ldr	r1, [r3, #4]
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	68db      	ldr	r3, [r3, #12]
 800455e:	461a      	mov	r2, r3
 8004560:	f000 fba4 	bl	8004cac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	2140      	movs	r1, #64	; 0x40
 800456a:	4618      	mov	r0, r3
 800456c:	f000 fbfd 	bl	8004d6a <TIM_ITRx_SetConfig>
      break;
 8004570:	e00b      	b.n	800458a <HAL_TIM_ConfigClockSource+0x172>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4619      	mov	r1, r3
 800457c:	4610      	mov	r0, r2
 800457e:	f000 fbf4 	bl	8004d6a <TIM_ITRx_SetConfig>
      break;
 8004582:	e002      	b.n	800458a <HAL_TIM_ConfigClockSource+0x172>
      break;
 8004584:	bf00      	nop
 8004586:	e000      	b.n	800458a <HAL_TIM_ConfigClockSource+0x172>
      break;
 8004588:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2201      	movs	r2, #1
 800458e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2200      	movs	r2, #0
 8004596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800459a:	2300      	movs	r3, #0
}
 800459c:	4618      	mov	r0, r3
 800459e:	3710      	adds	r7, #16
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}

080045a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b083      	sub	sp, #12
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80045ac:	bf00      	nop
 80045ae:	370c      	adds	r7, #12
 80045b0:	46bd      	mov	sp, r7
 80045b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b6:	4770      	bx	lr

080045b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b083      	sub	sp, #12
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80045c0:	bf00      	nop
 80045c2:	370c      	adds	r7, #12
 80045c4:	46bd      	mov	sp, r7
 80045c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ca:	4770      	bx	lr

080045cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b083      	sub	sp, #12
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80045d4:	bf00      	nop
 80045d6:	370c      	adds	r7, #12
 80045d8:	46bd      	mov	sp, r7
 80045da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045de:	4770      	bx	lr

080045e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b085      	sub	sp, #20
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	4a3c      	ldr	r2, [pc, #240]	; (80046e4 <TIM_Base_SetConfig+0x104>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d00f      	beq.n	8004618 <TIM_Base_SetConfig+0x38>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045fe:	d00b      	beq.n	8004618 <TIM_Base_SetConfig+0x38>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	4a39      	ldr	r2, [pc, #228]	; (80046e8 <TIM_Base_SetConfig+0x108>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d007      	beq.n	8004618 <TIM_Base_SetConfig+0x38>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	4a38      	ldr	r2, [pc, #224]	; (80046ec <TIM_Base_SetConfig+0x10c>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d003      	beq.n	8004618 <TIM_Base_SetConfig+0x38>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	4a37      	ldr	r2, [pc, #220]	; (80046f0 <TIM_Base_SetConfig+0x110>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d108      	bne.n	800462a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800461e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	68fa      	ldr	r2, [r7, #12]
 8004626:	4313      	orrs	r3, r2
 8004628:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	4a2d      	ldr	r2, [pc, #180]	; (80046e4 <TIM_Base_SetConfig+0x104>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d01b      	beq.n	800466a <TIM_Base_SetConfig+0x8a>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004638:	d017      	beq.n	800466a <TIM_Base_SetConfig+0x8a>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	4a2a      	ldr	r2, [pc, #168]	; (80046e8 <TIM_Base_SetConfig+0x108>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d013      	beq.n	800466a <TIM_Base_SetConfig+0x8a>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	4a29      	ldr	r2, [pc, #164]	; (80046ec <TIM_Base_SetConfig+0x10c>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d00f      	beq.n	800466a <TIM_Base_SetConfig+0x8a>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	4a28      	ldr	r2, [pc, #160]	; (80046f0 <TIM_Base_SetConfig+0x110>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d00b      	beq.n	800466a <TIM_Base_SetConfig+0x8a>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	4a27      	ldr	r2, [pc, #156]	; (80046f4 <TIM_Base_SetConfig+0x114>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d007      	beq.n	800466a <TIM_Base_SetConfig+0x8a>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	4a26      	ldr	r2, [pc, #152]	; (80046f8 <TIM_Base_SetConfig+0x118>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d003      	beq.n	800466a <TIM_Base_SetConfig+0x8a>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	4a25      	ldr	r2, [pc, #148]	; (80046fc <TIM_Base_SetConfig+0x11c>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d108      	bne.n	800467c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004670:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	68db      	ldr	r3, [r3, #12]
 8004676:	68fa      	ldr	r2, [r7, #12]
 8004678:	4313      	orrs	r3, r2
 800467a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	695b      	ldr	r3, [r3, #20]
 8004686:	4313      	orrs	r3, r2
 8004688:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	68fa      	ldr	r2, [r7, #12]
 800468e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	689a      	ldr	r2, [r3, #8]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	4a10      	ldr	r2, [pc, #64]	; (80046e4 <TIM_Base_SetConfig+0x104>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d00f      	beq.n	80046c8 <TIM_Base_SetConfig+0xe8>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	4a11      	ldr	r2, [pc, #68]	; (80046f0 <TIM_Base_SetConfig+0x110>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d00b      	beq.n	80046c8 <TIM_Base_SetConfig+0xe8>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	4a10      	ldr	r2, [pc, #64]	; (80046f4 <TIM_Base_SetConfig+0x114>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d007      	beq.n	80046c8 <TIM_Base_SetConfig+0xe8>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	4a0f      	ldr	r2, [pc, #60]	; (80046f8 <TIM_Base_SetConfig+0x118>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d003      	beq.n	80046c8 <TIM_Base_SetConfig+0xe8>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	4a0e      	ldr	r2, [pc, #56]	; (80046fc <TIM_Base_SetConfig+0x11c>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d103      	bne.n	80046d0 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	691a      	ldr	r2, [r3, #16]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2201      	movs	r2, #1
 80046d4:	615a      	str	r2, [r3, #20]
}
 80046d6:	bf00      	nop
 80046d8:	3714      	adds	r7, #20
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr
 80046e2:	bf00      	nop
 80046e4:	40012c00 	.word	0x40012c00
 80046e8:	40000400 	.word	0x40000400
 80046ec:	40000800 	.word	0x40000800
 80046f0:	40013400 	.word	0x40013400
 80046f4:	40014000 	.word	0x40014000
 80046f8:	40014400 	.word	0x40014400
 80046fc:	40014800 	.word	0x40014800

08004700 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004700:	b480      	push	{r7}
 8004702:	b087      	sub	sp, #28
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6a1b      	ldr	r3, [r3, #32]
 800470e:	f023 0201 	bic.w	r2, r3, #1
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6a1b      	ldr	r3, [r3, #32]
 800471a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	699b      	ldr	r3, [r3, #24]
 8004726:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800472e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004732:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f023 0303 	bic.w	r3, r3, #3
 800473a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	68fa      	ldr	r2, [r7, #12]
 8004742:	4313      	orrs	r3, r2
 8004744:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	f023 0302 	bic.w	r3, r3, #2
 800474c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	697a      	ldr	r2, [r7, #20]
 8004754:	4313      	orrs	r3, r2
 8004756:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	4a2c      	ldr	r2, [pc, #176]	; (800480c <TIM_OC1_SetConfig+0x10c>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d00f      	beq.n	8004780 <TIM_OC1_SetConfig+0x80>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	4a2b      	ldr	r2, [pc, #172]	; (8004810 <TIM_OC1_SetConfig+0x110>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d00b      	beq.n	8004780 <TIM_OC1_SetConfig+0x80>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	4a2a      	ldr	r2, [pc, #168]	; (8004814 <TIM_OC1_SetConfig+0x114>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d007      	beq.n	8004780 <TIM_OC1_SetConfig+0x80>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	4a29      	ldr	r2, [pc, #164]	; (8004818 <TIM_OC1_SetConfig+0x118>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d003      	beq.n	8004780 <TIM_OC1_SetConfig+0x80>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	4a28      	ldr	r2, [pc, #160]	; (800481c <TIM_OC1_SetConfig+0x11c>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d10c      	bne.n	800479a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	f023 0308 	bic.w	r3, r3, #8
 8004786:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	68db      	ldr	r3, [r3, #12]
 800478c:	697a      	ldr	r2, [r7, #20]
 800478e:	4313      	orrs	r3, r2
 8004790:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	f023 0304 	bic.w	r3, r3, #4
 8004798:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	4a1b      	ldr	r2, [pc, #108]	; (800480c <TIM_OC1_SetConfig+0x10c>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d00f      	beq.n	80047c2 <TIM_OC1_SetConfig+0xc2>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	4a1a      	ldr	r2, [pc, #104]	; (8004810 <TIM_OC1_SetConfig+0x110>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d00b      	beq.n	80047c2 <TIM_OC1_SetConfig+0xc2>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	4a19      	ldr	r2, [pc, #100]	; (8004814 <TIM_OC1_SetConfig+0x114>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d007      	beq.n	80047c2 <TIM_OC1_SetConfig+0xc2>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	4a18      	ldr	r2, [pc, #96]	; (8004818 <TIM_OC1_SetConfig+0x118>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d003      	beq.n	80047c2 <TIM_OC1_SetConfig+0xc2>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	4a17      	ldr	r2, [pc, #92]	; (800481c <TIM_OC1_SetConfig+0x11c>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d111      	bne.n	80047e6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80047d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	695b      	ldr	r3, [r3, #20]
 80047d6:	693a      	ldr	r2, [r7, #16]
 80047d8:	4313      	orrs	r3, r2
 80047da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	699b      	ldr	r3, [r3, #24]
 80047e0:	693a      	ldr	r2, [r7, #16]
 80047e2:	4313      	orrs	r3, r2
 80047e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	693a      	ldr	r2, [r7, #16]
 80047ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	68fa      	ldr	r2, [r7, #12]
 80047f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	685a      	ldr	r2, [r3, #4]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	697a      	ldr	r2, [r7, #20]
 80047fe:	621a      	str	r2, [r3, #32]
}
 8004800:	bf00      	nop
 8004802:	371c      	adds	r7, #28
 8004804:	46bd      	mov	sp, r7
 8004806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480a:	4770      	bx	lr
 800480c:	40012c00 	.word	0x40012c00
 8004810:	40013400 	.word	0x40013400
 8004814:	40014000 	.word	0x40014000
 8004818:	40014400 	.word	0x40014400
 800481c:	40014800 	.word	0x40014800

08004820 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004820:	b480      	push	{r7}
 8004822:	b087      	sub	sp, #28
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
 8004828:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6a1b      	ldr	r3, [r3, #32]
 800482e:	f023 0210 	bic.w	r2, r3, #16
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6a1b      	ldr	r3, [r3, #32]
 800483a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	699b      	ldr	r3, [r3, #24]
 8004846:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800484e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004852:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800485a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	021b      	lsls	r3, r3, #8
 8004862:	68fa      	ldr	r2, [r7, #12]
 8004864:	4313      	orrs	r3, r2
 8004866:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	f023 0320 	bic.w	r3, r3, #32
 800486e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	011b      	lsls	r3, r3, #4
 8004876:	697a      	ldr	r2, [r7, #20]
 8004878:	4313      	orrs	r3, r2
 800487a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	4a28      	ldr	r2, [pc, #160]	; (8004920 <TIM_OC2_SetConfig+0x100>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d003      	beq.n	800488c <TIM_OC2_SetConfig+0x6c>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	4a27      	ldr	r2, [pc, #156]	; (8004924 <TIM_OC2_SetConfig+0x104>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d10d      	bne.n	80048a8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004892:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	68db      	ldr	r3, [r3, #12]
 8004898:	011b      	lsls	r3, r3, #4
 800489a:	697a      	ldr	r2, [r7, #20]
 800489c:	4313      	orrs	r3, r2
 800489e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048a6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	4a1d      	ldr	r2, [pc, #116]	; (8004920 <TIM_OC2_SetConfig+0x100>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d00f      	beq.n	80048d0 <TIM_OC2_SetConfig+0xb0>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	4a1c      	ldr	r2, [pc, #112]	; (8004924 <TIM_OC2_SetConfig+0x104>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d00b      	beq.n	80048d0 <TIM_OC2_SetConfig+0xb0>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	4a1b      	ldr	r2, [pc, #108]	; (8004928 <TIM_OC2_SetConfig+0x108>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d007      	beq.n	80048d0 <TIM_OC2_SetConfig+0xb0>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	4a1a      	ldr	r2, [pc, #104]	; (800492c <TIM_OC2_SetConfig+0x10c>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d003      	beq.n	80048d0 <TIM_OC2_SetConfig+0xb0>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	4a19      	ldr	r2, [pc, #100]	; (8004930 <TIM_OC2_SetConfig+0x110>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d113      	bne.n	80048f8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80048d6:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80048de:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	695b      	ldr	r3, [r3, #20]
 80048e4:	009b      	lsls	r3, r3, #2
 80048e6:	693a      	ldr	r2, [r7, #16]
 80048e8:	4313      	orrs	r3, r2
 80048ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	699b      	ldr	r3, [r3, #24]
 80048f0:	009b      	lsls	r3, r3, #2
 80048f2:	693a      	ldr	r2, [r7, #16]
 80048f4:	4313      	orrs	r3, r2
 80048f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	693a      	ldr	r2, [r7, #16]
 80048fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	68fa      	ldr	r2, [r7, #12]
 8004902:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	685a      	ldr	r2, [r3, #4]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	697a      	ldr	r2, [r7, #20]
 8004910:	621a      	str	r2, [r3, #32]
}
 8004912:	bf00      	nop
 8004914:	371c      	adds	r7, #28
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr
 800491e:	bf00      	nop
 8004920:	40012c00 	.word	0x40012c00
 8004924:	40013400 	.word	0x40013400
 8004928:	40014000 	.word	0x40014000
 800492c:	40014400 	.word	0x40014400
 8004930:	40014800 	.word	0x40014800

08004934 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004934:	b480      	push	{r7}
 8004936:	b087      	sub	sp, #28
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
 800493c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6a1b      	ldr	r3, [r3, #32]
 8004942:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6a1b      	ldr	r3, [r3, #32]
 800494e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	69db      	ldr	r3, [r3, #28]
 800495a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004962:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004966:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	f023 0303 	bic.w	r3, r3, #3
 800496e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	68fa      	ldr	r2, [r7, #12]
 8004976:	4313      	orrs	r3, r2
 8004978:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004980:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	021b      	lsls	r3, r3, #8
 8004988:	697a      	ldr	r2, [r7, #20]
 800498a:	4313      	orrs	r3, r2
 800498c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	4a27      	ldr	r2, [pc, #156]	; (8004a30 <TIM_OC3_SetConfig+0xfc>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d003      	beq.n	800499e <TIM_OC3_SetConfig+0x6a>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	4a26      	ldr	r2, [pc, #152]	; (8004a34 <TIM_OC3_SetConfig+0x100>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d10d      	bne.n	80049ba <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80049a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	68db      	ldr	r3, [r3, #12]
 80049aa:	021b      	lsls	r3, r3, #8
 80049ac:	697a      	ldr	r2, [r7, #20]
 80049ae:	4313      	orrs	r3, r2
 80049b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80049b8:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	4a1c      	ldr	r2, [pc, #112]	; (8004a30 <TIM_OC3_SetConfig+0xfc>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d00f      	beq.n	80049e2 <TIM_OC3_SetConfig+0xae>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	4a1b      	ldr	r2, [pc, #108]	; (8004a34 <TIM_OC3_SetConfig+0x100>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d00b      	beq.n	80049e2 <TIM_OC3_SetConfig+0xae>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	4a1a      	ldr	r2, [pc, #104]	; (8004a38 <TIM_OC3_SetConfig+0x104>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d007      	beq.n	80049e2 <TIM_OC3_SetConfig+0xae>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	4a19      	ldr	r2, [pc, #100]	; (8004a3c <TIM_OC3_SetConfig+0x108>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d003      	beq.n	80049e2 <TIM_OC3_SetConfig+0xae>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	4a18      	ldr	r2, [pc, #96]	; (8004a40 <TIM_OC3_SetConfig+0x10c>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d113      	bne.n	8004a0a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80049e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80049f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	695b      	ldr	r3, [r3, #20]
 80049f6:	011b      	lsls	r3, r3, #4
 80049f8:	693a      	ldr	r2, [r7, #16]
 80049fa:	4313      	orrs	r3, r2
 80049fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	699b      	ldr	r3, [r3, #24]
 8004a02:	011b      	lsls	r3, r3, #4
 8004a04:	693a      	ldr	r2, [r7, #16]
 8004a06:	4313      	orrs	r3, r2
 8004a08:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	693a      	ldr	r2, [r7, #16]
 8004a0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	68fa      	ldr	r2, [r7, #12]
 8004a14:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	685a      	ldr	r2, [r3, #4]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	697a      	ldr	r2, [r7, #20]
 8004a22:	621a      	str	r2, [r3, #32]
}
 8004a24:	bf00      	nop
 8004a26:	371c      	adds	r7, #28
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2e:	4770      	bx	lr
 8004a30:	40012c00 	.word	0x40012c00
 8004a34:	40013400 	.word	0x40013400
 8004a38:	40014000 	.word	0x40014000
 8004a3c:	40014400 	.word	0x40014400
 8004a40:	40014800 	.word	0x40014800

08004a44 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b087      	sub	sp, #28
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
 8004a4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6a1b      	ldr	r3, [r3, #32]
 8004a52:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6a1b      	ldr	r3, [r3, #32]
 8004a5e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	69db      	ldr	r3, [r3, #28]
 8004a6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	021b      	lsls	r3, r3, #8
 8004a86:	68fa      	ldr	r2, [r7, #12]
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a92:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	031b      	lsls	r3, r3, #12
 8004a9a:	693a      	ldr	r2, [r7, #16]
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	4a18      	ldr	r2, [pc, #96]	; (8004b04 <TIM_OC4_SetConfig+0xc0>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d00f      	beq.n	8004ac8 <TIM_OC4_SetConfig+0x84>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	4a17      	ldr	r2, [pc, #92]	; (8004b08 <TIM_OC4_SetConfig+0xc4>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d00b      	beq.n	8004ac8 <TIM_OC4_SetConfig+0x84>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	4a16      	ldr	r2, [pc, #88]	; (8004b0c <TIM_OC4_SetConfig+0xc8>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d007      	beq.n	8004ac8 <TIM_OC4_SetConfig+0x84>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	4a15      	ldr	r2, [pc, #84]	; (8004b10 <TIM_OC4_SetConfig+0xcc>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d003      	beq.n	8004ac8 <TIM_OC4_SetConfig+0x84>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	4a14      	ldr	r2, [pc, #80]	; (8004b14 <TIM_OC4_SetConfig+0xd0>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d109      	bne.n	8004adc <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ace:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	695b      	ldr	r3, [r3, #20]
 8004ad4:	019b      	lsls	r3, r3, #6
 8004ad6:	697a      	ldr	r2, [r7, #20]
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	697a      	ldr	r2, [r7, #20]
 8004ae0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	68fa      	ldr	r2, [r7, #12]
 8004ae6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	685a      	ldr	r2, [r3, #4]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	693a      	ldr	r2, [r7, #16]
 8004af4:	621a      	str	r2, [r3, #32]
}
 8004af6:	bf00      	nop
 8004af8:	371c      	adds	r7, #28
 8004afa:	46bd      	mov	sp, r7
 8004afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b00:	4770      	bx	lr
 8004b02:	bf00      	nop
 8004b04:	40012c00 	.word	0x40012c00
 8004b08:	40013400 	.word	0x40013400
 8004b0c:	40014000 	.word	0x40014000
 8004b10:	40014400 	.word	0x40014400
 8004b14:	40014800 	.word	0x40014800

08004b18 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b087      	sub	sp, #28
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
 8004b20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6a1b      	ldr	r3, [r3, #32]
 8004b26:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6a1b      	ldr	r3, [r3, #32]
 8004b32:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	68fa      	ldr	r2, [r7, #12]
 8004b52:	4313      	orrs	r3, r2
 8004b54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004b5c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	041b      	lsls	r3, r3, #16
 8004b64:	693a      	ldr	r2, [r7, #16]
 8004b66:	4313      	orrs	r3, r2
 8004b68:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	4a17      	ldr	r2, [pc, #92]	; (8004bcc <TIM_OC5_SetConfig+0xb4>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d00f      	beq.n	8004b92 <TIM_OC5_SetConfig+0x7a>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	4a16      	ldr	r2, [pc, #88]	; (8004bd0 <TIM_OC5_SetConfig+0xb8>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d00b      	beq.n	8004b92 <TIM_OC5_SetConfig+0x7a>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	4a15      	ldr	r2, [pc, #84]	; (8004bd4 <TIM_OC5_SetConfig+0xbc>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d007      	beq.n	8004b92 <TIM_OC5_SetConfig+0x7a>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	4a14      	ldr	r2, [pc, #80]	; (8004bd8 <TIM_OC5_SetConfig+0xc0>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d003      	beq.n	8004b92 <TIM_OC5_SetConfig+0x7a>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	4a13      	ldr	r2, [pc, #76]	; (8004bdc <TIM_OC5_SetConfig+0xc4>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d109      	bne.n	8004ba6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b98:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	695b      	ldr	r3, [r3, #20]
 8004b9e:	021b      	lsls	r3, r3, #8
 8004ba0:	697a      	ldr	r2, [r7, #20]
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	697a      	ldr	r2, [r7, #20]
 8004baa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	68fa      	ldr	r2, [r7, #12]
 8004bb0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	685a      	ldr	r2, [r3, #4]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	693a      	ldr	r2, [r7, #16]
 8004bbe:	621a      	str	r2, [r3, #32]
}
 8004bc0:	bf00      	nop
 8004bc2:	371c      	adds	r7, #28
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bca:	4770      	bx	lr
 8004bcc:	40012c00 	.word	0x40012c00
 8004bd0:	40013400 	.word	0x40013400
 8004bd4:	40014000 	.word	0x40014000
 8004bd8:	40014400 	.word	0x40014400
 8004bdc:	40014800 	.word	0x40014800

08004be0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b087      	sub	sp, #28
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
 8004be8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6a1b      	ldr	r3, [r3, #32]
 8004bee:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6a1b      	ldr	r3, [r3, #32]
 8004bfa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	021b      	lsls	r3, r3, #8
 8004c1a:	68fa      	ldr	r2, [r7, #12]
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004c26:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	689b      	ldr	r3, [r3, #8]
 8004c2c:	051b      	lsls	r3, r3, #20
 8004c2e:	693a      	ldr	r2, [r7, #16]
 8004c30:	4313      	orrs	r3, r2
 8004c32:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	4a18      	ldr	r2, [pc, #96]	; (8004c98 <TIM_OC6_SetConfig+0xb8>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d00f      	beq.n	8004c5c <TIM_OC6_SetConfig+0x7c>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	4a17      	ldr	r2, [pc, #92]	; (8004c9c <TIM_OC6_SetConfig+0xbc>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d00b      	beq.n	8004c5c <TIM_OC6_SetConfig+0x7c>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	4a16      	ldr	r2, [pc, #88]	; (8004ca0 <TIM_OC6_SetConfig+0xc0>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d007      	beq.n	8004c5c <TIM_OC6_SetConfig+0x7c>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	4a15      	ldr	r2, [pc, #84]	; (8004ca4 <TIM_OC6_SetConfig+0xc4>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d003      	beq.n	8004c5c <TIM_OC6_SetConfig+0x7c>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	4a14      	ldr	r2, [pc, #80]	; (8004ca8 <TIM_OC6_SetConfig+0xc8>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d109      	bne.n	8004c70 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c62:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	695b      	ldr	r3, [r3, #20]
 8004c68:	029b      	lsls	r3, r3, #10
 8004c6a:	697a      	ldr	r2, [r7, #20]
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	697a      	ldr	r2, [r7, #20]
 8004c74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	68fa      	ldr	r2, [r7, #12]
 8004c7a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	685a      	ldr	r2, [r3, #4]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	693a      	ldr	r2, [r7, #16]
 8004c88:	621a      	str	r2, [r3, #32]
}
 8004c8a:	bf00      	nop
 8004c8c:	371c      	adds	r7, #28
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c94:	4770      	bx	lr
 8004c96:	bf00      	nop
 8004c98:	40012c00 	.word	0x40012c00
 8004c9c:	40013400 	.word	0x40013400
 8004ca0:	40014000 	.word	0x40014000
 8004ca4:	40014400 	.word	0x40014400
 8004ca8:	40014800 	.word	0x40014800

08004cac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b087      	sub	sp, #28
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	60f8      	str	r0, [r7, #12]
 8004cb4:	60b9      	str	r1, [r7, #8]
 8004cb6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	6a1b      	ldr	r3, [r3, #32]
 8004cbc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	6a1b      	ldr	r3, [r3, #32]
 8004cc2:	f023 0201 	bic.w	r2, r3, #1
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	699b      	ldr	r3, [r3, #24]
 8004cce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004cd6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	011b      	lsls	r3, r3, #4
 8004cdc:	693a      	ldr	r2, [r7, #16]
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	f023 030a 	bic.w	r3, r3, #10
 8004ce8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004cea:	697a      	ldr	r2, [r7, #20]
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	693a      	ldr	r2, [r7, #16]
 8004cf6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	697a      	ldr	r2, [r7, #20]
 8004cfc:	621a      	str	r2, [r3, #32]
}
 8004cfe:	bf00      	nop
 8004d00:	371c      	adds	r7, #28
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr

08004d0a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d0a:	b480      	push	{r7}
 8004d0c:	b087      	sub	sp, #28
 8004d0e:	af00      	add	r7, sp, #0
 8004d10:	60f8      	str	r0, [r7, #12]
 8004d12:	60b9      	str	r1, [r7, #8]
 8004d14:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	6a1b      	ldr	r3, [r3, #32]
 8004d1a:	f023 0210 	bic.w	r2, r3, #16
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	699b      	ldr	r3, [r3, #24]
 8004d26:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	6a1b      	ldr	r3, [r3, #32]
 8004d2c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004d34:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	031b      	lsls	r3, r3, #12
 8004d3a:	697a      	ldr	r2, [r7, #20]
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004d46:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	011b      	lsls	r3, r3, #4
 8004d4c:	693a      	ldr	r2, [r7, #16]
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	697a      	ldr	r2, [r7, #20]
 8004d56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	693a      	ldr	r2, [r7, #16]
 8004d5c:	621a      	str	r2, [r3, #32]
}
 8004d5e:	bf00      	nop
 8004d60:	371c      	adds	r7, #28
 8004d62:	46bd      	mov	sp, r7
 8004d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d68:	4770      	bx	lr

08004d6a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004d6a:	b480      	push	{r7}
 8004d6c:	b085      	sub	sp, #20
 8004d6e:	af00      	add	r7, sp, #0
 8004d70:	6078      	str	r0, [r7, #4]
 8004d72:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	689b      	ldr	r3, [r3, #8]
 8004d78:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d80:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004d82:	683a      	ldr	r2, [r7, #0]
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	4313      	orrs	r3, r2
 8004d88:	f043 0307 	orr.w	r3, r3, #7
 8004d8c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	68fa      	ldr	r2, [r7, #12]
 8004d92:	609a      	str	r2, [r3, #8]
}
 8004d94:	bf00      	nop
 8004d96:	3714      	adds	r7, #20
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9e:	4770      	bx	lr

08004da0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b087      	sub	sp, #28
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	60f8      	str	r0, [r7, #12]
 8004da8:	60b9      	str	r1, [r7, #8]
 8004daa:	607a      	str	r2, [r7, #4]
 8004dac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004dba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	021a      	lsls	r2, r3, #8
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	431a      	orrs	r2, r3
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	697a      	ldr	r2, [r7, #20]
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	697a      	ldr	r2, [r7, #20]
 8004dd2:	609a      	str	r2, [r3, #8]
}
 8004dd4:	bf00      	nop
 8004dd6:	371c      	adds	r7, #28
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr

08004de0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b087      	sub	sp, #28
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	60f8      	str	r0, [r7, #12]
 8004de8:	60b9      	str	r1, [r7, #8]
 8004dea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	f003 031f 	and.w	r3, r3, #31
 8004df2:	2201      	movs	r2, #1
 8004df4:	fa02 f303 	lsl.w	r3, r2, r3
 8004df8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	6a1a      	ldr	r2, [r3, #32]
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	43db      	mvns	r3, r3
 8004e02:	401a      	ands	r2, r3
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	6a1a      	ldr	r2, [r3, #32]
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	f003 031f 	and.w	r3, r3, #31
 8004e12:	6879      	ldr	r1, [r7, #4]
 8004e14:	fa01 f303 	lsl.w	r3, r1, r3
 8004e18:	431a      	orrs	r2, r3
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	621a      	str	r2, [r3, #32]
}
 8004e1e:	bf00      	nop
 8004e20:	371c      	adds	r7, #28
 8004e22:	46bd      	mov	sp, r7
 8004e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e28:	4770      	bx	lr
	...

08004e2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b085      	sub	sp, #20
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
 8004e34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d101      	bne.n	8004e44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e40:	2302      	movs	r3, #2
 8004e42:	e063      	b.n	8004f0c <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2201      	movs	r2, #1
 8004e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2202      	movs	r2, #2
 8004e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	689b      	ldr	r3, [r3, #8]
 8004e62:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a2b      	ldr	r2, [pc, #172]	; (8004f18 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d004      	beq.n	8004e78 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a2a      	ldr	r2, [pc, #168]	; (8004f1c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d108      	bne.n	8004e8a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004e7e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	68fa      	ldr	r2, [r7, #12]
 8004e86:	4313      	orrs	r3, r2
 8004e88:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e90:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	68fa      	ldr	r2, [r7, #12]
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	68fa      	ldr	r2, [r7, #12]
 8004ea2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a1b      	ldr	r2, [pc, #108]	; (8004f18 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d018      	beq.n	8004ee0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004eb6:	d013      	beq.n	8004ee0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a18      	ldr	r2, [pc, #96]	; (8004f20 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d00e      	beq.n	8004ee0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a17      	ldr	r2, [pc, #92]	; (8004f24 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d009      	beq.n	8004ee0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a12      	ldr	r2, [pc, #72]	; (8004f1c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d004      	beq.n	8004ee0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a13      	ldr	r2, [pc, #76]	; (8004f28 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d10c      	bne.n	8004efa <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ee6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	689b      	ldr	r3, [r3, #8]
 8004eec:	68ba      	ldr	r2, [r7, #8]
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	68ba      	ldr	r2, [r7, #8]
 8004ef8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2201      	movs	r2, #1
 8004efe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2200      	movs	r2, #0
 8004f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f0a:	2300      	movs	r3, #0
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	3714      	adds	r7, #20
 8004f10:	46bd      	mov	sp, r7
 8004f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f16:	4770      	bx	lr
 8004f18:	40012c00 	.word	0x40012c00
 8004f1c:	40013400 	.word	0x40013400
 8004f20:	40000400 	.word	0x40000400
 8004f24:	40000800 	.word	0x40000800
 8004f28:	40014000 	.word	0x40014000

08004f2c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b085      	sub	sp, #20
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
 8004f34:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004f36:	2300      	movs	r3, #0
 8004f38:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f40:	2b01      	cmp	r3, #1
 8004f42:	d101      	bne.n	8004f48 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004f44:	2302      	movs	r3, #2
 8004f46:	e065      	b.n	8005014 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	68db      	ldr	r3, [r3, #12]
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	689b      	ldr	r3, [r3, #8]
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	4313      	orrs	r3, r2
 8004f78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4313      	orrs	r3, r2
 8004f86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	691b      	ldr	r3, [r3, #16]
 8004f92:	4313      	orrs	r3, r2
 8004f94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	695b      	ldr	r3, [r3, #20]
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	699b      	ldr	r3, [r3, #24]
 8004fbc:	041b      	lsls	r3, r3, #16
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a16      	ldr	r2, [pc, #88]	; (8005020 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d004      	beq.n	8004fd6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a14      	ldr	r2, [pc, #80]	; (8005024 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d115      	bne.n	8005002 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe0:	051b      	lsls	r3, r3, #20
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	69db      	ldr	r3, [r3, #28]
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	6a1b      	ldr	r3, [r3, #32]
 8004ffe:	4313      	orrs	r3, r2
 8005000:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	68fa      	ldr	r2, [r7, #12]
 8005008:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2200      	movs	r2, #0
 800500e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005012:	2300      	movs	r3, #0
}
 8005014:	4618      	mov	r0, r3
 8005016:	3714      	adds	r7, #20
 8005018:	46bd      	mov	sp, r7
 800501a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501e:	4770      	bx	lr
 8005020:	40012c00 	.word	0x40012c00
 8005024:	40013400 	.word	0x40013400

08005028 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005028:	b480      	push	{r7}
 800502a:	b083      	sub	sp, #12
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005030:	bf00      	nop
 8005032:	370c      	adds	r7, #12
 8005034:	46bd      	mov	sp, r7
 8005036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503a:	4770      	bx	lr

0800503c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800503c:	b480      	push	{r7}
 800503e:	b083      	sub	sp, #12
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005044:	bf00      	nop
 8005046:	370c      	adds	r7, #12
 8005048:	46bd      	mov	sp, r7
 800504a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504e:	4770      	bx	lr

08005050 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005050:	b480      	push	{r7}
 8005052:	b083      	sub	sp, #12
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005058:	bf00      	nop
 800505a:	370c      	adds	r7, #12
 800505c:	46bd      	mov	sp, r7
 800505e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005062:	4770      	bx	lr

08005064 <FANS_UpdateCyrrentDays>:
//
//-------------------------------------------------------------
//
//Каждый вентилятор выполняет свою программу, которая длится несколько дней
//Эта функция после включения контроллера, определяет текущий день работы для каждого вентилятора
void FANS_UpdateCyrrentDays(void) {
 8005064:	b480      	push	{r7}
 8005066:	b083      	sub	sp, #12
 8005068:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < NUMBER_OF_FANS; i++) {
 800506a:	2300      	movs	r3, #0
 800506c:	71fb      	strb	r3, [r7, #7]
 800506e:	e06c      	b.n	800514a <FANS_UpdateCyrrentDays+0xe6>
		uint8_t sumDays = ProgramForFun[i].numberOfDays1 + ProgramForFun[i].numberOfDays2 + ProgramForFun[i].numberOfDays3 + ProgramForFun[i].numberOfDays4;
 8005070:	79fb      	ldrb	r3, [r7, #7]
 8005072:	4a3b      	ldr	r2, [pc, #236]	; (8005160 <FANS_UpdateCyrrentDays+0xfc>)
 8005074:	2186      	movs	r1, #134	; 0x86
 8005076:	fb01 f303 	mul.w	r3, r1, r3
 800507a:	4413      	add	r3, r2
 800507c:	337f      	adds	r3, #127	; 0x7f
 800507e:	781a      	ldrb	r2, [r3, #0]
 8005080:	79fb      	ldrb	r3, [r7, #7]
 8005082:	4937      	ldr	r1, [pc, #220]	; (8005160 <FANS_UpdateCyrrentDays+0xfc>)
 8005084:	2086      	movs	r0, #134	; 0x86
 8005086:	fb00 f303 	mul.w	r3, r0, r3
 800508a:	440b      	add	r3, r1
 800508c:	3381      	adds	r3, #129	; 0x81
 800508e:	781b      	ldrb	r3, [r3, #0]
 8005090:	4413      	add	r3, r2
 8005092:	b2da      	uxtb	r2, r3
 8005094:	79fb      	ldrb	r3, [r7, #7]
 8005096:	4932      	ldr	r1, [pc, #200]	; (8005160 <FANS_UpdateCyrrentDays+0xfc>)
 8005098:	2086      	movs	r0, #134	; 0x86
 800509a:	fb00 f303 	mul.w	r3, r0, r3
 800509e:	440b      	add	r3, r1
 80050a0:	3383      	adds	r3, #131	; 0x83
 80050a2:	781b      	ldrb	r3, [r3, #0]
 80050a4:	4413      	add	r3, r2
 80050a6:	b2da      	uxtb	r2, r3
 80050a8:	79fb      	ldrb	r3, [r7, #7]
 80050aa:	492d      	ldr	r1, [pc, #180]	; (8005160 <FANS_UpdateCyrrentDays+0xfc>)
 80050ac:	2086      	movs	r0, #134	; 0x86
 80050ae:	fb00 f303 	mul.w	r3, r0, r3
 80050b2:	440b      	add	r3, r1
 80050b4:	3385      	adds	r3, #133	; 0x85
 80050b6:	781b      	ldrb	r3, [r3, #0]
 80050b8:	4413      	add	r3, r2
 80050ba:	71bb      	strb	r3, [r7, #6]
		ProgramForFun[i].currentDay = fullDate - ProgramForFun[i].firstDay;
 80050bc:	4b29      	ldr	r3, [pc, #164]	; (8005164 <FANS_UpdateCyrrentDays+0x100>)
 80050be:	881b      	ldrh	r3, [r3, #0]
 80050c0:	b2d9      	uxtb	r1, r3
 80050c2:	79fb      	ldrb	r3, [r7, #7]
 80050c4:	4a26      	ldr	r2, [pc, #152]	; (8005160 <FANS_UpdateCyrrentDays+0xfc>)
 80050c6:	2086      	movs	r0, #134	; 0x86
 80050c8:	fb00 f303 	mul.w	r3, r0, r3
 80050cc:	4413      	add	r3, r2
 80050ce:	3304      	adds	r3, #4
 80050d0:	881b      	ldrh	r3, [r3, #0]
 80050d2:	b2da      	uxtb	r2, r3
 80050d4:	79fb      	ldrb	r3, [r7, #7]
 80050d6:	1a8a      	subs	r2, r1, r2
 80050d8:	b2d0      	uxtb	r0, r2
 80050da:	4a21      	ldr	r2, [pc, #132]	; (8005160 <FANS_UpdateCyrrentDays+0xfc>)
 80050dc:	2186      	movs	r1, #134	; 0x86
 80050de:	fb01 f303 	mul.w	r3, r1, r3
 80050e2:	4413      	add	r3, r2
 80050e4:	3302      	adds	r3, #2
 80050e6:	4602      	mov	r2, r0
 80050e8:	701a      	strb	r2, [r3, #0]
		//если текущий день получается больше максимального количества дней цикла работы, то приравниваем к последнему дню
		if (ProgramForFun[i].currentDay >= sumDays) {
 80050ea:	79fb      	ldrb	r3, [r7, #7]
 80050ec:	4a1c      	ldr	r2, [pc, #112]	; (8005160 <FANS_UpdateCyrrentDays+0xfc>)
 80050ee:	2186      	movs	r1, #134	; 0x86
 80050f0:	fb01 f303 	mul.w	r3, r1, r3
 80050f4:	4413      	add	r3, r2
 80050f6:	3302      	adds	r3, #2
 80050f8:	781b      	ldrb	r3, [r3, #0]
 80050fa:	79ba      	ldrb	r2, [r7, #6]
 80050fc:	429a      	cmp	r2, r3
 80050fe:	d821      	bhi.n	8005144 <FANS_UpdateCyrrentDays+0xe0>
			if (sumDays == 0) {
 8005100:	79bb      	ldrb	r3, [r7, #6]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d109      	bne.n	800511a <FANS_UpdateCyrrentDays+0xb6>
				ProgramForFun[i].currentDay = (sumDays);
 8005106:	79fb      	ldrb	r3, [r7, #7]
 8005108:	4a15      	ldr	r2, [pc, #84]	; (8005160 <FANS_UpdateCyrrentDays+0xfc>)
 800510a:	2186      	movs	r1, #134	; 0x86
 800510c:	fb01 f303 	mul.w	r3, r1, r3
 8005110:	4413      	add	r3, r2
 8005112:	3302      	adds	r3, #2
 8005114:	79ba      	ldrb	r2, [r7, #6]
 8005116:	701a      	strb	r2, [r3, #0]
 8005118:	e00b      	b.n	8005132 <FANS_UpdateCyrrentDays+0xce>
			} else {
				ProgramForFun[i].currentDay = (sumDays - 1);
 800511a:	79fb      	ldrb	r3, [r7, #7]
 800511c:	79ba      	ldrb	r2, [r7, #6]
 800511e:	3a01      	subs	r2, #1
 8005120:	b2d0      	uxtb	r0, r2
 8005122:	4a0f      	ldr	r2, [pc, #60]	; (8005160 <FANS_UpdateCyrrentDays+0xfc>)
 8005124:	2186      	movs	r1, #134	; 0x86
 8005126:	fb01 f303 	mul.w	r3, r1, r3
 800512a:	4413      	add	r3, r2
 800512c:	3302      	adds	r3, #2
 800512e:	4602      	mov	r2, r0
 8005130:	701a      	strb	r2, [r3, #0]
			}
			ProgramForFun[i].fanOn = 0;
 8005132:	79fb      	ldrb	r3, [r7, #7]
 8005134:	4a0a      	ldr	r2, [pc, #40]	; (8005160 <FANS_UpdateCyrrentDays+0xfc>)
 8005136:	2186      	movs	r1, #134	; 0x86
 8005138:	fb01 f303 	mul.w	r3, r1, r3
 800513c:	4413      	add	r3, r2
 800513e:	3301      	adds	r3, #1
 8005140:	2200      	movs	r2, #0
 8005142:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < NUMBER_OF_FANS; i++) {
 8005144:	79fb      	ldrb	r3, [r7, #7]
 8005146:	3301      	adds	r3, #1
 8005148:	71fb      	strb	r3, [r7, #7]
 800514a:	79fb      	ldrb	r3, [r7, #7]
 800514c:	2b07      	cmp	r3, #7
 800514e:	d98f      	bls.n	8005070 <FANS_UpdateCyrrentDays+0xc>
		}
	}
}
 8005150:	bf00      	nop
 8005152:	bf00      	nop
 8005154:	370c      	adds	r7, #12
 8005156:	46bd      	mov	sp, r7
 8005158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515c:	4770      	bx	lr
 800515e:	bf00      	nop
 8005160:	20001310 	.word	0x20001310
 8005164:	200000b0 	.word	0x200000b0

08005168 <FANS_Toggle>:
//
//-------------------------------------------------------------
//
//Включает/выключает вентилятор.
MenuItemStruct* FANS_Toggle(MenuItemStruct *current) {
 8005168:	b480      	push	{r7}
 800516a:	b083      	sub	sp, #12
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
	ProgramForFun[current->value3 - 1].fanOn = !ProgramForFun[current->value3 - 1].fanOn;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	7c5b      	ldrb	r3, [r3, #17]
 8005174:	3b01      	subs	r3, #1
 8005176:	4a0f      	ldr	r2, [pc, #60]	; (80051b4 <FANS_Toggle+0x4c>)
 8005178:	2186      	movs	r1, #134	; 0x86
 800517a:	fb01 f303 	mul.w	r3, r1, r3
 800517e:	4413      	add	r3, r2
 8005180:	3301      	adds	r3, #1
 8005182:	781b      	ldrb	r3, [r3, #0]
 8005184:	2b00      	cmp	r3, #0
 8005186:	bf0c      	ite	eq
 8005188:	2301      	moveq	r3, #1
 800518a:	2300      	movne	r3, #0
 800518c:	b2da      	uxtb	r2, r3
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	7c5b      	ldrb	r3, [r3, #17]
 8005192:	3b01      	subs	r3, #1
 8005194:	4610      	mov	r0, r2
 8005196:	4a07      	ldr	r2, [pc, #28]	; (80051b4 <FANS_Toggle+0x4c>)
 8005198:	2186      	movs	r1, #134	; 0x86
 800519a:	fb01 f303 	mul.w	r3, r1, r3
 800519e:	4413      	add	r3, r2
 80051a0:	3301      	adds	r3, #1
 80051a2:	4602      	mov	r2, r0
 80051a4:	701a      	strb	r2, [r3, #0]
	return current;
 80051a6:	687b      	ldr	r3, [r7, #4]
}
 80051a8:	4618      	mov	r0, r3
 80051aa:	370c      	adds	r7, #12
 80051ac:	46bd      	mov	sp, r7
 80051ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b2:	4770      	bx	lr
 80051b4:	20001310 	.word	0x20001310

080051b8 <FANS_UpdateFirstDay>:
//
//-------------------------------------------------------------
//
//Устанавливает текущий день в качестве первого для цикла этого вентилятора
MenuItemStruct* FANS_UpdateFirstDay(MenuItemStruct *current) {
 80051b8:	b480      	push	{r7}
 80051ba:	b083      	sub	sp, #12
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
	//current->value3-1 - соответствует номеру вентилятора
	ProgramForFun[current->value3 - 1].firstDay = fullDate;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	7c5b      	ldrb	r3, [r3, #17]
 80051c4:	3b01      	subs	r3, #1
 80051c6:	4a16      	ldr	r2, [pc, #88]	; (8005220 <FANS_UpdateFirstDay+0x68>)
 80051c8:	8810      	ldrh	r0, [r2, #0]
 80051ca:	4a16      	ldr	r2, [pc, #88]	; (8005224 <FANS_UpdateFirstDay+0x6c>)
 80051cc:	2186      	movs	r1, #134	; 0x86
 80051ce:	fb01 f303 	mul.w	r3, r1, r3
 80051d2:	4413      	add	r3, r2
 80051d4:	3304      	adds	r3, #4
 80051d6:	4602      	mov	r2, r0
 80051d8:	801a      	strh	r2, [r3, #0]
	//считаем текущий день для вызванного вентилятора
	ProgramForFun[current->value3 - 1].currentDay = fullDate - ProgramForFun[current->value3 - 1].firstDay;
 80051da:	4b11      	ldr	r3, [pc, #68]	; (8005220 <FANS_UpdateFirstDay+0x68>)
 80051dc:	881b      	ldrh	r3, [r3, #0]
 80051de:	b2d9      	uxtb	r1, r3
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	7c5b      	ldrb	r3, [r3, #17]
 80051e4:	3b01      	subs	r3, #1
 80051e6:	4a0f      	ldr	r2, [pc, #60]	; (8005224 <FANS_UpdateFirstDay+0x6c>)
 80051e8:	2086      	movs	r0, #134	; 0x86
 80051ea:	fb00 f303 	mul.w	r3, r0, r3
 80051ee:	4413      	add	r3, r2
 80051f0:	3304      	adds	r3, #4
 80051f2:	881b      	ldrh	r3, [r3, #0]
 80051f4:	b2da      	uxtb	r2, r3
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	7c5b      	ldrb	r3, [r3, #17]
 80051fa:	3b01      	subs	r3, #1
 80051fc:	1a8a      	subs	r2, r1, r2
 80051fe:	b2d0      	uxtb	r0, r2
 8005200:	4a08      	ldr	r2, [pc, #32]	; (8005224 <FANS_UpdateFirstDay+0x6c>)
 8005202:	2186      	movs	r1, #134	; 0x86
 8005204:	fb01 f303 	mul.w	r3, r1, r3
 8005208:	4413      	add	r3, r2
 800520a:	3302      	adds	r3, #2
 800520c:	4602      	mov	r2, r0
 800520e:	701a      	strb	r2, [r3, #0]
	return current;
 8005210:	687b      	ldr	r3, [r7, #4]
}
 8005212:	4618      	mov	r0, r3
 8005214:	370c      	adds	r7, #12
 8005216:	46bd      	mov	sp, r7
 8005218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521c:	4770      	bx	lr
 800521e:	bf00      	nop
 8005220:	200000b0 	.word	0x200000b0
 8005224:	20001310 	.word	0x20001310

08005228 <FANS_FillProgram>:
//
//-------------------------------------------------------------
//
// заполнение программы работы вентилятора
MenuItemStruct* FANS_FillProgram(MenuItemStruct *current) {
 8005228:	b480      	push	{r7}
 800522a:	b089      	sub	sp, #36	; 0x24
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
	for (int j = 0; j < NUMBER_OF_FANS; j++) {
 8005230:	2300      	movs	r3, #0
 8005232:	61fb      	str	r3, [r7, #28]
 8005234:	e0aa      	b.n	800538c <FANS_FillProgram+0x164>
		for (int i = 0; i < ProgramForFun[j].numberOfDays1; i++) {
 8005236:	2300      	movs	r3, #0
 8005238:	61bb      	str	r3, [r7, #24]
 800523a:	e015      	b.n	8005268 <FANS_FillProgram+0x40>
			ProgramForFun[j].arrDays[i] = ProgramForFun[j].modeNumber1;
 800523c:	4a59      	ldr	r2, [pc, #356]	; (80053a4 <FANS_FillProgram+0x17c>)
 800523e:	69fb      	ldr	r3, [r7, #28]
 8005240:	2186      	movs	r1, #134	; 0x86
 8005242:	fb01 f303 	mul.w	r3, r1, r3
 8005246:	4413      	add	r3, r2
 8005248:	337e      	adds	r3, #126	; 0x7e
 800524a:	7818      	ldrb	r0, [r3, #0]
 800524c:	4a55      	ldr	r2, [pc, #340]	; (80053a4 <FANS_FillProgram+0x17c>)
 800524e:	69fb      	ldr	r3, [r7, #28]
 8005250:	2186      	movs	r1, #134	; 0x86
 8005252:	fb01 f303 	mul.w	r3, r1, r3
 8005256:	441a      	add	r2, r3
 8005258:	69bb      	ldr	r3, [r7, #24]
 800525a:	4413      	add	r3, r2
 800525c:	3306      	adds	r3, #6
 800525e:	4602      	mov	r2, r0
 8005260:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < ProgramForFun[j].numberOfDays1; i++) {
 8005262:	69bb      	ldr	r3, [r7, #24]
 8005264:	3301      	adds	r3, #1
 8005266:	61bb      	str	r3, [r7, #24]
 8005268:	4a4e      	ldr	r2, [pc, #312]	; (80053a4 <FANS_FillProgram+0x17c>)
 800526a:	69fb      	ldr	r3, [r7, #28]
 800526c:	2186      	movs	r1, #134	; 0x86
 800526e:	fb01 f303 	mul.w	r3, r1, r3
 8005272:	4413      	add	r3, r2
 8005274:	337f      	adds	r3, #127	; 0x7f
 8005276:	781b      	ldrb	r3, [r3, #0]
 8005278:	461a      	mov	r2, r3
 800527a:	69bb      	ldr	r3, [r7, #24]
 800527c:	4293      	cmp	r3, r2
 800527e:	dbdd      	blt.n	800523c <FANS_FillProgram+0x14>
		}
		uint8_t sumdays = ProgramForFun[j].numberOfDays1 + ProgramForFun[j].numberOfDays2;
 8005280:	4a48      	ldr	r2, [pc, #288]	; (80053a4 <FANS_FillProgram+0x17c>)
 8005282:	69fb      	ldr	r3, [r7, #28]
 8005284:	2186      	movs	r1, #134	; 0x86
 8005286:	fb01 f303 	mul.w	r3, r1, r3
 800528a:	4413      	add	r3, r2
 800528c:	337f      	adds	r3, #127	; 0x7f
 800528e:	781a      	ldrb	r2, [r3, #0]
 8005290:	4944      	ldr	r1, [pc, #272]	; (80053a4 <FANS_FillProgram+0x17c>)
 8005292:	69fb      	ldr	r3, [r7, #28]
 8005294:	2086      	movs	r0, #134	; 0x86
 8005296:	fb00 f303 	mul.w	r3, r0, r3
 800529a:	440b      	add	r3, r1
 800529c:	3381      	adds	r3, #129	; 0x81
 800529e:	781b      	ldrb	r3, [r3, #0]
 80052a0:	4413      	add	r3, r2
 80052a2:	72fb      	strb	r3, [r7, #11]
		for (int i = ProgramForFun[j].numberOfDays1; i < sumdays; i++) {
 80052a4:	4a3f      	ldr	r2, [pc, #252]	; (80053a4 <FANS_FillProgram+0x17c>)
 80052a6:	69fb      	ldr	r3, [r7, #28]
 80052a8:	2186      	movs	r1, #134	; 0x86
 80052aa:	fb01 f303 	mul.w	r3, r1, r3
 80052ae:	4413      	add	r3, r2
 80052b0:	337f      	adds	r3, #127	; 0x7f
 80052b2:	781b      	ldrb	r3, [r3, #0]
 80052b4:	617b      	str	r3, [r7, #20]
 80052b6:	e015      	b.n	80052e4 <FANS_FillProgram+0xbc>
			ProgramForFun[j].arrDays[i] = ProgramForFun[j].modeNumber2;
 80052b8:	4a3a      	ldr	r2, [pc, #232]	; (80053a4 <FANS_FillProgram+0x17c>)
 80052ba:	69fb      	ldr	r3, [r7, #28]
 80052bc:	2186      	movs	r1, #134	; 0x86
 80052be:	fb01 f303 	mul.w	r3, r1, r3
 80052c2:	4413      	add	r3, r2
 80052c4:	3380      	adds	r3, #128	; 0x80
 80052c6:	7818      	ldrb	r0, [r3, #0]
 80052c8:	4a36      	ldr	r2, [pc, #216]	; (80053a4 <FANS_FillProgram+0x17c>)
 80052ca:	69fb      	ldr	r3, [r7, #28]
 80052cc:	2186      	movs	r1, #134	; 0x86
 80052ce:	fb01 f303 	mul.w	r3, r1, r3
 80052d2:	441a      	add	r2, r3
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	4413      	add	r3, r2
 80052d8:	3306      	adds	r3, #6
 80052da:	4602      	mov	r2, r0
 80052dc:	701a      	strb	r2, [r3, #0]
		for (int i = ProgramForFun[j].numberOfDays1; i < sumdays; i++) {
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	3301      	adds	r3, #1
 80052e2:	617b      	str	r3, [r7, #20]
 80052e4:	7afb      	ldrb	r3, [r7, #11]
 80052e6:	697a      	ldr	r2, [r7, #20]
 80052e8:	429a      	cmp	r2, r3
 80052ea:	dbe5      	blt.n	80052b8 <FANS_FillProgram+0x90>
		}
		for (int i = sumdays; i < sumdays + ProgramForFun[j].numberOfDays3; i++) {
 80052ec:	7afb      	ldrb	r3, [r7, #11]
 80052ee:	613b      	str	r3, [r7, #16]
 80052f0:	e015      	b.n	800531e <FANS_FillProgram+0xf6>
			ProgramForFun[j].arrDays[i] = ProgramForFun[j].modeNumber3;
 80052f2:	4a2c      	ldr	r2, [pc, #176]	; (80053a4 <FANS_FillProgram+0x17c>)
 80052f4:	69fb      	ldr	r3, [r7, #28]
 80052f6:	2186      	movs	r1, #134	; 0x86
 80052f8:	fb01 f303 	mul.w	r3, r1, r3
 80052fc:	4413      	add	r3, r2
 80052fe:	3382      	adds	r3, #130	; 0x82
 8005300:	7818      	ldrb	r0, [r3, #0]
 8005302:	4a28      	ldr	r2, [pc, #160]	; (80053a4 <FANS_FillProgram+0x17c>)
 8005304:	69fb      	ldr	r3, [r7, #28]
 8005306:	2186      	movs	r1, #134	; 0x86
 8005308:	fb01 f303 	mul.w	r3, r1, r3
 800530c:	441a      	add	r2, r3
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	4413      	add	r3, r2
 8005312:	3306      	adds	r3, #6
 8005314:	4602      	mov	r2, r0
 8005316:	701a      	strb	r2, [r3, #0]
		for (int i = sumdays; i < sumdays + ProgramForFun[j].numberOfDays3; i++) {
 8005318:	693b      	ldr	r3, [r7, #16]
 800531a:	3301      	adds	r3, #1
 800531c:	613b      	str	r3, [r7, #16]
 800531e:	7afb      	ldrb	r3, [r7, #11]
 8005320:	4920      	ldr	r1, [pc, #128]	; (80053a4 <FANS_FillProgram+0x17c>)
 8005322:	69fa      	ldr	r2, [r7, #28]
 8005324:	2086      	movs	r0, #134	; 0x86
 8005326:	fb00 f202 	mul.w	r2, r0, r2
 800532a:	440a      	add	r2, r1
 800532c:	3283      	adds	r2, #131	; 0x83
 800532e:	7812      	ldrb	r2, [r2, #0]
 8005330:	4413      	add	r3, r2
 8005332:	693a      	ldr	r2, [r7, #16]
 8005334:	429a      	cmp	r2, r3
 8005336:	dbdc      	blt.n	80052f2 <FANS_FillProgram+0xca>
		}
		sumdays = sumdays + ProgramForFun[j].numberOfDays3;
 8005338:	4a1a      	ldr	r2, [pc, #104]	; (80053a4 <FANS_FillProgram+0x17c>)
 800533a:	69fb      	ldr	r3, [r7, #28]
 800533c:	2186      	movs	r1, #134	; 0x86
 800533e:	fb01 f303 	mul.w	r3, r1, r3
 8005342:	4413      	add	r3, r2
 8005344:	3383      	adds	r3, #131	; 0x83
 8005346:	781a      	ldrb	r2, [r3, #0]
 8005348:	7afb      	ldrb	r3, [r7, #11]
 800534a:	4413      	add	r3, r2
 800534c:	72fb      	strb	r3, [r7, #11]
		for (int i = sumdays; i < NUM_EL_OF_ARR_DAYS; i++) {
 800534e:	7afb      	ldrb	r3, [r7, #11]
 8005350:	60fb      	str	r3, [r7, #12]
 8005352:	e015      	b.n	8005380 <FANS_FillProgram+0x158>
			ProgramForFun[j].arrDays[i] = ProgramForFun[j].modeNumber4;
 8005354:	4a13      	ldr	r2, [pc, #76]	; (80053a4 <FANS_FillProgram+0x17c>)
 8005356:	69fb      	ldr	r3, [r7, #28]
 8005358:	2186      	movs	r1, #134	; 0x86
 800535a:	fb01 f303 	mul.w	r3, r1, r3
 800535e:	4413      	add	r3, r2
 8005360:	3384      	adds	r3, #132	; 0x84
 8005362:	7818      	ldrb	r0, [r3, #0]
 8005364:	4a0f      	ldr	r2, [pc, #60]	; (80053a4 <FANS_FillProgram+0x17c>)
 8005366:	69fb      	ldr	r3, [r7, #28]
 8005368:	2186      	movs	r1, #134	; 0x86
 800536a:	fb01 f303 	mul.w	r3, r1, r3
 800536e:	441a      	add	r2, r3
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	4413      	add	r3, r2
 8005374:	3306      	adds	r3, #6
 8005376:	4602      	mov	r2, r0
 8005378:	701a      	strb	r2, [r3, #0]
		for (int i = sumdays; i < NUM_EL_OF_ARR_DAYS; i++) {
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	3301      	adds	r3, #1
 800537e:	60fb      	str	r3, [r7, #12]
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2b77      	cmp	r3, #119	; 0x77
 8005384:	d9e6      	bls.n	8005354 <FANS_FillProgram+0x12c>
	for (int j = 0; j < NUMBER_OF_FANS; j++) {
 8005386:	69fb      	ldr	r3, [r7, #28]
 8005388:	3301      	adds	r3, #1
 800538a:	61fb      	str	r3, [r7, #28]
 800538c:	69fb      	ldr	r3, [r7, #28]
 800538e:	2b07      	cmp	r3, #7
 8005390:	f67f af51 	bls.w	8005236 <FANS_FillProgram+0xe>
		}	//END i
	} //END j
	return current;
 8005394:	687b      	ldr	r3, [r7, #4]
}
 8005396:	4618      	mov	r0, r3
 8005398:	3724      	adds	r7, #36	; 0x24
 800539a:	46bd      	mov	sp, r7
 800539c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a0:	4770      	bx	lr
 80053a2:	bf00      	nop
 80053a4:	20001310 	.word	0x20001310

080053a8 <FANS_ResetSettings>:
//
//-------------------------------------------------------------
//
//Сброс всех настроек
MenuItemStruct* FANS_ResetSettings(MenuItemStruct *current) {
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b084      	sub	sp, #16
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
	dayOn.Hours = 0;
 80053b0:	4b5d      	ldr	r3, [pc, #372]	; (8005528 <FANS_ResetSettings+0x180>)
 80053b2:	2200      	movs	r2, #0
 80053b4:	701a      	strb	r2, [r3, #0]
	dayOn.Minutes = 0;
 80053b6:	4b5c      	ldr	r3, [pc, #368]	; (8005528 <FANS_ResetSettings+0x180>)
 80053b8:	2200      	movs	r2, #0
 80053ba:	705a      	strb	r2, [r3, #1]
	dayOn.Seconds = 0;
 80053bc:	4b5a      	ldr	r3, [pc, #360]	; (8005528 <FANS_ResetSettings+0x180>)
 80053be:	2200      	movs	r2, #0
 80053c0:	709a      	strb	r2, [r3, #2]
	dayOn.FullTime = 0;
 80053c2:	4b59      	ldr	r3, [pc, #356]	; (8005528 <FANS_ResetSettings+0x180>)
 80053c4:	2200      	movs	r2, #0
 80053c6:	615a      	str	r2, [r3, #20]
	dayOff.Hours = 0;
 80053c8:	4b58      	ldr	r3, [pc, #352]	; (800552c <FANS_ResetSettings+0x184>)
 80053ca:	2200      	movs	r2, #0
 80053cc:	701a      	strb	r2, [r3, #0]
	dayOff.Minutes = 0;
 80053ce:	4b57      	ldr	r3, [pc, #348]	; (800552c <FANS_ResetSettings+0x184>)
 80053d0:	2200      	movs	r2, #0
 80053d2:	705a      	strb	r2, [r3, #1]
	dayOff.Seconds = 0;
 80053d4:	4b55      	ldr	r3, [pc, #340]	; (800552c <FANS_ResetSettings+0x184>)
 80053d6:	2200      	movs	r2, #0
 80053d8:	709a      	strb	r2, [r3, #2]
	dayOff.FullTime = 0;
 80053da:	4b54      	ldr	r3, [pc, #336]	; (800552c <FANS_ResetSettings+0x184>)
 80053dc:	2200      	movs	r2, #0
 80053de:	615a      	str	r2, [r3, #20]
	g_switchingPeriod = 0;
 80053e0:	4b53      	ldr	r3, [pc, #332]	; (8005530 <FANS_ResetSettings+0x188>)
 80053e2:	2200      	movs	r2, #0
 80053e4:	701a      	strb	r2, [r3, #0]
	TIM4->ARR = 0;
 80053e6:	4b53      	ldr	r3, [pc, #332]	; (8005534 <FANS_ResetSettings+0x18c>)
 80053e8:	2200      	movs	r2, #0
 80053ea:	62da      	str	r2, [r3, #44]	; 0x2c
	dlRouteM[0].dayHight = 0;
 80053ec:	4b52      	ldr	r3, [pc, #328]	; (8005538 <FANS_ResetSettings+0x190>)
 80053ee:	2200      	movs	r2, #0
 80053f0:	705a      	strb	r2, [r3, #1]
	dlRouteM[0].dayLow = 0;
 80053f2:	4b51      	ldr	r3, [pc, #324]	; (8005538 <FANS_ResetSettings+0x190>)
 80053f4:	2200      	movs	r2, #0
 80053f6:	709a      	strb	r2, [r3, #2]
	dlRouteM[0].night = 0;
 80053f8:	4b4f      	ldr	r3, [pc, #316]	; (8005538 <FANS_ResetSettings+0x190>)
 80053fa:	2200      	movs	r2, #0
 80053fc:	701a      	strb	r2, [r3, #0]
	dlRouteM[1].dayHight = 0;
 80053fe:	4b4e      	ldr	r3, [pc, #312]	; (8005538 <FANS_ResetSettings+0x190>)
 8005400:	2200      	movs	r2, #0
 8005402:	711a      	strb	r2, [r3, #4]
	dlRouteM[1].dayLow = 0;
 8005404:	4b4c      	ldr	r3, [pc, #304]	; (8005538 <FANS_ResetSettings+0x190>)
 8005406:	2200      	movs	r2, #0
 8005408:	715a      	strb	r2, [r3, #5]
	dlRouteM[1].night = 0;
 800540a:	4b4b      	ldr	r3, [pc, #300]	; (8005538 <FANS_ResetSettings+0x190>)
 800540c:	2200      	movs	r2, #0
 800540e:	70da      	strb	r2, [r3, #3]
	dlRouteM[2].dayHight = 0;
 8005410:	4b49      	ldr	r3, [pc, #292]	; (8005538 <FANS_ResetSettings+0x190>)
 8005412:	2200      	movs	r2, #0
 8005414:	71da      	strb	r2, [r3, #7]
	dlRouteM[2].dayLow = 0;
 8005416:	4b48      	ldr	r3, [pc, #288]	; (8005538 <FANS_ResetSettings+0x190>)
 8005418:	2200      	movs	r2, #0
 800541a:	721a      	strb	r2, [r3, #8]
	dlRouteM[2].night = 0;
 800541c:	4b46      	ldr	r3, [pc, #280]	; (8005538 <FANS_ResetSettings+0x190>)
 800541e:	2200      	movs	r2, #0
 8005420:	719a      	strb	r2, [r3, #6]
	dlRouteM[3].dayHight = 0;
 8005422:	4b45      	ldr	r3, [pc, #276]	; (8005538 <FANS_ResetSettings+0x190>)
 8005424:	2200      	movs	r2, #0
 8005426:	729a      	strb	r2, [r3, #10]
	dlRouteM[3].dayLow = 0;
 8005428:	4b43      	ldr	r3, [pc, #268]	; (8005538 <FANS_ResetSettings+0x190>)
 800542a:	2200      	movs	r2, #0
 800542c:	72da      	strb	r2, [r3, #11]
	dlRouteM[3].night = 0;
 800542e:	4b42      	ldr	r3, [pc, #264]	; (8005538 <FANS_ResetSettings+0x190>)
 8005430:	2200      	movs	r2, #0
 8005432:	725a      	strb	r2, [r3, #9]
	for (int i = 0; i < 8; i++) // данные о количестве дней и режимов
 8005434:	2300      	movs	r3, #0
 8005436:	60fb      	str	r3, [r7, #12]
 8005438:	e067      	b.n	800550a <FANS_ResetSettings+0x162>
			{
		ProgramForFun[i].firstDay = fullDate;
 800543a:	4b40      	ldr	r3, [pc, #256]	; (800553c <FANS_ResetSettings+0x194>)
 800543c:	8818      	ldrh	r0, [r3, #0]
 800543e:	4a40      	ldr	r2, [pc, #256]	; (8005540 <FANS_ResetSettings+0x198>)
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2186      	movs	r1, #134	; 0x86
 8005444:	fb01 f303 	mul.w	r3, r1, r3
 8005448:	4413      	add	r3, r2
 800544a:	3304      	adds	r3, #4
 800544c:	4602      	mov	r2, r0
 800544e:	801a      	strh	r2, [r3, #0]
		ProgramForFun[i].currentDay = 0;
 8005450:	4a3b      	ldr	r2, [pc, #236]	; (8005540 <FANS_ResetSettings+0x198>)
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2186      	movs	r1, #134	; 0x86
 8005456:	fb01 f303 	mul.w	r3, r1, r3
 800545a:	4413      	add	r3, r2
 800545c:	3302      	adds	r3, #2
 800545e:	2200      	movs	r2, #0
 8005460:	701a      	strb	r2, [r3, #0]
		ProgramForFun[i].fanOn = 0;
 8005462:	4a37      	ldr	r2, [pc, #220]	; (8005540 <FANS_ResetSettings+0x198>)
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2186      	movs	r1, #134	; 0x86
 8005468:	fb01 f303 	mul.w	r3, r1, r3
 800546c:	4413      	add	r3, r2
 800546e:	3301      	adds	r3, #1
 8005470:	2200      	movs	r2, #0
 8005472:	701a      	strb	r2, [r3, #0]
		ProgramForFun[i].modeNumber1 = 0;
 8005474:	4a32      	ldr	r2, [pc, #200]	; (8005540 <FANS_ResetSettings+0x198>)
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2186      	movs	r1, #134	; 0x86
 800547a:	fb01 f303 	mul.w	r3, r1, r3
 800547e:	4413      	add	r3, r2
 8005480:	337e      	adds	r3, #126	; 0x7e
 8005482:	2200      	movs	r2, #0
 8005484:	701a      	strb	r2, [r3, #0]
		ProgramForFun[i].modeNumber2 = 0;
 8005486:	4a2e      	ldr	r2, [pc, #184]	; (8005540 <FANS_ResetSettings+0x198>)
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2186      	movs	r1, #134	; 0x86
 800548c:	fb01 f303 	mul.w	r3, r1, r3
 8005490:	4413      	add	r3, r2
 8005492:	3380      	adds	r3, #128	; 0x80
 8005494:	2200      	movs	r2, #0
 8005496:	701a      	strb	r2, [r3, #0]
		ProgramForFun[i].modeNumber3 = 0;
 8005498:	4a29      	ldr	r2, [pc, #164]	; (8005540 <FANS_ResetSettings+0x198>)
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2186      	movs	r1, #134	; 0x86
 800549e:	fb01 f303 	mul.w	r3, r1, r3
 80054a2:	4413      	add	r3, r2
 80054a4:	3382      	adds	r3, #130	; 0x82
 80054a6:	2200      	movs	r2, #0
 80054a8:	701a      	strb	r2, [r3, #0]
		ProgramForFun[i].modeNumber4 = 0;
 80054aa:	4a25      	ldr	r2, [pc, #148]	; (8005540 <FANS_ResetSettings+0x198>)
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2186      	movs	r1, #134	; 0x86
 80054b0:	fb01 f303 	mul.w	r3, r1, r3
 80054b4:	4413      	add	r3, r2
 80054b6:	3384      	adds	r3, #132	; 0x84
 80054b8:	2200      	movs	r2, #0
 80054ba:	701a      	strb	r2, [r3, #0]
		ProgramForFun[i].numberOfDays1 = 0;
 80054bc:	4a20      	ldr	r2, [pc, #128]	; (8005540 <FANS_ResetSettings+0x198>)
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2186      	movs	r1, #134	; 0x86
 80054c2:	fb01 f303 	mul.w	r3, r1, r3
 80054c6:	4413      	add	r3, r2
 80054c8:	337f      	adds	r3, #127	; 0x7f
 80054ca:	2200      	movs	r2, #0
 80054cc:	701a      	strb	r2, [r3, #0]
		ProgramForFun[i].numberOfDays2 = 0;
 80054ce:	4a1c      	ldr	r2, [pc, #112]	; (8005540 <FANS_ResetSettings+0x198>)
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2186      	movs	r1, #134	; 0x86
 80054d4:	fb01 f303 	mul.w	r3, r1, r3
 80054d8:	4413      	add	r3, r2
 80054da:	3381      	adds	r3, #129	; 0x81
 80054dc:	2200      	movs	r2, #0
 80054de:	701a      	strb	r2, [r3, #0]
		ProgramForFun[i].numberOfDays3 = 0;
 80054e0:	4a17      	ldr	r2, [pc, #92]	; (8005540 <FANS_ResetSettings+0x198>)
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2186      	movs	r1, #134	; 0x86
 80054e6:	fb01 f303 	mul.w	r3, r1, r3
 80054ea:	4413      	add	r3, r2
 80054ec:	3383      	adds	r3, #131	; 0x83
 80054ee:	2200      	movs	r2, #0
 80054f0:	701a      	strb	r2, [r3, #0]
		ProgramForFun[i].numberOfDays4 = 0;
 80054f2:	4a13      	ldr	r2, [pc, #76]	; (8005540 <FANS_ResetSettings+0x198>)
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	2186      	movs	r1, #134	; 0x86
 80054f8:	fb01 f303 	mul.w	r3, r1, r3
 80054fc:	4413      	add	r3, r2
 80054fe:	3385      	adds	r3, #133	; 0x85
 8005500:	2200      	movs	r2, #0
 8005502:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 8; i++) // данные о количестве дней и режимов
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	3301      	adds	r3, #1
 8005508:	60fb      	str	r3, [r7, #12]
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2b07      	cmp	r3, #7
 800550e:	dd94      	ble.n	800543a <FANS_ResetSettings+0x92>
	}
	romMemUn.romMemStr.checkNewFirmware = 0; //указывает что прошивка больше не новая
 8005510:	4b0c      	ldr	r3, [pc, #48]	; (8005544 <FANS_ResetSettings+0x19c>)
 8005512:	2200      	movs	r2, #0
 8005514:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c

	STORING_SaveSetting();
 8005518:	f003 f91c 	bl	8008754 <STORING_SaveSetting>

	return current;
 800551c:	687b      	ldr	r3, [r7, #4]
}
 800551e:	4618      	mov	r0, r3
 8005520:	3710      	adds	r7, #16
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}
 8005526:	bf00      	nop
 8005528:	20000e8c 	.word	0x20000e8c
 800552c:	20000ea4 	.word	0x20000ea4
 8005530:	200000b2 	.word	0x200000b2
 8005534:	40000800 	.word	0x40000800
 8005538:	20001300 	.word	0x20001300
 800553c:	200000b0 	.word	0x200000b0
 8005540:	20001310 	.word	0x20001310
 8005544:	20001944 	.word	0x20001944

08005548 <FANS_SetTime>:
//
//-------------------------------------------------------------
//
//Установка времени в RTC
MenuItemStruct* FANS_SetTime(struct MenuItemStruct *current) {
 8005548:	b580      	push	{r7, lr}
 800554a:	b082      	sub	sp, #8
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
	if (HAL_RTC_SetTime(&hrtc, &userTime, RTC_FORMAT_BIN) != HAL_OK) {
 8005550:	2200      	movs	r2, #0
 8005552:	4907      	ldr	r1, [pc, #28]	; (8005570 <FANS_SetTime+0x28>)
 8005554:	4807      	ldr	r0, [pc, #28]	; (8005574 <FANS_SetTime+0x2c>)
 8005556:	f7fd ff3a 	bl	80033ce <HAL_RTC_SetTime>
 800555a:	4603      	mov	r3, r0
 800555c:	2b00      	cmp	r3, #0
 800555e:	d001      	beq.n	8005564 <FANS_SetTime+0x1c>
		Error_Handler();
 8005560:	f002 f9e4 	bl	800792c <Error_Handler>
	}
	return current;
 8005564:	687b      	ldr	r3, [r7, #4]
}
 8005566:	4618      	mov	r0, r3
 8005568:	3708      	adds	r7, #8
 800556a:	46bd      	mov	sp, r7
 800556c:	bd80      	pop	{r7, pc}
 800556e:	bf00      	nop
 8005570:	20000e74 	.word	0x20000e74
 8005574:	200017a4 	.word	0x200017a4

08005578 <FANS_SetDate>:
//
//-------------------------------------------------------------
//
//установка даты
MenuItemStruct* FANS_SetDate(struct MenuItemStruct *current) {
 8005578:	b580      	push	{r7, lr}
 800557a:	b084      	sub	sp, #16
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
	if (HAL_RTC_SetDate(&hrtc, &userDate, RTC_FORMAT_BIN) != HAL_OK) {
 8005580:	2200      	movs	r2, #0
 8005582:	4923      	ldr	r1, [pc, #140]	; (8005610 <FANS_SetDate+0x98>)
 8005584:	4823      	ldr	r0, [pc, #140]	; (8005614 <FANS_SetDate+0x9c>)
 8005586:	f7fe f83d 	bl	8003604 <HAL_RTC_SetDate>
 800558a:	4603      	mov	r3, r0
 800558c:	2b00      	cmp	r3, #0
 800558e:	d001      	beq.n	8005594 <FANS_SetDate+0x1c>
		Error_Handler();
 8005590:	f002 f9cc 	bl	800792c <Error_Handler>
	}
	HAL_RTC_GetTime(&hrtc, &currentTime, RTC_FORMAT_BIN);
 8005594:	2200      	movs	r2, #0
 8005596:	4920      	ldr	r1, [pc, #128]	; (8005618 <FANS_SetDate+0xa0>)
 8005598:	481e      	ldr	r0, [pc, #120]	; (8005614 <FANS_SetDate+0x9c>)
 800559a:	f7fd ffd5 	bl	8003548 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &currentDate, RTC_FORMAT_BIN);
 800559e:	2200      	movs	r2, #0
 80055a0:	491e      	ldr	r1, [pc, #120]	; (800561c <FANS_SetDate+0xa4>)
 80055a2:	481c      	ldr	r0, [pc, #112]	; (8005614 <FANS_SetDate+0x9c>)
 80055a4:	f7fe f8d5 	bl	8003752 <HAL_RTC_GetDate>
	while (currentDate.Date != userDate.Date || currentDate.Month != userDate.Month || currentDate.Year != userDate.Year) {
 80055a8:	e002      	b.n	80055b0 <FANS_SetDate+0x38>
		HAL_Delay(1);
 80055aa:	2001      	movs	r0, #1
 80055ac:	f7fb fa5c 	bl	8000a68 <HAL_Delay>
	while (currentDate.Date != userDate.Date || currentDate.Month != userDate.Month || currentDate.Year != userDate.Year) {
 80055b0:	4b1a      	ldr	r3, [pc, #104]	; (800561c <FANS_SetDate+0xa4>)
 80055b2:	789a      	ldrb	r2, [r3, #2]
 80055b4:	4b16      	ldr	r3, [pc, #88]	; (8005610 <FANS_SetDate+0x98>)
 80055b6:	789b      	ldrb	r3, [r3, #2]
 80055b8:	429a      	cmp	r2, r3
 80055ba:	d1f6      	bne.n	80055aa <FANS_SetDate+0x32>
 80055bc:	4b17      	ldr	r3, [pc, #92]	; (800561c <FANS_SetDate+0xa4>)
 80055be:	785a      	ldrb	r2, [r3, #1]
 80055c0:	4b13      	ldr	r3, [pc, #76]	; (8005610 <FANS_SetDate+0x98>)
 80055c2:	785b      	ldrb	r3, [r3, #1]
 80055c4:	429a      	cmp	r2, r3
 80055c6:	d1f0      	bne.n	80055aa <FANS_SetDate+0x32>
 80055c8:	4b14      	ldr	r3, [pc, #80]	; (800561c <FANS_SetDate+0xa4>)
 80055ca:	78da      	ldrb	r2, [r3, #3]
 80055cc:	4b10      	ldr	r3, [pc, #64]	; (8005610 <FANS_SetDate+0x98>)
 80055ce:	78db      	ldrb	r3, [r3, #3]
 80055d0:	429a      	cmp	r2, r3
 80055d2:	d1ea      	bne.n	80055aa <FANS_SetDate+0x32>
	}
	FANS_CalculationDate();
 80055d4:	f000 f828 	bl	8005628 <FANS_CalculationDate>
	// приравниваем стартовые дни к текущему
	for (int i = 0; i < 8; i++) {
 80055d8:	2300      	movs	r3, #0
 80055da:	60fb      	str	r3, [r7, #12]
 80055dc:	e00d      	b.n	80055fa <FANS_SetDate+0x82>
		ProgramForFun[i].firstDay = fullDate;
 80055de:	4b10      	ldr	r3, [pc, #64]	; (8005620 <FANS_SetDate+0xa8>)
 80055e0:	8818      	ldrh	r0, [r3, #0]
 80055e2:	4a10      	ldr	r2, [pc, #64]	; (8005624 <FANS_SetDate+0xac>)
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2186      	movs	r1, #134	; 0x86
 80055e8:	fb01 f303 	mul.w	r3, r1, r3
 80055ec:	4413      	add	r3, r2
 80055ee:	3304      	adds	r3, #4
 80055f0:	4602      	mov	r2, r0
 80055f2:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < 8; i++) {
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	3301      	adds	r3, #1
 80055f8:	60fb      	str	r3, [r7, #12]
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	2b07      	cmp	r3, #7
 80055fe:	ddee      	ble.n	80055de <FANS_SetDate+0x66>
	}
	FANS_UpdateCyrrentDays(); //считаем текущие дни
 8005600:	f7ff fd30 	bl	8005064 <FANS_UpdateCyrrentDays>
	return current;
 8005604:	687b      	ldr	r3, [r7, #4]
}
 8005606:	4618      	mov	r0, r3
 8005608:	3710      	adds	r7, #16
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}
 800560e:	bf00      	nop
 8005610:	20000ec0 	.word	0x20000ec0
 8005614:	200017a4 	.word	0x200017a4
 8005618:	20000e5c 	.word	0x20000e5c
 800561c:	20000ebc 	.word	0x20000ebc
 8005620:	200000b0 	.word	0x200000b0
 8005624:	20001310 	.word	0x20001310

08005628 <FANS_CalculationDate>:
//
//-------------------------------------------------------------
//
//Переводит дату в одно число
void FANS_CalculationDate(void) {
 8005628:	b480      	push	{r7}
 800562a:	b085      	sub	sp, #20
 800562c:	af00      	add	r7, sp, #0
	fullDate = 0;
 800562e:	4b36      	ldr	r3, [pc, #216]	; (8005708 <FANS_CalculationDate+0xe0>)
 8005630:	2200      	movs	r2, #0
 8005632:	801a      	strh	r2, [r3, #0]
	//считаем дни в годах от нулевого до предыдущего установленному
	for (int i = 0; i < currentDate.Year - 1; i++) {
 8005634:	2300      	movs	r3, #0
 8005636:	60fb      	str	r3, [r7, #12]
 8005638:	e020      	b.n	800567c <FANS_CalculationDate+0x54>
//если год високосный, то +366, если нет, то +365
		for (int j = 0; j < 25; j++) {
 800563a:	2300      	movs	r3, #0
 800563c:	60bb      	str	r3, [r7, #8]
 800563e:	e010      	b.n	8005662 <FANS_CalculationDate+0x3a>
			if (i == leapYears[j]) {
 8005640:	4a32      	ldr	r2, [pc, #200]	; (800570c <FANS_CalculationDate+0xe4>)
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	4413      	add	r3, r2
 8005646:	781b      	ldrb	r3, [r3, #0]
 8005648:	461a      	mov	r2, r3
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	4293      	cmp	r3, r2
 800564e:	d105      	bne.n	800565c <FANS_CalculationDate+0x34>
				fullDate = fullDate + 1;
 8005650:	4b2d      	ldr	r3, [pc, #180]	; (8005708 <FANS_CalculationDate+0xe0>)
 8005652:	881b      	ldrh	r3, [r3, #0]
 8005654:	3301      	adds	r3, #1
 8005656:	b29a      	uxth	r2, r3
 8005658:	4b2b      	ldr	r3, [pc, #172]	; (8005708 <FANS_CalculationDate+0xe0>)
 800565a:	801a      	strh	r2, [r3, #0]
		for (int j = 0; j < 25; j++) {
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	3301      	adds	r3, #1
 8005660:	60bb      	str	r3, [r7, #8]
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	2b18      	cmp	r3, #24
 8005666:	ddeb      	ble.n	8005640 <FANS_CalculationDate+0x18>
			}
		}
		fullDate = fullDate + 365;
 8005668:	4b27      	ldr	r3, [pc, #156]	; (8005708 <FANS_CalculationDate+0xe0>)
 800566a:	881b      	ldrh	r3, [r3, #0]
 800566c:	f203 136d 	addw	r3, r3, #365	; 0x16d
 8005670:	b29a      	uxth	r2, r3
 8005672:	4b25      	ldr	r3, [pc, #148]	; (8005708 <FANS_CalculationDate+0xe0>)
 8005674:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < currentDate.Year - 1; i++) {
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	3301      	adds	r3, #1
 800567a:	60fb      	str	r3, [r7, #12]
 800567c:	4b24      	ldr	r3, [pc, #144]	; (8005710 <FANS_CalculationDate+0xe8>)
 800567e:	78db      	ldrb	r3, [r3, #3]
 8005680:	3b01      	subs	r3, #1
 8005682:	68fa      	ldr	r2, [r7, #12]
 8005684:	429a      	cmp	r2, r3
 8005686:	dbd8      	blt.n	800563a <FANS_CalculationDate+0x12>
	}
	//считаем дни в текущем году в месяцах от первого до предыдущего установленному
	for (int i = 1; i < currentDate.Month - 1; i++) {
 8005688:	2301      	movs	r3, #1
 800568a:	607b      	str	r3, [r7, #4]
 800568c:	e027      	b.n	80056de <FANS_CalculationDate+0xb6>
		fullDate = fullDate + months[i];
 800568e:	4a21      	ldr	r2, [pc, #132]	; (8005714 <FANS_CalculationDate+0xec>)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	4413      	add	r3, r2
 8005694:	781b      	ldrb	r3, [r3, #0]
 8005696:	b29a      	uxth	r2, r3
 8005698:	4b1b      	ldr	r3, [pc, #108]	; (8005708 <FANS_CalculationDate+0xe0>)
 800569a:	881b      	ldrh	r3, [r3, #0]
 800569c:	4413      	add	r3, r2
 800569e:	b29a      	uxth	r2, r3
 80056a0:	4b19      	ldr	r3, [pc, #100]	; (8005708 <FANS_CalculationDate+0xe0>)
 80056a2:	801a      	strh	r2, [r3, #0]
		if (i == 2) // если февраль
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2b02      	cmp	r3, #2
 80056a8:	d116      	bne.n	80056d8 <FANS_CalculationDate+0xb0>
				{
			//проверяем, если високосный год, добавляем один день
			for (int j = 0; j < 25; j++) {
 80056aa:	2300      	movs	r3, #0
 80056ac:	603b      	str	r3, [r7, #0]
 80056ae:	e010      	b.n	80056d2 <FANS_CalculationDate+0xaa>
				if (currentDate.Year == leapYears[j]) {
 80056b0:	4b17      	ldr	r3, [pc, #92]	; (8005710 <FANS_CalculationDate+0xe8>)
 80056b2:	78da      	ldrb	r2, [r3, #3]
 80056b4:	4915      	ldr	r1, [pc, #84]	; (800570c <FANS_CalculationDate+0xe4>)
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	440b      	add	r3, r1
 80056ba:	781b      	ldrb	r3, [r3, #0]
 80056bc:	429a      	cmp	r2, r3
 80056be:	d105      	bne.n	80056cc <FANS_CalculationDate+0xa4>
					fullDate = fullDate + 1;
 80056c0:	4b11      	ldr	r3, [pc, #68]	; (8005708 <FANS_CalculationDate+0xe0>)
 80056c2:	881b      	ldrh	r3, [r3, #0]
 80056c4:	3301      	adds	r3, #1
 80056c6:	b29a      	uxth	r2, r3
 80056c8:	4b0f      	ldr	r3, [pc, #60]	; (8005708 <FANS_CalculationDate+0xe0>)
 80056ca:	801a      	strh	r2, [r3, #0]
			for (int j = 0; j < 25; j++) {
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	3301      	adds	r3, #1
 80056d0:	603b      	str	r3, [r7, #0]
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	2b18      	cmp	r3, #24
 80056d6:	ddeb      	ble.n	80056b0 <FANS_CalculationDate+0x88>
	for (int i = 1; i < currentDate.Month - 1; i++) {
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	3301      	adds	r3, #1
 80056dc:	607b      	str	r3, [r7, #4]
 80056de:	4b0c      	ldr	r3, [pc, #48]	; (8005710 <FANS_CalculationDate+0xe8>)
 80056e0:	785b      	ldrb	r3, [r3, #1]
 80056e2:	3b01      	subs	r3, #1
 80056e4:	687a      	ldr	r2, [r7, #4]
 80056e6:	429a      	cmp	r2, r3
 80056e8:	dbd1      	blt.n	800568e <FANS_CalculationDate+0x66>
				}
			}
		}
	}
	//добавляем дни текущего месяца
	fullDate = fullDate + currentDate.Date;
 80056ea:	4b09      	ldr	r3, [pc, #36]	; (8005710 <FANS_CalculationDate+0xe8>)
 80056ec:	789b      	ldrb	r3, [r3, #2]
 80056ee:	b29a      	uxth	r2, r3
 80056f0:	4b05      	ldr	r3, [pc, #20]	; (8005708 <FANS_CalculationDate+0xe0>)
 80056f2:	881b      	ldrh	r3, [r3, #0]
 80056f4:	4413      	add	r3, r2
 80056f6:	b29a      	uxth	r2, r3
 80056f8:	4b03      	ldr	r3, [pc, #12]	; (8005708 <FANS_CalculationDate+0xe0>)
 80056fa:	801a      	strh	r2, [r3, #0]
}
 80056fc:	bf00      	nop
 80056fe:	3714      	adds	r7, #20
 8005700:	46bd      	mov	sp, r7
 8005702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005706:	4770      	bx	lr
 8005708:	200000b0 	.word	0x200000b0
 800570c:	0800b014 	.word	0x0800b014
 8005710:	20000ebc 	.word	0x20000ebc
 8005714:	0800b004 	.word	0x0800b004

08005718 <FANS_SetStartDayTime>:
//
//-------------------------------------------------------------
//
//Устанавливает время начала дня
MenuItemStruct* FANS_SetStartDayTime(struct MenuItemStruct *current) {
 8005718:	b480      	push	{r7}
 800571a:	b083      	sub	sp, #12
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
	dayOn.Hours = userTime.Hours;
 8005720:	4b13      	ldr	r3, [pc, #76]	; (8005770 <FANS_SetStartDayTime+0x58>)
 8005722:	781a      	ldrb	r2, [r3, #0]
 8005724:	4b13      	ldr	r3, [pc, #76]	; (8005774 <FANS_SetStartDayTime+0x5c>)
 8005726:	701a      	strb	r2, [r3, #0]
	dayOn.Minutes = userTime.Minutes;
 8005728:	4b11      	ldr	r3, [pc, #68]	; (8005770 <FANS_SetStartDayTime+0x58>)
 800572a:	785a      	ldrb	r2, [r3, #1]
 800572c:	4b11      	ldr	r3, [pc, #68]	; (8005774 <FANS_SetStartDayTime+0x5c>)
 800572e:	705a      	strb	r2, [r3, #1]
	dayOn.Seconds = userTime.Seconds;
 8005730:	4b0f      	ldr	r3, [pc, #60]	; (8005770 <FANS_SetStartDayTime+0x58>)
 8005732:	789a      	ldrb	r2, [r3, #2]
 8005734:	4b0f      	ldr	r3, [pc, #60]	; (8005774 <FANS_SetStartDayTime+0x5c>)
 8005736:	709a      	strb	r2, [r3, #2]
	dayOn.FullTime = (uint32_t) (((uint32_t) dayOn.Hours * 3600U) + ((uint32_t) dayOn.Minutes * 60U) + ((uint32_t) dayOn.Seconds));
 8005738:	4b0e      	ldr	r3, [pc, #56]	; (8005774 <FANS_SetStartDayTime+0x5c>)
 800573a:	781b      	ldrb	r3, [r3, #0]
 800573c:	461a      	mov	r2, r3
 800573e:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8005742:	fb03 f202 	mul.w	r2, r3, r2
 8005746:	4b0b      	ldr	r3, [pc, #44]	; (8005774 <FANS_SetStartDayTime+0x5c>)
 8005748:	785b      	ldrb	r3, [r3, #1]
 800574a:	4619      	mov	r1, r3
 800574c:	460b      	mov	r3, r1
 800574e:	011b      	lsls	r3, r3, #4
 8005750:	1a5b      	subs	r3, r3, r1
 8005752:	009b      	lsls	r3, r3, #2
 8005754:	4413      	add	r3, r2
 8005756:	4a07      	ldr	r2, [pc, #28]	; (8005774 <FANS_SetStartDayTime+0x5c>)
 8005758:	7892      	ldrb	r2, [r2, #2]
 800575a:	4413      	add	r3, r2
 800575c:	4a05      	ldr	r2, [pc, #20]	; (8005774 <FANS_SetStartDayTime+0x5c>)
 800575e:	6153      	str	r3, [r2, #20]
	return current;
 8005760:	687b      	ldr	r3, [r7, #4]
}
 8005762:	4618      	mov	r0, r3
 8005764:	370c      	adds	r7, #12
 8005766:	46bd      	mov	sp, r7
 8005768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576c:	4770      	bx	lr
 800576e:	bf00      	nop
 8005770:	20000e74 	.word	0x20000e74
 8005774:	20000e8c 	.word	0x20000e8c

08005778 <FANS_SetEndDayTime>:
//
//-------------------------------------------------------------
//
//Устанавливает время конца дня
MenuItemStruct* FANS_SetEndDayTime(struct MenuItemStruct *current) {
 8005778:	b480      	push	{r7}
 800577a:	b083      	sub	sp, #12
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
	dayOff.Hours = userTime.Hours;
 8005780:	4b13      	ldr	r3, [pc, #76]	; (80057d0 <FANS_SetEndDayTime+0x58>)
 8005782:	781a      	ldrb	r2, [r3, #0]
 8005784:	4b13      	ldr	r3, [pc, #76]	; (80057d4 <FANS_SetEndDayTime+0x5c>)
 8005786:	701a      	strb	r2, [r3, #0]
	dayOff.Minutes = userTime.Minutes;
 8005788:	4b11      	ldr	r3, [pc, #68]	; (80057d0 <FANS_SetEndDayTime+0x58>)
 800578a:	785a      	ldrb	r2, [r3, #1]
 800578c:	4b11      	ldr	r3, [pc, #68]	; (80057d4 <FANS_SetEndDayTime+0x5c>)
 800578e:	705a      	strb	r2, [r3, #1]
	dayOff.Seconds = userTime.Seconds;
 8005790:	4b0f      	ldr	r3, [pc, #60]	; (80057d0 <FANS_SetEndDayTime+0x58>)
 8005792:	789a      	ldrb	r2, [r3, #2]
 8005794:	4b0f      	ldr	r3, [pc, #60]	; (80057d4 <FANS_SetEndDayTime+0x5c>)
 8005796:	709a      	strb	r2, [r3, #2]
	dayOff.FullTime = (uint32_t) (((uint32_t) dayOff.Hours * 3600U) + ((uint32_t) dayOff.Minutes * 60U) + ((uint32_t) dayOff.Seconds));
 8005798:	4b0e      	ldr	r3, [pc, #56]	; (80057d4 <FANS_SetEndDayTime+0x5c>)
 800579a:	781b      	ldrb	r3, [r3, #0]
 800579c:	461a      	mov	r2, r3
 800579e:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80057a2:	fb03 f202 	mul.w	r2, r3, r2
 80057a6:	4b0b      	ldr	r3, [pc, #44]	; (80057d4 <FANS_SetEndDayTime+0x5c>)
 80057a8:	785b      	ldrb	r3, [r3, #1]
 80057aa:	4619      	mov	r1, r3
 80057ac:	460b      	mov	r3, r1
 80057ae:	011b      	lsls	r3, r3, #4
 80057b0:	1a5b      	subs	r3, r3, r1
 80057b2:	009b      	lsls	r3, r3, #2
 80057b4:	4413      	add	r3, r2
 80057b6:	4a07      	ldr	r2, [pc, #28]	; (80057d4 <FANS_SetEndDayTime+0x5c>)
 80057b8:	7892      	ldrb	r2, [r2, #2]
 80057ba:	4413      	add	r3, r2
 80057bc:	4a05      	ldr	r2, [pc, #20]	; (80057d4 <FANS_SetEndDayTime+0x5c>)
 80057be:	6153      	str	r3, [r2, #20]
	return current;
 80057c0:	687b      	ldr	r3, [r7, #4]
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	370c      	adds	r7, #12
 80057c6:	46bd      	mov	sp, r7
 80057c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057cc:	4770      	bx	lr
 80057ce:	bf00      	nop
 80057d0:	20000e74 	.word	0x20000e74
 80057d4:	20000ea4 	.word	0x20000ea4

080057d8 <FANS_SetPeriod>:

//
//-------------------------------------------------------------
//
//Set number of second to switch speed fan between lowDay and HighDay
MenuItemStruct* FANS_SetPeriod(struct MenuItemStruct *current) {
 80057d8:	b480      	push	{r7}
 80057da:	b083      	sub	sp, #12
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
	TIM4->ARR = (uint32_t) (g_switchingPeriod * 1000 - 1);
 80057e0:	4b0b      	ldr	r3, [pc, #44]	; (8005810 <FANS_SetPeriod+0x38>)
 80057e2:	781b      	ldrb	r3, [r3, #0]
 80057e4:	461a      	mov	r2, r3
 80057e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80057ea:	fb03 f302 	mul.w	r3, r3, r2
 80057ee:	1e5a      	subs	r2, r3, #1
 80057f0:	4b08      	ldr	r3, [pc, #32]	; (8005814 <FANS_SetPeriod+0x3c>)
 80057f2:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM4->EGR = TIM4->EGR | 1;  // бит UG, что бы вызвать событие обновления и значение TIM4->ARR применилось сразу
 80057f4:	4b07      	ldr	r3, [pc, #28]	; (8005814 <FANS_SetPeriod+0x3c>)
 80057f6:	695b      	ldr	r3, [r3, #20]
 80057f8:	4a06      	ldr	r2, [pc, #24]	; (8005814 <FANS_SetPeriod+0x3c>)
 80057fa:	f043 0301 	orr.w	r3, r3, #1
 80057fe:	6153      	str	r3, [r2, #20]
	return current;
 8005800:	687b      	ldr	r3, [r7, #4]
}
 8005802:	4618      	mov	r0, r3
 8005804:	370c      	adds	r7, #12
 8005806:	46bd      	mov	sp, r7
 8005808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580c:	4770      	bx	lr
 800580e:	bf00      	nop
 8005810:	200000b2 	.word	0x200000b2
 8005814:	40000800 	.word	0x40000800

08005818 <HAL_RTC_AlarmAEventCallback>:
//
//-------------------------------------------------------------
//
//Устанавливаем флаг переключения дня по будильнику
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 8005818:	b480      	push	{r7}
 800581a:	b083      	sub	sp, #12
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
	g_flagNewDay = 1;
 8005820:	4b04      	ldr	r3, [pc, #16]	; (8005834 <HAL_RTC_AlarmAEventCallback+0x1c>)
 8005822:	2201      	movs	r2, #1
 8005824:	701a      	strb	r2, [r3, #0]
}
 8005826:	bf00      	nop
 8005828:	370c      	adds	r7, #12
 800582a:	46bd      	mov	sp, r7
 800582c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005830:	4770      	bx	lr
 8005832:	bf00      	nop
 8005834:	200000ad 	.word	0x200000ad

08005838 <FANS_SetSpeed>:
FANS_TIME_OF_DAY g_timeOfDay;
//
//-------------------------------------------------------------
//
//
void FANS_SetSpeed(void) {
 8005838:	b580      	push	{r7, lr}
 800583a:	b082      	sub	sp, #8
 800583c:	af00      	add	r7, sp, #0
	if (g_timeOfDay == FANS_TIME_DAY) { //если сейчас день
 800583e:	4bbd      	ldr	r3, [pc, #756]	; (8005b34 <FANS_SetSpeed+0x2fc>)
 8005840:	781b      	ldrb	r3, [r3, #0]
 8005842:	2b01      	cmp	r3, #1
 8005844:	f040 811d 	bne.w	8005a82 <FANS_SetSpeed+0x24a>

		if (g_operatingMode) {	//высокая скорость дня
 8005848:	4bbb      	ldr	r3, [pc, #748]	; (8005b38 <FANS_SetSpeed+0x300>)
 800584a:	781b      	ldrb	r3, [r3, #0]
 800584c:	2b00      	cmp	r3, #0
 800584e:	f000 808c 	beq.w	800596a <FANS_SetSpeed+0x132>
			for (uint8_t i = 0; i < NUMBER_OF_FANS; i++) {
 8005852:	2300      	movs	r3, #0
 8005854:	71fb      	strb	r3, [r7, #7]
 8005856:	e083      	b.n	8005960 <FANS_SetSpeed+0x128>
				// для каждого вентилятора выбирается стадия(внутри стадии выбран mode, в зависимости от текущего дня) и время дня, которое определяет скорость

				if (dlRouteM[ProgramForFun[i].arrDays[ProgramForFun[i].currentDay]].dayHight > 0 && ProgramForFun[i].fanOn) { // если введеная пользователем скорость, больше нуля
 8005858:	79fb      	ldrb	r3, [r7, #7]
 800585a:	79fa      	ldrb	r2, [r7, #7]
 800585c:	49b7      	ldr	r1, [pc, #732]	; (8005b3c <FANS_SetSpeed+0x304>)
 800585e:	2086      	movs	r0, #134	; 0x86
 8005860:	fb00 f202 	mul.w	r2, r0, r2
 8005864:	440a      	add	r2, r1
 8005866:	3202      	adds	r2, #2
 8005868:	7812      	ldrb	r2, [r2, #0]
 800586a:	4610      	mov	r0, r2
 800586c:	4ab3      	ldr	r2, [pc, #716]	; (8005b3c <FANS_SetSpeed+0x304>)
 800586e:	2186      	movs	r1, #134	; 0x86
 8005870:	fb01 f303 	mul.w	r3, r1, r3
 8005874:	4413      	add	r3, r2
 8005876:	4403      	add	r3, r0
 8005878:	3306      	adds	r3, #6
 800587a:	781b      	ldrb	r3, [r3, #0]
 800587c:	4619      	mov	r1, r3
 800587e:	4ab0      	ldr	r2, [pc, #704]	; (8005b40 <FANS_SetSpeed+0x308>)
 8005880:	460b      	mov	r3, r1
 8005882:	005b      	lsls	r3, r3, #1
 8005884:	440b      	add	r3, r1
 8005886:	4413      	add	r3, r2
 8005888:	3301      	adds	r3, #1
 800588a:	781b      	ldrb	r3, [r3, #0]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d044      	beq.n	800591a <FANS_SetSpeed+0xe2>
 8005890:	79fb      	ldrb	r3, [r7, #7]
 8005892:	4aaa      	ldr	r2, [pc, #680]	; (8005b3c <FANS_SetSpeed+0x304>)
 8005894:	2186      	movs	r1, #134	; 0x86
 8005896:	fb01 f303 	mul.w	r3, r1, r3
 800589a:	4413      	add	r3, r2
 800589c:	3301      	adds	r3, #1
 800589e:	781b      	ldrb	r3, [r3, #0]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d03a      	beq.n	800591a <FANS_SetSpeed+0xe2>
					HAL_GPIO_WritePin(fanDriver[i].port, fanDriver[i].pin, GPIO_PIN_SET); // включаем 12В питание вентилятора
 80058a4:	79fa      	ldrb	r2, [r7, #7]
 80058a6:	49a7      	ldr	r1, [pc, #668]	; (8005b44 <FANS_SetSpeed+0x30c>)
 80058a8:	4613      	mov	r3, r2
 80058aa:	005b      	lsls	r3, r3, #1
 80058ac:	4413      	add	r3, r2
 80058ae:	009b      	lsls	r3, r3, #2
 80058b0:	440b      	add	r3, r1
 80058b2:	6818      	ldr	r0, [r3, #0]
 80058b4:	79fa      	ldrb	r2, [r7, #7]
 80058b6:	49a3      	ldr	r1, [pc, #652]	; (8005b44 <FANS_SetSpeed+0x30c>)
 80058b8:	4613      	mov	r3, r2
 80058ba:	005b      	lsls	r3, r3, #1
 80058bc:	4413      	add	r3, r2
 80058be:	009b      	lsls	r3, r3, #2
 80058c0:	440b      	add	r3, r1
 80058c2:	3304      	adds	r3, #4
 80058c4:	881b      	ldrh	r3, [r3, #0]
 80058c6:	2201      	movs	r2, #1
 80058c8:	4619      	mov	r1, r3
 80058ca:	f7fb fd57 	bl	800137c <HAL_GPIO_WritePin>
					*fanDriver[i].speed = dlRouteM[ProgramForFun[i].arrDays[ProgramForFun[i].currentDay]].dayHight; // устанавливаем скорость вентилятора
 80058ce:	79fb      	ldrb	r3, [r7, #7]
 80058d0:	79fa      	ldrb	r2, [r7, #7]
 80058d2:	499a      	ldr	r1, [pc, #616]	; (8005b3c <FANS_SetSpeed+0x304>)
 80058d4:	2086      	movs	r0, #134	; 0x86
 80058d6:	fb00 f202 	mul.w	r2, r0, r2
 80058da:	440a      	add	r2, r1
 80058dc:	3202      	adds	r2, #2
 80058de:	7812      	ldrb	r2, [r2, #0]
 80058e0:	4610      	mov	r0, r2
 80058e2:	4a96      	ldr	r2, [pc, #600]	; (8005b3c <FANS_SetSpeed+0x304>)
 80058e4:	2186      	movs	r1, #134	; 0x86
 80058e6:	fb01 f303 	mul.w	r3, r1, r3
 80058ea:	4413      	add	r3, r2
 80058ec:	4403      	add	r3, r0
 80058ee:	3306      	adds	r3, #6
 80058f0:	781b      	ldrb	r3, [r3, #0]
 80058f2:	4619      	mov	r1, r3
 80058f4:	4a92      	ldr	r2, [pc, #584]	; (8005b40 <FANS_SetSpeed+0x308>)
 80058f6:	460b      	mov	r3, r1
 80058f8:	005b      	lsls	r3, r3, #1
 80058fa:	440b      	add	r3, r1
 80058fc:	4413      	add	r3, r2
 80058fe:	3301      	adds	r3, #1
 8005900:	7818      	ldrb	r0, [r3, #0]
 8005902:	79fa      	ldrb	r2, [r7, #7]
 8005904:	498f      	ldr	r1, [pc, #572]	; (8005b44 <FANS_SetSpeed+0x30c>)
 8005906:	4613      	mov	r3, r2
 8005908:	005b      	lsls	r3, r3, #1
 800590a:	4413      	add	r3, r2
 800590c:	009b      	lsls	r3, r3, #2
 800590e:	440b      	add	r3, r1
 8005910:	3308      	adds	r3, #8
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4602      	mov	r2, r0
 8005916:	601a      	str	r2, [r3, #0]
 8005918:	e01f      	b.n	800595a <FANS_SetSpeed+0x122>
				} else { //если введеная пользователем скорость, равна нулю
					HAL_GPIO_WritePin(fanDriver[i].port, fanDriver[i].pin, GPIO_PIN_RESET); // отключаем 12В питание вентилятора
 800591a:	79fa      	ldrb	r2, [r7, #7]
 800591c:	4989      	ldr	r1, [pc, #548]	; (8005b44 <FANS_SetSpeed+0x30c>)
 800591e:	4613      	mov	r3, r2
 8005920:	005b      	lsls	r3, r3, #1
 8005922:	4413      	add	r3, r2
 8005924:	009b      	lsls	r3, r3, #2
 8005926:	440b      	add	r3, r1
 8005928:	6818      	ldr	r0, [r3, #0]
 800592a:	79fa      	ldrb	r2, [r7, #7]
 800592c:	4985      	ldr	r1, [pc, #532]	; (8005b44 <FANS_SetSpeed+0x30c>)
 800592e:	4613      	mov	r3, r2
 8005930:	005b      	lsls	r3, r3, #1
 8005932:	4413      	add	r3, r2
 8005934:	009b      	lsls	r3, r3, #2
 8005936:	440b      	add	r3, r1
 8005938:	3304      	adds	r3, #4
 800593a:	881b      	ldrh	r3, [r3, #0]
 800593c:	2200      	movs	r2, #0
 800593e:	4619      	mov	r1, r3
 8005940:	f7fb fd1c 	bl	800137c <HAL_GPIO_WritePin>
					*fanDriver[i].speed = 0;		// скорость вентилятора
 8005944:	79fa      	ldrb	r2, [r7, #7]
 8005946:	497f      	ldr	r1, [pc, #508]	; (8005b44 <FANS_SetSpeed+0x30c>)
 8005948:	4613      	mov	r3, r2
 800594a:	005b      	lsls	r3, r3, #1
 800594c:	4413      	add	r3, r2
 800594e:	009b      	lsls	r3, r3, #2
 8005950:	440b      	add	r3, r1
 8005952:	3308      	adds	r3, #8
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	2200      	movs	r2, #0
 8005958:	601a      	str	r2, [r3, #0]
			for (uint8_t i = 0; i < NUMBER_OF_FANS; i++) {
 800595a:	79fb      	ldrb	r3, [r7, #7]
 800595c:	3301      	adds	r3, #1
 800595e:	71fb      	strb	r3, [r7, #7]
 8005960:	79fb      	ldrb	r3, [r7, #7]
 8005962:	2b07      	cmp	r3, #7
 8005964:	f67f af78 	bls.w	8005858 <FANS_SetSpeed+0x20>
				*fanDriver[i].speed = 0;
			}
		}

	}
}
 8005968:	e117      	b.n	8005b9a <FANS_SetSpeed+0x362>
			for (uint8_t i = 0; i < NUMBER_OF_FANS; i++) {
 800596a:	2300      	movs	r3, #0
 800596c:	71bb      	strb	r3, [r7, #6]
 800596e:	e083      	b.n	8005a78 <FANS_SetSpeed+0x240>
				if (dlRouteM[ProgramForFun[i].arrDays[ProgramForFun[i].currentDay]].dayLow > 0 && ProgramForFun[i].fanOn) {
 8005970:	79bb      	ldrb	r3, [r7, #6]
 8005972:	79ba      	ldrb	r2, [r7, #6]
 8005974:	4971      	ldr	r1, [pc, #452]	; (8005b3c <FANS_SetSpeed+0x304>)
 8005976:	2086      	movs	r0, #134	; 0x86
 8005978:	fb00 f202 	mul.w	r2, r0, r2
 800597c:	440a      	add	r2, r1
 800597e:	3202      	adds	r2, #2
 8005980:	7812      	ldrb	r2, [r2, #0]
 8005982:	4610      	mov	r0, r2
 8005984:	4a6d      	ldr	r2, [pc, #436]	; (8005b3c <FANS_SetSpeed+0x304>)
 8005986:	2186      	movs	r1, #134	; 0x86
 8005988:	fb01 f303 	mul.w	r3, r1, r3
 800598c:	4413      	add	r3, r2
 800598e:	4403      	add	r3, r0
 8005990:	3306      	adds	r3, #6
 8005992:	781b      	ldrb	r3, [r3, #0]
 8005994:	4619      	mov	r1, r3
 8005996:	4a6a      	ldr	r2, [pc, #424]	; (8005b40 <FANS_SetSpeed+0x308>)
 8005998:	460b      	mov	r3, r1
 800599a:	005b      	lsls	r3, r3, #1
 800599c:	440b      	add	r3, r1
 800599e:	4413      	add	r3, r2
 80059a0:	3302      	adds	r3, #2
 80059a2:	781b      	ldrb	r3, [r3, #0]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d044      	beq.n	8005a32 <FANS_SetSpeed+0x1fa>
 80059a8:	79bb      	ldrb	r3, [r7, #6]
 80059aa:	4a64      	ldr	r2, [pc, #400]	; (8005b3c <FANS_SetSpeed+0x304>)
 80059ac:	2186      	movs	r1, #134	; 0x86
 80059ae:	fb01 f303 	mul.w	r3, r1, r3
 80059b2:	4413      	add	r3, r2
 80059b4:	3301      	adds	r3, #1
 80059b6:	781b      	ldrb	r3, [r3, #0]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d03a      	beq.n	8005a32 <FANS_SetSpeed+0x1fa>
					HAL_GPIO_WritePin(fanDriver[i].port, fanDriver[i].pin, GPIO_PIN_SET);
 80059bc:	79ba      	ldrb	r2, [r7, #6]
 80059be:	4961      	ldr	r1, [pc, #388]	; (8005b44 <FANS_SetSpeed+0x30c>)
 80059c0:	4613      	mov	r3, r2
 80059c2:	005b      	lsls	r3, r3, #1
 80059c4:	4413      	add	r3, r2
 80059c6:	009b      	lsls	r3, r3, #2
 80059c8:	440b      	add	r3, r1
 80059ca:	6818      	ldr	r0, [r3, #0]
 80059cc:	79ba      	ldrb	r2, [r7, #6]
 80059ce:	495d      	ldr	r1, [pc, #372]	; (8005b44 <FANS_SetSpeed+0x30c>)
 80059d0:	4613      	mov	r3, r2
 80059d2:	005b      	lsls	r3, r3, #1
 80059d4:	4413      	add	r3, r2
 80059d6:	009b      	lsls	r3, r3, #2
 80059d8:	440b      	add	r3, r1
 80059da:	3304      	adds	r3, #4
 80059dc:	881b      	ldrh	r3, [r3, #0]
 80059de:	2201      	movs	r2, #1
 80059e0:	4619      	mov	r1, r3
 80059e2:	f7fb fccb 	bl	800137c <HAL_GPIO_WritePin>
					*fanDriver[i].speed = dlRouteM[ProgramForFun[i].arrDays[ProgramForFun[i].currentDay]].dayLow;
 80059e6:	79bb      	ldrb	r3, [r7, #6]
 80059e8:	79ba      	ldrb	r2, [r7, #6]
 80059ea:	4954      	ldr	r1, [pc, #336]	; (8005b3c <FANS_SetSpeed+0x304>)
 80059ec:	2086      	movs	r0, #134	; 0x86
 80059ee:	fb00 f202 	mul.w	r2, r0, r2
 80059f2:	440a      	add	r2, r1
 80059f4:	3202      	adds	r2, #2
 80059f6:	7812      	ldrb	r2, [r2, #0]
 80059f8:	4610      	mov	r0, r2
 80059fa:	4a50      	ldr	r2, [pc, #320]	; (8005b3c <FANS_SetSpeed+0x304>)
 80059fc:	2186      	movs	r1, #134	; 0x86
 80059fe:	fb01 f303 	mul.w	r3, r1, r3
 8005a02:	4413      	add	r3, r2
 8005a04:	4403      	add	r3, r0
 8005a06:	3306      	adds	r3, #6
 8005a08:	781b      	ldrb	r3, [r3, #0]
 8005a0a:	4619      	mov	r1, r3
 8005a0c:	4a4c      	ldr	r2, [pc, #304]	; (8005b40 <FANS_SetSpeed+0x308>)
 8005a0e:	460b      	mov	r3, r1
 8005a10:	005b      	lsls	r3, r3, #1
 8005a12:	440b      	add	r3, r1
 8005a14:	4413      	add	r3, r2
 8005a16:	3302      	adds	r3, #2
 8005a18:	7818      	ldrb	r0, [r3, #0]
 8005a1a:	79ba      	ldrb	r2, [r7, #6]
 8005a1c:	4949      	ldr	r1, [pc, #292]	; (8005b44 <FANS_SetSpeed+0x30c>)
 8005a1e:	4613      	mov	r3, r2
 8005a20:	005b      	lsls	r3, r3, #1
 8005a22:	4413      	add	r3, r2
 8005a24:	009b      	lsls	r3, r3, #2
 8005a26:	440b      	add	r3, r1
 8005a28:	3308      	adds	r3, #8
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4602      	mov	r2, r0
 8005a2e:	601a      	str	r2, [r3, #0]
 8005a30:	e01f      	b.n	8005a72 <FANS_SetSpeed+0x23a>
					HAL_GPIO_WritePin(fanDriver[i].port, fanDriver[i].pin, GPIO_PIN_RESET);
 8005a32:	79ba      	ldrb	r2, [r7, #6]
 8005a34:	4943      	ldr	r1, [pc, #268]	; (8005b44 <FANS_SetSpeed+0x30c>)
 8005a36:	4613      	mov	r3, r2
 8005a38:	005b      	lsls	r3, r3, #1
 8005a3a:	4413      	add	r3, r2
 8005a3c:	009b      	lsls	r3, r3, #2
 8005a3e:	440b      	add	r3, r1
 8005a40:	6818      	ldr	r0, [r3, #0]
 8005a42:	79ba      	ldrb	r2, [r7, #6]
 8005a44:	493f      	ldr	r1, [pc, #252]	; (8005b44 <FANS_SetSpeed+0x30c>)
 8005a46:	4613      	mov	r3, r2
 8005a48:	005b      	lsls	r3, r3, #1
 8005a4a:	4413      	add	r3, r2
 8005a4c:	009b      	lsls	r3, r3, #2
 8005a4e:	440b      	add	r3, r1
 8005a50:	3304      	adds	r3, #4
 8005a52:	881b      	ldrh	r3, [r3, #0]
 8005a54:	2200      	movs	r2, #0
 8005a56:	4619      	mov	r1, r3
 8005a58:	f7fb fc90 	bl	800137c <HAL_GPIO_WritePin>
					*fanDriver[i].speed = 0;
 8005a5c:	79ba      	ldrb	r2, [r7, #6]
 8005a5e:	4939      	ldr	r1, [pc, #228]	; (8005b44 <FANS_SetSpeed+0x30c>)
 8005a60:	4613      	mov	r3, r2
 8005a62:	005b      	lsls	r3, r3, #1
 8005a64:	4413      	add	r3, r2
 8005a66:	009b      	lsls	r3, r3, #2
 8005a68:	440b      	add	r3, r1
 8005a6a:	3308      	adds	r3, #8
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	601a      	str	r2, [r3, #0]
			for (uint8_t i = 0; i < NUMBER_OF_FANS; i++) {
 8005a72:	79bb      	ldrb	r3, [r7, #6]
 8005a74:	3301      	adds	r3, #1
 8005a76:	71bb      	strb	r3, [r7, #6]
 8005a78:	79bb      	ldrb	r3, [r7, #6]
 8005a7a:	2b07      	cmp	r3, #7
 8005a7c:	f67f af78 	bls.w	8005970 <FANS_SetSpeed+0x138>
}
 8005a80:	e08b      	b.n	8005b9a <FANS_SetSpeed+0x362>
		for (uint8_t i = 0; i < NUMBER_OF_FANS; i++) {
 8005a82:	2300      	movs	r3, #0
 8005a84:	717b      	strb	r3, [r7, #5]
 8005a86:	e084      	b.n	8005b92 <FANS_SetSpeed+0x35a>
			if (dlRouteM[ProgramForFun[i].arrDays[ProgramForFun[i].currentDay]].night > 0 && ProgramForFun[i].fanOn) {
 8005a88:	797b      	ldrb	r3, [r7, #5]
 8005a8a:	797a      	ldrb	r2, [r7, #5]
 8005a8c:	492b      	ldr	r1, [pc, #172]	; (8005b3c <FANS_SetSpeed+0x304>)
 8005a8e:	2086      	movs	r0, #134	; 0x86
 8005a90:	fb00 f202 	mul.w	r2, r0, r2
 8005a94:	440a      	add	r2, r1
 8005a96:	3202      	adds	r2, #2
 8005a98:	7812      	ldrb	r2, [r2, #0]
 8005a9a:	4610      	mov	r0, r2
 8005a9c:	4a27      	ldr	r2, [pc, #156]	; (8005b3c <FANS_SetSpeed+0x304>)
 8005a9e:	2186      	movs	r1, #134	; 0x86
 8005aa0:	fb01 f303 	mul.w	r3, r1, r3
 8005aa4:	4413      	add	r3, r2
 8005aa6:	4403      	add	r3, r0
 8005aa8:	3306      	adds	r3, #6
 8005aaa:	781b      	ldrb	r3, [r3, #0]
 8005aac:	4619      	mov	r1, r3
 8005aae:	4a24      	ldr	r2, [pc, #144]	; (8005b40 <FANS_SetSpeed+0x308>)
 8005ab0:	460b      	mov	r3, r1
 8005ab2:	005b      	lsls	r3, r3, #1
 8005ab4:	440b      	add	r3, r1
 8005ab6:	4413      	add	r3, r2
 8005ab8:	781b      	ldrb	r3, [r3, #0]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d046      	beq.n	8005b4c <FANS_SetSpeed+0x314>
 8005abe:	797b      	ldrb	r3, [r7, #5]
 8005ac0:	4a1e      	ldr	r2, [pc, #120]	; (8005b3c <FANS_SetSpeed+0x304>)
 8005ac2:	2186      	movs	r1, #134	; 0x86
 8005ac4:	fb01 f303 	mul.w	r3, r1, r3
 8005ac8:	4413      	add	r3, r2
 8005aca:	3301      	adds	r3, #1
 8005acc:	781b      	ldrb	r3, [r3, #0]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d03c      	beq.n	8005b4c <FANS_SetSpeed+0x314>
				HAL_GPIO_WritePin(fanDriver[i].port, fanDriver[i].pin, GPIO_PIN_SET);
 8005ad2:	797a      	ldrb	r2, [r7, #5]
 8005ad4:	491b      	ldr	r1, [pc, #108]	; (8005b44 <FANS_SetSpeed+0x30c>)
 8005ad6:	4613      	mov	r3, r2
 8005ad8:	005b      	lsls	r3, r3, #1
 8005ada:	4413      	add	r3, r2
 8005adc:	009b      	lsls	r3, r3, #2
 8005ade:	440b      	add	r3, r1
 8005ae0:	6818      	ldr	r0, [r3, #0]
 8005ae2:	797a      	ldrb	r2, [r7, #5]
 8005ae4:	4917      	ldr	r1, [pc, #92]	; (8005b44 <FANS_SetSpeed+0x30c>)
 8005ae6:	4613      	mov	r3, r2
 8005ae8:	005b      	lsls	r3, r3, #1
 8005aea:	4413      	add	r3, r2
 8005aec:	009b      	lsls	r3, r3, #2
 8005aee:	440b      	add	r3, r1
 8005af0:	3304      	adds	r3, #4
 8005af2:	881b      	ldrh	r3, [r3, #0]
 8005af4:	2201      	movs	r2, #1
 8005af6:	4619      	mov	r1, r3
 8005af8:	f7fb fc40 	bl	800137c <HAL_GPIO_WritePin>
				TIM3->CCR1 = dlRouteM[ProgramForFun[i].arrDays[ProgramForFun[i].currentDay]].night;
 8005afc:	797b      	ldrb	r3, [r7, #5]
 8005afe:	797a      	ldrb	r2, [r7, #5]
 8005b00:	490e      	ldr	r1, [pc, #56]	; (8005b3c <FANS_SetSpeed+0x304>)
 8005b02:	2086      	movs	r0, #134	; 0x86
 8005b04:	fb00 f202 	mul.w	r2, r0, r2
 8005b08:	440a      	add	r2, r1
 8005b0a:	3202      	adds	r2, #2
 8005b0c:	7812      	ldrb	r2, [r2, #0]
 8005b0e:	4610      	mov	r0, r2
 8005b10:	4a0a      	ldr	r2, [pc, #40]	; (8005b3c <FANS_SetSpeed+0x304>)
 8005b12:	2186      	movs	r1, #134	; 0x86
 8005b14:	fb01 f303 	mul.w	r3, r1, r3
 8005b18:	4413      	add	r3, r2
 8005b1a:	4403      	add	r3, r0
 8005b1c:	3306      	adds	r3, #6
 8005b1e:	781b      	ldrb	r3, [r3, #0]
 8005b20:	4619      	mov	r1, r3
 8005b22:	4a07      	ldr	r2, [pc, #28]	; (8005b40 <FANS_SetSpeed+0x308>)
 8005b24:	460b      	mov	r3, r1
 8005b26:	005b      	lsls	r3, r3, #1
 8005b28:	440b      	add	r3, r1
 8005b2a:	4413      	add	r3, r2
 8005b2c:	781a      	ldrb	r2, [r3, #0]
 8005b2e:	4b06      	ldr	r3, [pc, #24]	; (8005b48 <FANS_SetSpeed+0x310>)
 8005b30:	635a      	str	r2, [r3, #52]	; 0x34
 8005b32:	e02b      	b.n	8005b8c <FANS_SetSpeed+0x354>
 8005b34:	2000130c 	.word	0x2000130c
 8005b38:	200000ae 	.word	0x200000ae
 8005b3c:	20001310 	.word	0x20001310
 8005b40:	20001300 	.word	0x20001300
 8005b44:	0800b030 	.word	0x0800b030
 8005b48:	40000400 	.word	0x40000400
				HAL_GPIO_WritePin(fanDriver[i].port, fanDriver[i].pin, GPIO_PIN_RESET);
 8005b4c:	797a      	ldrb	r2, [r7, #5]
 8005b4e:	4915      	ldr	r1, [pc, #84]	; (8005ba4 <FANS_SetSpeed+0x36c>)
 8005b50:	4613      	mov	r3, r2
 8005b52:	005b      	lsls	r3, r3, #1
 8005b54:	4413      	add	r3, r2
 8005b56:	009b      	lsls	r3, r3, #2
 8005b58:	440b      	add	r3, r1
 8005b5a:	6818      	ldr	r0, [r3, #0]
 8005b5c:	797a      	ldrb	r2, [r7, #5]
 8005b5e:	4911      	ldr	r1, [pc, #68]	; (8005ba4 <FANS_SetSpeed+0x36c>)
 8005b60:	4613      	mov	r3, r2
 8005b62:	005b      	lsls	r3, r3, #1
 8005b64:	4413      	add	r3, r2
 8005b66:	009b      	lsls	r3, r3, #2
 8005b68:	440b      	add	r3, r1
 8005b6a:	3304      	adds	r3, #4
 8005b6c:	881b      	ldrh	r3, [r3, #0]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	4619      	mov	r1, r3
 8005b72:	f7fb fc03 	bl	800137c <HAL_GPIO_WritePin>
				*fanDriver[i].speed = 0;
 8005b76:	797a      	ldrb	r2, [r7, #5]
 8005b78:	490a      	ldr	r1, [pc, #40]	; (8005ba4 <FANS_SetSpeed+0x36c>)
 8005b7a:	4613      	mov	r3, r2
 8005b7c:	005b      	lsls	r3, r3, #1
 8005b7e:	4413      	add	r3, r2
 8005b80:	009b      	lsls	r3, r3, #2
 8005b82:	440b      	add	r3, r1
 8005b84:	3308      	adds	r3, #8
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	601a      	str	r2, [r3, #0]
		for (uint8_t i = 0; i < NUMBER_OF_FANS; i++) {
 8005b8c:	797b      	ldrb	r3, [r7, #5]
 8005b8e:	3301      	adds	r3, #1
 8005b90:	717b      	strb	r3, [r7, #5]
 8005b92:	797b      	ldrb	r3, [r7, #5]
 8005b94:	2b07      	cmp	r3, #7
 8005b96:	f67f af77 	bls.w	8005a88 <FANS_SetSpeed+0x250>
}
 8005b9a:	bf00      	nop
 8005b9c:	3708      	adds	r7, #8
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}
 8005ba2:	bf00      	nop
 8005ba4:	0800b030 	.word	0x0800b030

08005ba8 <HAL_GPIO_EXTI_Callback>:
uint32_t timeOfLastClick = 0; // время с последнего нажатия
//
//-------------------------------------------------------------
//
// Кнопка прерывание
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b082      	sub	sp, #8
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	4603      	mov	r3, r0
 8005bb0:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_12) {
 8005bb2:	88fb      	ldrh	r3, [r7, #6]
 8005bb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bb8:	d107      	bne.n	8005bca <HAL_GPIO_EXTI_Callback+0x22>
		HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8005bba:	2028      	movs	r0, #40	; 0x28
 8005bbc:	f7fb f87e 	bl	8000cbc <HAL_NVIC_DisableIRQ>
		timeOfLastClick = HAL_GetTick();
 8005bc0:	f7fa ff46 	bl	8000a50 <HAL_GetTick>
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	4a03      	ldr	r2, [pc, #12]	; (8005bd4 <HAL_GPIO_EXTI_Callback+0x2c>)
 8005bc8:	6013      	str	r3, [r2, #0]
	}
}
 8005bca:	bf00      	nop
 8005bcc:	3708      	adds	r7, #8
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}
 8005bd2:	bf00      	nop
 8005bd4:	200000b4 	.word	0x200000b4

08005bd8 <HAL_TIM_IC_CaptureCallback>:
//
//-------------------------------------------------------------
//
//
//Encoder
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b082      	sub	sp, #8
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005be8:	f040 8085 	bne.w	8005cf6 <HAL_TIM_IC_CaptureCallback+0x11e>
		if (ssd1306_CheckDisplayStatus() == SSD1306_ON) {
 8005bec:	f004 fa90 	bl	800a110 <ssd1306_CheckDisplayStatus>
 8005bf0:	4603      	mov	r3, r0
 8005bf2:	2b01      	cmp	r3, #1
 8005bf4:	d17a      	bne.n	8005cec <HAL_TIM_IC_CaptureCallback+0x114>
			//Энкодер дикремент
			if ( TIM2->CR1 & TIM_CR1_DIR) {
 8005bf6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f003 0310 	and.w	r3, r3, #16
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d038      	beq.n	8005c76 <HAL_TIM_IC_CaptureCallback+0x9e>
				if (curMainMenu->cursor == MENU_CURSOR_FIRST_COLUMN) {
 8005c04:	4b3e      	ldr	r3, [pc, #248]	; (8005d00 <HAL_TIM_IC_CaptureCallback+0x128>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	789b      	ldrb	r3, [r3, #2]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d10a      	bne.n	8005c24 <HAL_TIM_IC_CaptureCallback+0x4c>
					if (curMainMenu->up != NULL) {
 8005c0e:	4b3c      	ldr	r3, [pc, #240]	; (8005d00 <HAL_TIM_IC_CaptureCallback+0x128>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	69db      	ldr	r3, [r3, #28]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d069      	beq.n	8005cec <HAL_TIM_IC_CaptureCallback+0x114>
						curMainMenu = curMainMenu->up;
 8005c18:	4b39      	ldr	r3, [pc, #228]	; (8005d00 <HAL_TIM_IC_CaptureCallback+0x128>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	69db      	ldr	r3, [r3, #28]
 8005c1e:	4a38      	ldr	r2, [pc, #224]	; (8005d00 <HAL_TIM_IC_CaptureCallback+0x128>)
 8005c20:	6013      	str	r3, [r2, #0]
 8005c22:	e063      	b.n	8005cec <HAL_TIM_IC_CaptureCallback+0x114>
					}
				} else if (curMainMenu->cursor == MENU_CURSOR_SECOND_COLUMN) {
 8005c24:	4b36      	ldr	r3, [pc, #216]	; (8005d00 <HAL_TIM_IC_CaptureCallback+0x128>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	789b      	ldrb	r3, [r3, #2]
 8005c2a:	2b01      	cmp	r3, #1
 8005c2c:	d110      	bne.n	8005c50 <HAL_TIM_IC_CaptureCallback+0x78>
					if (*curMainMenu->value > (curMainMenu->minVal)) {
 8005c2e:	4b34      	ldr	r3, [pc, #208]	; (8005d00 <HAL_TIM_IC_CaptureCallback+0x128>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	781a      	ldrb	r2, [r3, #0]
 8005c36:	4b32      	ldr	r3, [pc, #200]	; (8005d00 <HAL_TIM_IC_CaptureCallback+0x128>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	7a5b      	ldrb	r3, [r3, #9]
 8005c3c:	429a      	cmp	r2, r3
 8005c3e:	d955      	bls.n	8005cec <HAL_TIM_IC_CaptureCallback+0x114>
						(*curMainMenu->value)--;
 8005c40:	4b2f      	ldr	r3, [pc, #188]	; (8005d00 <HAL_TIM_IC_CaptureCallback+0x128>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	781a      	ldrb	r2, [r3, #0]
 8005c48:	3a01      	subs	r2, #1
 8005c4a:	b2d2      	uxtb	r2, r2
 8005c4c:	701a      	strb	r2, [r3, #0]
 8005c4e:	e04d      	b.n	8005cec <HAL_TIM_IC_CaptureCallback+0x114>
					}
				} else if (curMainMenu->cursor == MENU_CURSOR_THIRD_COLUMN) {
 8005c50:	4b2b      	ldr	r3, [pc, #172]	; (8005d00 <HAL_TIM_IC_CaptureCallback+0x128>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	789b      	ldrb	r3, [r3, #2]
 8005c56:	2b02      	cmp	r3, #2
 8005c58:	d148      	bne.n	8005cec <HAL_TIM_IC_CaptureCallback+0x114>
					if (*curMainMenu->value2 > 0) {
 8005c5a:	4b29      	ldr	r3, [pc, #164]	; (8005d00 <HAL_TIM_IC_CaptureCallback+0x128>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	68db      	ldr	r3, [r3, #12]
 8005c60:	781b      	ldrb	r3, [r3, #0]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d042      	beq.n	8005cec <HAL_TIM_IC_CaptureCallback+0x114>
						(*curMainMenu->value2)--;
 8005c66:	4b26      	ldr	r3, [pc, #152]	; (8005d00 <HAL_TIM_IC_CaptureCallback+0x128>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	68db      	ldr	r3, [r3, #12]
 8005c6c:	781a      	ldrb	r2, [r3, #0]
 8005c6e:	3a01      	subs	r2, #1
 8005c70:	b2d2      	uxtb	r2, r2
 8005c72:	701a      	strb	r2, [r3, #0]
 8005c74:	e03a      	b.n	8005cec <HAL_TIM_IC_CaptureCallback+0x114>
					}
				}
			}
			//Энкодер инкремент
			else {
				if (curMainMenu->cursor == MENU_CURSOR_FIRST_COLUMN) {
 8005c76:	4b22      	ldr	r3, [pc, #136]	; (8005d00 <HAL_TIM_IC_CaptureCallback+0x128>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	789b      	ldrb	r3, [r3, #2]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d10a      	bne.n	8005c96 <HAL_TIM_IC_CaptureCallback+0xbe>
					if (curMainMenu->down != NULL) {
 8005c80:	4b1f      	ldr	r3, [pc, #124]	; (8005d00 <HAL_TIM_IC_CaptureCallback+0x128>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	6a1b      	ldr	r3, [r3, #32]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d030      	beq.n	8005cec <HAL_TIM_IC_CaptureCallback+0x114>
						curMainMenu = curMainMenu->down;
 8005c8a:	4b1d      	ldr	r3, [pc, #116]	; (8005d00 <HAL_TIM_IC_CaptureCallback+0x128>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	6a1b      	ldr	r3, [r3, #32]
 8005c90:	4a1b      	ldr	r2, [pc, #108]	; (8005d00 <HAL_TIM_IC_CaptureCallback+0x128>)
 8005c92:	6013      	str	r3, [r2, #0]
 8005c94:	e02a      	b.n	8005cec <HAL_TIM_IC_CaptureCallback+0x114>
					}
				} else if (curMainMenu->cursor == MENU_CURSOR_SECOND_COLUMN) {
 8005c96:	4b1a      	ldr	r3, [pc, #104]	; (8005d00 <HAL_TIM_IC_CaptureCallback+0x128>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	789b      	ldrb	r3, [r3, #2]
 8005c9c:	2b01      	cmp	r3, #1
 8005c9e:	d110      	bne.n	8005cc2 <HAL_TIM_IC_CaptureCallback+0xea>
					if ((*curMainMenu->value) < (curMainMenu->maxVal)) {
 8005ca0:	4b17      	ldr	r3, [pc, #92]	; (8005d00 <HAL_TIM_IC_CaptureCallback+0x128>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	781a      	ldrb	r2, [r3, #0]
 8005ca8:	4b15      	ldr	r3, [pc, #84]	; (8005d00 <HAL_TIM_IC_CaptureCallback+0x128>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	7a1b      	ldrb	r3, [r3, #8]
 8005cae:	429a      	cmp	r2, r3
 8005cb0:	d21c      	bcs.n	8005cec <HAL_TIM_IC_CaptureCallback+0x114>
						(*curMainMenu->value)++;
 8005cb2:	4b13      	ldr	r3, [pc, #76]	; (8005d00 <HAL_TIM_IC_CaptureCallback+0x128>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	685b      	ldr	r3, [r3, #4]
 8005cb8:	781a      	ldrb	r2, [r3, #0]
 8005cba:	3201      	adds	r2, #1
 8005cbc:	b2d2      	uxtb	r2, r2
 8005cbe:	701a      	strb	r2, [r3, #0]
 8005cc0:	e014      	b.n	8005cec <HAL_TIM_IC_CaptureCallback+0x114>
					}
				} else if (curMainMenu->cursor == MENU_CURSOR_THIRD_COLUMN) {
 8005cc2:	4b0f      	ldr	r3, [pc, #60]	; (8005d00 <HAL_TIM_IC_CaptureCallback+0x128>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	789b      	ldrb	r3, [r3, #2]
 8005cc8:	2b02      	cmp	r3, #2
 8005cca:	d10f      	bne.n	8005cec <HAL_TIM_IC_CaptureCallback+0x114>
					if ((*curMainMenu->value2) < (curMainMenu->maxVal2)) {
 8005ccc:	4b0c      	ldr	r3, [pc, #48]	; (8005d00 <HAL_TIM_IC_CaptureCallback+0x128>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	68db      	ldr	r3, [r3, #12]
 8005cd2:	781a      	ldrb	r2, [r3, #0]
 8005cd4:	4b0a      	ldr	r3, [pc, #40]	; (8005d00 <HAL_TIM_IC_CaptureCallback+0x128>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	7c1b      	ldrb	r3, [r3, #16]
 8005cda:	429a      	cmp	r2, r3
 8005cdc:	d206      	bcs.n	8005cec <HAL_TIM_IC_CaptureCallback+0x114>
						(*curMainMenu->value2)++;
 8005cde:	4b08      	ldr	r3, [pc, #32]	; (8005d00 <HAL_TIM_IC_CaptureCallback+0x128>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	68db      	ldr	r3, [r3, #12]
 8005ce4:	781a      	ldrb	r2, [r3, #0]
 8005ce6:	3201      	adds	r2, #1
 8005ce8:	b2d2      	uxtb	r2, r2
 8005cea:	701a      	strb	r2, [r3, #0]
					}
				}
			}
		}
		timeOfLastClick = HAL_GetTick();
 8005cec:	f7fa feb0 	bl	8000a50 <HAL_GetTick>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	4a04      	ldr	r2, [pc, #16]	; (8005d04 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8005cf4:	6013      	str	r3, [r2, #0]
	}
}
 8005cf6:	bf00      	nop
 8005cf8:	3708      	adds	r7, #8
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}
 8005cfe:	bf00      	nop
 8005d00:	2000001c 	.word	0x2000001c
 8005d04:	200000b4 	.word	0x200000b4

08005d08 <KEYBOARD_ButtonClick>:
//
//-------------------------------------------------------------
//
//
void KEYBOARD_ButtonClick(void) {
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	af00      	add	r7, sp, #0
	if (curMainMenu->type == MENU_TYPE_ONE_COLUMN) {
 8005d0c:	4b1d      	ldr	r3, [pc, #116]	; (8005d84 <KEYBOARD_ButtonClick+0x7c>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	785b      	ldrb	r3, [r3, #1]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d10b      	bne.n	8005d2e <KEYBOARD_ButtonClick+0x26>
		curMainMenu = curMainMenu->function(curMainMenu->enter);
 8005d16:	4b1b      	ldr	r3, [pc, #108]	; (8005d84 <KEYBOARD_ButtonClick+0x7c>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d1c:	4a19      	ldr	r2, [pc, #100]	; (8005d84 <KEYBOARD_ButtonClick+0x7c>)
 8005d1e:	6812      	ldr	r2, [r2, #0]
 8005d20:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005d22:	4610      	mov	r0, r2
 8005d24:	4798      	blx	r3
 8005d26:	4603      	mov	r3, r0
 8005d28:	4a16      	ldr	r2, [pc, #88]	; (8005d84 <KEYBOARD_ButtonClick+0x7c>)
 8005d2a:	6013      	str	r3, [r2, #0]
			curMainMenu->cursor++;

		}

	}
}
 8005d2c:	e028      	b.n	8005d80 <KEYBOARD_ButtonClick+0x78>
	else if (curMainMenu->type == MENU_TYPE_TWO_COLUMN) {
 8005d2e:	4b15      	ldr	r3, [pc, #84]	; (8005d84 <KEYBOARD_ButtonClick+0x7c>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	785b      	ldrb	r3, [r3, #1]
 8005d34:	2b01      	cmp	r3, #1
 8005d36:	d10e      	bne.n	8005d56 <KEYBOARD_ButtonClick+0x4e>
		if (curMainMenu->cursor == MENU_CURSOR_FIRST_COLUMN) {
 8005d38:	4b12      	ldr	r3, [pc, #72]	; (8005d84 <KEYBOARD_ButtonClick+0x7c>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	789b      	ldrb	r3, [r3, #2]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d104      	bne.n	8005d4c <KEYBOARD_ButtonClick+0x44>
			curMainMenu->cursor = MENU_CURSOR_SECOND_COLUMN;
 8005d42:	4b10      	ldr	r3, [pc, #64]	; (8005d84 <KEYBOARD_ButtonClick+0x7c>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	2201      	movs	r2, #1
 8005d48:	709a      	strb	r2, [r3, #2]
}
 8005d4a:	e019      	b.n	8005d80 <KEYBOARD_ButtonClick+0x78>
			curMainMenu->cursor = MENU_CURSOR_FIRST_COLUMN;
 8005d4c:	4b0d      	ldr	r3, [pc, #52]	; (8005d84 <KEYBOARD_ButtonClick+0x7c>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	2200      	movs	r2, #0
 8005d52:	709a      	strb	r2, [r3, #2]
}
 8005d54:	e014      	b.n	8005d80 <KEYBOARD_ButtonClick+0x78>
	else if (curMainMenu->type == MENU_TYPE_TREE_COLUMN) {
 8005d56:	4b0b      	ldr	r3, [pc, #44]	; (8005d84 <KEYBOARD_ButtonClick+0x7c>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	785b      	ldrb	r3, [r3, #1]
 8005d5c:	2b02      	cmp	r3, #2
 8005d5e:	d10f      	bne.n	8005d80 <KEYBOARD_ButtonClick+0x78>
		if (curMainMenu->cursor == MENU_CURSOR_THIRD_COLUMN) {
 8005d60:	4b08      	ldr	r3, [pc, #32]	; (8005d84 <KEYBOARD_ButtonClick+0x7c>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	789b      	ldrb	r3, [r3, #2]
 8005d66:	2b02      	cmp	r3, #2
 8005d68:	d104      	bne.n	8005d74 <KEYBOARD_ButtonClick+0x6c>
			curMainMenu->cursor = MENU_CURSOR_FIRST_COLUMN;
 8005d6a:	4b06      	ldr	r3, [pc, #24]	; (8005d84 <KEYBOARD_ButtonClick+0x7c>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	709a      	strb	r2, [r3, #2]
}
 8005d72:	e005      	b.n	8005d80 <KEYBOARD_ButtonClick+0x78>
			curMainMenu->cursor++;
 8005d74:	4b03      	ldr	r3, [pc, #12]	; (8005d84 <KEYBOARD_ButtonClick+0x7c>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	789a      	ldrb	r2, [r3, #2]
 8005d7a:	3201      	adds	r2, #1
 8005d7c:	b2d2      	uxtb	r2, r2
 8005d7e:	709a      	strb	r2, [r3, #2]
}
 8005d80:	bf00      	nop
 8005d82:	bd80      	pop	{r7, pc}
 8005d84:	2000001c 	.word	0x2000001c

08005d88 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b085      	sub	sp, #20
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	4603      	mov	r3, r0
 8005d90:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005d92:	2300      	movs	r3, #0
 8005d94:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005d96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005d9a:	2b84      	cmp	r3, #132	; 0x84
 8005d9c:	d005      	beq.n	8005daa <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005d9e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	4413      	add	r3, r2
 8005da6:	3303      	adds	r3, #3
 8005da8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005daa:	68fb      	ldr	r3, [r7, #12]
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	3714      	adds	r7, #20
 8005db0:	46bd      	mov	sp, r7
 8005db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db6:	4770      	bx	lr

08005db8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005dbc:	f000 fad6 	bl	800636c <vTaskStartScheduler>
  
  return osOK;
 8005dc0:	2300      	movs	r3, #0
}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	bd80      	pop	{r7, pc}

08005dc6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005dc6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005dc8:	b089      	sub	sp, #36	; 0x24
 8005dca:	af04      	add	r7, sp, #16
 8005dcc:	6078      	str	r0, [r7, #4]
 8005dce:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	695b      	ldr	r3, [r3, #20]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d020      	beq.n	8005e1a <osThreadCreate+0x54>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	699b      	ldr	r3, [r3, #24]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d01c      	beq.n	8005e1a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	685c      	ldr	r4, [r3, #4]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681d      	ldr	r5, [r3, #0]
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	691e      	ldr	r6, [r3, #16]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005df2:	4618      	mov	r0, r3
 8005df4:	f7ff ffc8 	bl	8005d88 <makeFreeRtosPriority>
 8005df8:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	695b      	ldr	r3, [r3, #20]
 8005dfe:	687a      	ldr	r2, [r7, #4]
 8005e00:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005e02:	9202      	str	r2, [sp, #8]
 8005e04:	9301      	str	r3, [sp, #4]
 8005e06:	9100      	str	r1, [sp, #0]
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	4632      	mov	r2, r6
 8005e0c:	4629      	mov	r1, r5
 8005e0e:	4620      	mov	r0, r4
 8005e10:	f000 f8ed 	bl	8005fee <xTaskCreateStatic>
 8005e14:	4603      	mov	r3, r0
 8005e16:	60fb      	str	r3, [r7, #12]
 8005e18:	e01c      	b.n	8005e54 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	685c      	ldr	r4, [r3, #4]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005e26:	b29e      	uxth	r6, r3
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f7ff ffaa 	bl	8005d88 <makeFreeRtosPriority>
 8005e34:	4602      	mov	r2, r0
 8005e36:	f107 030c 	add.w	r3, r7, #12
 8005e3a:	9301      	str	r3, [sp, #4]
 8005e3c:	9200      	str	r2, [sp, #0]
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	4632      	mov	r2, r6
 8005e42:	4629      	mov	r1, r5
 8005e44:	4620      	mov	r0, r4
 8005e46:	f000 f92e 	bl	80060a6 <xTaskCreate>
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	d001      	beq.n	8005e54 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005e50:	2300      	movs	r3, #0
 8005e52:	e000      	b.n	8005e56 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005e54:	68fb      	ldr	r3, [r7, #12]
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	3714      	adds	r7, #20
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005e5e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005e5e:	b580      	push	{r7, lr}
 8005e60:	b084      	sub	sp, #16
 8005e62:	af00      	add	r7, sp, #0
 8005e64:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d001      	beq.n	8005e74 <osDelay+0x16>
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	e000      	b.n	8005e76 <osDelay+0x18>
 8005e74:	2301      	movs	r3, #1
 8005e76:	4618      	mov	r0, r3
 8005e78:	f000 fa44 	bl	8006304 <vTaskDelay>
  
  return osOK;
 8005e7c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	3710      	adds	r7, #16
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}

08005e86 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005e86:	b480      	push	{r7}
 8005e88:	b083      	sub	sp, #12
 8005e8a:	af00      	add	r7, sp, #0
 8005e8c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	f103 0208 	add.w	r2, r3, #8
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	f04f 32ff 	mov.w	r2, #4294967295
 8005e9e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	f103 0208 	add.w	r2, r3, #8
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	f103 0208 	add.w	r2, r3, #8
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005eba:	bf00      	nop
 8005ebc:	370c      	adds	r7, #12
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec4:	4770      	bx	lr

08005ec6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005ec6:	b480      	push	{r7}
 8005ec8:	b083      	sub	sp, #12
 8005eca:	af00      	add	r7, sp, #0
 8005ecc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005ed4:	bf00      	nop
 8005ed6:	370c      	adds	r7, #12
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ede:	4770      	bx	lr

08005ee0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b085      	sub	sp, #20
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
 8005ee8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	68fa      	ldr	r2, [r7, #12]
 8005ef4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	689a      	ldr	r2, [r3, #8]
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	689b      	ldr	r3, [r3, #8]
 8005f02:	683a      	ldr	r2, [r7, #0]
 8005f04:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	683a      	ldr	r2, [r7, #0]
 8005f0a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	687a      	ldr	r2, [r7, #4]
 8005f10:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	1c5a      	adds	r2, r3, #1
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	601a      	str	r2, [r3, #0]
}
 8005f1c:	bf00      	nop
 8005f1e:	3714      	adds	r7, #20
 8005f20:	46bd      	mov	sp, r7
 8005f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f26:	4770      	bx	lr

08005f28 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b085      	sub	sp, #20
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
 8005f30:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f3e:	d103      	bne.n	8005f48 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	691b      	ldr	r3, [r3, #16]
 8005f44:	60fb      	str	r3, [r7, #12]
 8005f46:	e00c      	b.n	8005f62 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	3308      	adds	r3, #8
 8005f4c:	60fb      	str	r3, [r7, #12]
 8005f4e:	e002      	b.n	8005f56 <vListInsert+0x2e>
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	60fb      	str	r3, [r7, #12]
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	685b      	ldr	r3, [r3, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	68ba      	ldr	r2, [r7, #8]
 8005f5e:	429a      	cmp	r2, r3
 8005f60:	d2f6      	bcs.n	8005f50 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	685a      	ldr	r2, [r3, #4]
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	683a      	ldr	r2, [r7, #0]
 8005f70:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	68fa      	ldr	r2, [r7, #12]
 8005f76:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	683a      	ldr	r2, [r7, #0]
 8005f7c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	687a      	ldr	r2, [r7, #4]
 8005f82:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	1c5a      	adds	r2, r3, #1
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	601a      	str	r2, [r3, #0]
}
 8005f8e:	bf00      	nop
 8005f90:	3714      	adds	r7, #20
 8005f92:	46bd      	mov	sp, r7
 8005f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f98:	4770      	bx	lr

08005f9a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005f9a:	b480      	push	{r7}
 8005f9c:	b085      	sub	sp, #20
 8005f9e:	af00      	add	r7, sp, #0
 8005fa0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	691b      	ldr	r3, [r3, #16]
 8005fa6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	687a      	ldr	r2, [r7, #4]
 8005fae:	6892      	ldr	r2, [r2, #8]
 8005fb0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	689b      	ldr	r3, [r3, #8]
 8005fb6:	687a      	ldr	r2, [r7, #4]
 8005fb8:	6852      	ldr	r2, [r2, #4]
 8005fba:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	685b      	ldr	r3, [r3, #4]
 8005fc0:	687a      	ldr	r2, [r7, #4]
 8005fc2:	429a      	cmp	r2, r3
 8005fc4:	d103      	bne.n	8005fce <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	689a      	ldr	r2, [r3, #8]
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	1e5a      	subs	r2, r3, #1
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	3714      	adds	r7, #20
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fec:	4770      	bx	lr

08005fee <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005fee:	b580      	push	{r7, lr}
 8005ff0:	b08e      	sub	sp, #56	; 0x38
 8005ff2:	af04      	add	r7, sp, #16
 8005ff4:	60f8      	str	r0, [r7, #12]
 8005ff6:	60b9      	str	r1, [r7, #8]
 8005ff8:	607a      	str	r2, [r7, #4]
 8005ffa:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005ffc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d10a      	bne.n	8006018 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006006:	f383 8811 	msr	BASEPRI, r3
 800600a:	f3bf 8f6f 	isb	sy
 800600e:	f3bf 8f4f 	dsb	sy
 8006012:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006014:	bf00      	nop
 8006016:	e7fe      	b.n	8006016 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800601a:	2b00      	cmp	r3, #0
 800601c:	d10a      	bne.n	8006034 <xTaskCreateStatic+0x46>
	__asm volatile
 800601e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006022:	f383 8811 	msr	BASEPRI, r3
 8006026:	f3bf 8f6f 	isb	sy
 800602a:	f3bf 8f4f 	dsb	sy
 800602e:	61fb      	str	r3, [r7, #28]
}
 8006030:	bf00      	nop
 8006032:	e7fe      	b.n	8006032 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006034:	2354      	movs	r3, #84	; 0x54
 8006036:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006038:	693b      	ldr	r3, [r7, #16]
 800603a:	2b54      	cmp	r3, #84	; 0x54
 800603c:	d00a      	beq.n	8006054 <xTaskCreateStatic+0x66>
	__asm volatile
 800603e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006042:	f383 8811 	msr	BASEPRI, r3
 8006046:	f3bf 8f6f 	isb	sy
 800604a:	f3bf 8f4f 	dsb	sy
 800604e:	61bb      	str	r3, [r7, #24]
}
 8006050:	bf00      	nop
 8006052:	e7fe      	b.n	8006052 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006056:	2b00      	cmp	r3, #0
 8006058:	d01e      	beq.n	8006098 <xTaskCreateStatic+0xaa>
 800605a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800605c:	2b00      	cmp	r3, #0
 800605e:	d01b      	beq.n	8006098 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006062:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006066:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006068:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800606a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800606c:	2202      	movs	r2, #2
 800606e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006072:	2300      	movs	r3, #0
 8006074:	9303      	str	r3, [sp, #12]
 8006076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006078:	9302      	str	r3, [sp, #8]
 800607a:	f107 0314 	add.w	r3, r7, #20
 800607e:	9301      	str	r3, [sp, #4]
 8006080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006082:	9300      	str	r3, [sp, #0]
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	687a      	ldr	r2, [r7, #4]
 8006088:	68b9      	ldr	r1, [r7, #8]
 800608a:	68f8      	ldr	r0, [r7, #12]
 800608c:	f000 f850 	bl	8006130 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006090:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006092:	f000 f8cd 	bl	8006230 <prvAddNewTaskToReadyList>
 8006096:	e001      	b.n	800609c <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8006098:	2300      	movs	r3, #0
 800609a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800609c:	697b      	ldr	r3, [r7, #20]
	}
 800609e:	4618      	mov	r0, r3
 80060a0:	3728      	adds	r7, #40	; 0x28
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bd80      	pop	{r7, pc}

080060a6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80060a6:	b580      	push	{r7, lr}
 80060a8:	b08c      	sub	sp, #48	; 0x30
 80060aa:	af04      	add	r7, sp, #16
 80060ac:	60f8      	str	r0, [r7, #12]
 80060ae:	60b9      	str	r1, [r7, #8]
 80060b0:	603b      	str	r3, [r7, #0]
 80060b2:	4613      	mov	r3, r2
 80060b4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060b6:	88fb      	ldrh	r3, [r7, #6]
 80060b8:	009b      	lsls	r3, r3, #2
 80060ba:	4618      	mov	r0, r3
 80060bc:	f000 fecc 	bl	8006e58 <pvPortMalloc>
 80060c0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80060c2:	697b      	ldr	r3, [r7, #20]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d00e      	beq.n	80060e6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80060c8:	2054      	movs	r0, #84	; 0x54
 80060ca:	f000 fec5 	bl	8006e58 <pvPortMalloc>
 80060ce:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80060d0:	69fb      	ldr	r3, [r7, #28]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d003      	beq.n	80060de <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80060d6:	69fb      	ldr	r3, [r7, #28]
 80060d8:	697a      	ldr	r2, [r7, #20]
 80060da:	631a      	str	r2, [r3, #48]	; 0x30
 80060dc:	e005      	b.n	80060ea <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80060de:	6978      	ldr	r0, [r7, #20]
 80060e0:	f000 ff7e 	bl	8006fe0 <vPortFree>
 80060e4:	e001      	b.n	80060ea <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80060e6:	2300      	movs	r3, #0
 80060e8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80060ea:	69fb      	ldr	r3, [r7, #28]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d017      	beq.n	8006120 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80060f0:	69fb      	ldr	r3, [r7, #28]
 80060f2:	2200      	movs	r2, #0
 80060f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80060f8:	88fa      	ldrh	r2, [r7, #6]
 80060fa:	2300      	movs	r3, #0
 80060fc:	9303      	str	r3, [sp, #12]
 80060fe:	69fb      	ldr	r3, [r7, #28]
 8006100:	9302      	str	r3, [sp, #8]
 8006102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006104:	9301      	str	r3, [sp, #4]
 8006106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006108:	9300      	str	r3, [sp, #0]
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	68b9      	ldr	r1, [r7, #8]
 800610e:	68f8      	ldr	r0, [r7, #12]
 8006110:	f000 f80e 	bl	8006130 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006114:	69f8      	ldr	r0, [r7, #28]
 8006116:	f000 f88b 	bl	8006230 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800611a:	2301      	movs	r3, #1
 800611c:	61bb      	str	r3, [r7, #24]
 800611e:	e002      	b.n	8006126 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006120:	f04f 33ff 	mov.w	r3, #4294967295
 8006124:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006126:	69bb      	ldr	r3, [r7, #24]
	}
 8006128:	4618      	mov	r0, r3
 800612a:	3720      	adds	r7, #32
 800612c:	46bd      	mov	sp, r7
 800612e:	bd80      	pop	{r7, pc}

08006130 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b088      	sub	sp, #32
 8006134:	af00      	add	r7, sp, #0
 8006136:	60f8      	str	r0, [r7, #12]
 8006138:	60b9      	str	r1, [r7, #8]
 800613a:	607a      	str	r2, [r7, #4]
 800613c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800613e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006140:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006148:	3b01      	subs	r3, #1
 800614a:	009b      	lsls	r3, r3, #2
 800614c:	4413      	add	r3, r2
 800614e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8006150:	69bb      	ldr	r3, [r7, #24]
 8006152:	f023 0307 	bic.w	r3, r3, #7
 8006156:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006158:	69bb      	ldr	r3, [r7, #24]
 800615a:	f003 0307 	and.w	r3, r3, #7
 800615e:	2b00      	cmp	r3, #0
 8006160:	d00a      	beq.n	8006178 <prvInitialiseNewTask+0x48>
	__asm volatile
 8006162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006166:	f383 8811 	msr	BASEPRI, r3
 800616a:	f3bf 8f6f 	isb	sy
 800616e:	f3bf 8f4f 	dsb	sy
 8006172:	617b      	str	r3, [r7, #20]
}
 8006174:	bf00      	nop
 8006176:	e7fe      	b.n	8006176 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006178:	2300      	movs	r3, #0
 800617a:	61fb      	str	r3, [r7, #28]
 800617c:	e012      	b.n	80061a4 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800617e:	68ba      	ldr	r2, [r7, #8]
 8006180:	69fb      	ldr	r3, [r7, #28]
 8006182:	4413      	add	r3, r2
 8006184:	7819      	ldrb	r1, [r3, #0]
 8006186:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006188:	69fb      	ldr	r3, [r7, #28]
 800618a:	4413      	add	r3, r2
 800618c:	3334      	adds	r3, #52	; 0x34
 800618e:	460a      	mov	r2, r1
 8006190:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8006192:	68ba      	ldr	r2, [r7, #8]
 8006194:	69fb      	ldr	r3, [r7, #28]
 8006196:	4413      	add	r3, r2
 8006198:	781b      	ldrb	r3, [r3, #0]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d006      	beq.n	80061ac <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800619e:	69fb      	ldr	r3, [r7, #28]
 80061a0:	3301      	adds	r3, #1
 80061a2:	61fb      	str	r3, [r7, #28]
 80061a4:	69fb      	ldr	r3, [r7, #28]
 80061a6:	2b0f      	cmp	r3, #15
 80061a8:	d9e9      	bls.n	800617e <prvInitialiseNewTask+0x4e>
 80061aa:	e000      	b.n	80061ae <prvInitialiseNewTask+0x7e>
		{
			break;
 80061ac:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80061ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061b0:	2200      	movs	r2, #0
 80061b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80061b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061b8:	2b06      	cmp	r3, #6
 80061ba:	d901      	bls.n	80061c0 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80061bc:	2306      	movs	r3, #6
 80061be:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80061c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80061c4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80061c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80061ca:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80061cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ce:	2200      	movs	r2, #0
 80061d0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80061d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061d4:	3304      	adds	r3, #4
 80061d6:	4618      	mov	r0, r3
 80061d8:	f7ff fe75 	bl	8005ec6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80061dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061de:	3318      	adds	r3, #24
 80061e0:	4618      	mov	r0, r3
 80061e2:	f7ff fe70 	bl	8005ec6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80061e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061ea:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ee:	f1c3 0207 	rsb	r2, r3, #7
 80061f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061f4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80061f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061fa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80061fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061fe:	2200      	movs	r2, #0
 8006200:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006204:	2200      	movs	r2, #0
 8006206:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800620a:	683a      	ldr	r2, [r7, #0]
 800620c:	68f9      	ldr	r1, [r7, #12]
 800620e:	69b8      	ldr	r0, [r7, #24]
 8006210:	f000 fc12 	bl	8006a38 <pxPortInitialiseStack>
 8006214:	4602      	mov	r2, r0
 8006216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006218:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800621a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800621c:	2b00      	cmp	r3, #0
 800621e:	d002      	beq.n	8006226 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006222:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006224:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006226:	bf00      	nop
 8006228:	3720      	adds	r7, #32
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}
	...

08006230 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b082      	sub	sp, #8
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006238:	f000 fd2c 	bl	8006c94 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800623c:	4b2a      	ldr	r3, [pc, #168]	; (80062e8 <prvAddNewTaskToReadyList+0xb8>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	3301      	adds	r3, #1
 8006242:	4a29      	ldr	r2, [pc, #164]	; (80062e8 <prvAddNewTaskToReadyList+0xb8>)
 8006244:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006246:	4b29      	ldr	r3, [pc, #164]	; (80062ec <prvAddNewTaskToReadyList+0xbc>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d109      	bne.n	8006262 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800624e:	4a27      	ldr	r2, [pc, #156]	; (80062ec <prvAddNewTaskToReadyList+0xbc>)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006254:	4b24      	ldr	r3, [pc, #144]	; (80062e8 <prvAddNewTaskToReadyList+0xb8>)
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	2b01      	cmp	r3, #1
 800625a:	d110      	bne.n	800627e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800625c:	f000 fac2 	bl	80067e4 <prvInitialiseTaskLists>
 8006260:	e00d      	b.n	800627e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006262:	4b23      	ldr	r3, [pc, #140]	; (80062f0 <prvAddNewTaskToReadyList+0xc0>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d109      	bne.n	800627e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800626a:	4b20      	ldr	r3, [pc, #128]	; (80062ec <prvAddNewTaskToReadyList+0xbc>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006274:	429a      	cmp	r2, r3
 8006276:	d802      	bhi.n	800627e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006278:	4a1c      	ldr	r2, [pc, #112]	; (80062ec <prvAddNewTaskToReadyList+0xbc>)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800627e:	4b1d      	ldr	r3, [pc, #116]	; (80062f4 <prvAddNewTaskToReadyList+0xc4>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	3301      	adds	r3, #1
 8006284:	4a1b      	ldr	r2, [pc, #108]	; (80062f4 <prvAddNewTaskToReadyList+0xc4>)
 8006286:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800628c:	2201      	movs	r2, #1
 800628e:	409a      	lsls	r2, r3
 8006290:	4b19      	ldr	r3, [pc, #100]	; (80062f8 <prvAddNewTaskToReadyList+0xc8>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4313      	orrs	r3, r2
 8006296:	4a18      	ldr	r2, [pc, #96]	; (80062f8 <prvAddNewTaskToReadyList+0xc8>)
 8006298:	6013      	str	r3, [r2, #0]
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800629e:	4613      	mov	r3, r2
 80062a0:	009b      	lsls	r3, r3, #2
 80062a2:	4413      	add	r3, r2
 80062a4:	009b      	lsls	r3, r3, #2
 80062a6:	4a15      	ldr	r2, [pc, #84]	; (80062fc <prvAddNewTaskToReadyList+0xcc>)
 80062a8:	441a      	add	r2, r3
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	3304      	adds	r3, #4
 80062ae:	4619      	mov	r1, r3
 80062b0:	4610      	mov	r0, r2
 80062b2:	f7ff fe15 	bl	8005ee0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80062b6:	f000 fd1d 	bl	8006cf4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80062ba:	4b0d      	ldr	r3, [pc, #52]	; (80062f0 <prvAddNewTaskToReadyList+0xc0>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d00e      	beq.n	80062e0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80062c2:	4b0a      	ldr	r3, [pc, #40]	; (80062ec <prvAddNewTaskToReadyList+0xbc>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062cc:	429a      	cmp	r2, r3
 80062ce:	d207      	bcs.n	80062e0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80062d0:	4b0b      	ldr	r3, [pc, #44]	; (8006300 <prvAddNewTaskToReadyList+0xd0>)
 80062d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062d6:	601a      	str	r2, [r3, #0]
 80062d8:	f3bf 8f4f 	dsb	sy
 80062dc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80062e0:	bf00      	nop
 80062e2:	3708      	adds	r7, #8
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bd80      	pop	{r7, pc}
 80062e8:	200001b8 	.word	0x200001b8
 80062ec:	200000b8 	.word	0x200000b8
 80062f0:	200001c4 	.word	0x200001c4
 80062f4:	200001d4 	.word	0x200001d4
 80062f8:	200001c0 	.word	0x200001c0
 80062fc:	200000bc 	.word	0x200000bc
 8006300:	e000ed04 	.word	0xe000ed04

08006304 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006304:	b580      	push	{r7, lr}
 8006306:	b084      	sub	sp, #16
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800630c:	2300      	movs	r3, #0
 800630e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d017      	beq.n	8006346 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006316:	4b13      	ldr	r3, [pc, #76]	; (8006364 <vTaskDelay+0x60>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d00a      	beq.n	8006334 <vTaskDelay+0x30>
	__asm volatile
 800631e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006322:	f383 8811 	msr	BASEPRI, r3
 8006326:	f3bf 8f6f 	isb	sy
 800632a:	f3bf 8f4f 	dsb	sy
 800632e:	60bb      	str	r3, [r7, #8]
}
 8006330:	bf00      	nop
 8006332:	e7fe      	b.n	8006332 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006334:	f000 f87a 	bl	800642c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006338:	2100      	movs	r1, #0
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f000 fb16 	bl	800696c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006340:	f000 f882 	bl	8006448 <xTaskResumeAll>
 8006344:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d107      	bne.n	800635c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800634c:	4b06      	ldr	r3, [pc, #24]	; (8006368 <vTaskDelay+0x64>)
 800634e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006352:	601a      	str	r2, [r3, #0]
 8006354:	f3bf 8f4f 	dsb	sy
 8006358:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800635c:	bf00      	nop
 800635e:	3710      	adds	r7, #16
 8006360:	46bd      	mov	sp, r7
 8006362:	bd80      	pop	{r7, pc}
 8006364:	200001e0 	.word	0x200001e0
 8006368:	e000ed04 	.word	0xe000ed04

0800636c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b08a      	sub	sp, #40	; 0x28
 8006370:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006372:	2300      	movs	r3, #0
 8006374:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006376:	2300      	movs	r3, #0
 8006378:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800637a:	463a      	mov	r2, r7
 800637c:	1d39      	adds	r1, r7, #4
 800637e:	f107 0308 	add.w	r3, r7, #8
 8006382:	4618      	mov	r0, r3
 8006384:	f000 ff80 	bl	8007288 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006388:	6839      	ldr	r1, [r7, #0]
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	68ba      	ldr	r2, [r7, #8]
 800638e:	9202      	str	r2, [sp, #8]
 8006390:	9301      	str	r3, [sp, #4]
 8006392:	2300      	movs	r3, #0
 8006394:	9300      	str	r3, [sp, #0]
 8006396:	2300      	movs	r3, #0
 8006398:	460a      	mov	r2, r1
 800639a:	491e      	ldr	r1, [pc, #120]	; (8006414 <vTaskStartScheduler+0xa8>)
 800639c:	481e      	ldr	r0, [pc, #120]	; (8006418 <vTaskStartScheduler+0xac>)
 800639e:	f7ff fe26 	bl	8005fee <xTaskCreateStatic>
 80063a2:	4603      	mov	r3, r0
 80063a4:	4a1d      	ldr	r2, [pc, #116]	; (800641c <vTaskStartScheduler+0xb0>)
 80063a6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80063a8:	4b1c      	ldr	r3, [pc, #112]	; (800641c <vTaskStartScheduler+0xb0>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d002      	beq.n	80063b6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80063b0:	2301      	movs	r3, #1
 80063b2:	617b      	str	r3, [r7, #20]
 80063b4:	e001      	b.n	80063ba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80063b6:	2300      	movs	r3, #0
 80063b8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	2b01      	cmp	r3, #1
 80063be:	d116      	bne.n	80063ee <vTaskStartScheduler+0x82>
	__asm volatile
 80063c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063c4:	f383 8811 	msr	BASEPRI, r3
 80063c8:	f3bf 8f6f 	isb	sy
 80063cc:	f3bf 8f4f 	dsb	sy
 80063d0:	613b      	str	r3, [r7, #16]
}
 80063d2:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80063d4:	4b12      	ldr	r3, [pc, #72]	; (8006420 <vTaskStartScheduler+0xb4>)
 80063d6:	f04f 32ff 	mov.w	r2, #4294967295
 80063da:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80063dc:	4b11      	ldr	r3, [pc, #68]	; (8006424 <vTaskStartScheduler+0xb8>)
 80063de:	2201      	movs	r2, #1
 80063e0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80063e2:	4b11      	ldr	r3, [pc, #68]	; (8006428 <vTaskStartScheduler+0xbc>)
 80063e4:	2200      	movs	r2, #0
 80063e6:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80063e8:	f000 fbb2 	bl	8006b50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80063ec:	e00e      	b.n	800640c <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063f4:	d10a      	bne.n	800640c <vTaskStartScheduler+0xa0>
	__asm volatile
 80063f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063fa:	f383 8811 	msr	BASEPRI, r3
 80063fe:	f3bf 8f6f 	isb	sy
 8006402:	f3bf 8f4f 	dsb	sy
 8006406:	60fb      	str	r3, [r7, #12]
}
 8006408:	bf00      	nop
 800640a:	e7fe      	b.n	800640a <vTaskStartScheduler+0x9e>
}
 800640c:	bf00      	nop
 800640e:	3718      	adds	r7, #24
 8006410:	46bd      	mov	sp, r7
 8006412:	bd80      	pop	{r7, pc}
 8006414:	0800ad2c 	.word	0x0800ad2c
 8006418:	080067b5 	.word	0x080067b5
 800641c:	200001dc 	.word	0x200001dc
 8006420:	200001d8 	.word	0x200001d8
 8006424:	200001c4 	.word	0x200001c4
 8006428:	200001bc 	.word	0x200001bc

0800642c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800642c:	b480      	push	{r7}
 800642e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006430:	4b04      	ldr	r3, [pc, #16]	; (8006444 <vTaskSuspendAll+0x18>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	3301      	adds	r3, #1
 8006436:	4a03      	ldr	r2, [pc, #12]	; (8006444 <vTaskSuspendAll+0x18>)
 8006438:	6013      	str	r3, [r2, #0]
}
 800643a:	bf00      	nop
 800643c:	46bd      	mov	sp, r7
 800643e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006442:	4770      	bx	lr
 8006444:	200001e0 	.word	0x200001e0

08006448 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b084      	sub	sp, #16
 800644c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800644e:	2300      	movs	r3, #0
 8006450:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006452:	2300      	movs	r3, #0
 8006454:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006456:	4b41      	ldr	r3, [pc, #260]	; (800655c <xTaskResumeAll+0x114>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d10a      	bne.n	8006474 <xTaskResumeAll+0x2c>
	__asm volatile
 800645e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006462:	f383 8811 	msr	BASEPRI, r3
 8006466:	f3bf 8f6f 	isb	sy
 800646a:	f3bf 8f4f 	dsb	sy
 800646e:	603b      	str	r3, [r7, #0]
}
 8006470:	bf00      	nop
 8006472:	e7fe      	b.n	8006472 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006474:	f000 fc0e 	bl	8006c94 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006478:	4b38      	ldr	r3, [pc, #224]	; (800655c <xTaskResumeAll+0x114>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	3b01      	subs	r3, #1
 800647e:	4a37      	ldr	r2, [pc, #220]	; (800655c <xTaskResumeAll+0x114>)
 8006480:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006482:	4b36      	ldr	r3, [pc, #216]	; (800655c <xTaskResumeAll+0x114>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d161      	bne.n	800654e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800648a:	4b35      	ldr	r3, [pc, #212]	; (8006560 <xTaskResumeAll+0x118>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d05d      	beq.n	800654e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006492:	e02e      	b.n	80064f2 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006494:	4b33      	ldr	r3, [pc, #204]	; (8006564 <xTaskResumeAll+0x11c>)
 8006496:	68db      	ldr	r3, [r3, #12]
 8006498:	68db      	ldr	r3, [r3, #12]
 800649a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	3318      	adds	r3, #24
 80064a0:	4618      	mov	r0, r3
 80064a2:	f7ff fd7a 	bl	8005f9a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	3304      	adds	r3, #4
 80064aa:	4618      	mov	r0, r3
 80064ac:	f7ff fd75 	bl	8005f9a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064b4:	2201      	movs	r2, #1
 80064b6:	409a      	lsls	r2, r3
 80064b8:	4b2b      	ldr	r3, [pc, #172]	; (8006568 <xTaskResumeAll+0x120>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4313      	orrs	r3, r2
 80064be:	4a2a      	ldr	r2, [pc, #168]	; (8006568 <xTaskResumeAll+0x120>)
 80064c0:	6013      	str	r3, [r2, #0]
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064c6:	4613      	mov	r3, r2
 80064c8:	009b      	lsls	r3, r3, #2
 80064ca:	4413      	add	r3, r2
 80064cc:	009b      	lsls	r3, r3, #2
 80064ce:	4a27      	ldr	r2, [pc, #156]	; (800656c <xTaskResumeAll+0x124>)
 80064d0:	441a      	add	r2, r3
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	3304      	adds	r3, #4
 80064d6:	4619      	mov	r1, r3
 80064d8:	4610      	mov	r0, r2
 80064da:	f7ff fd01 	bl	8005ee0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064e2:	4b23      	ldr	r3, [pc, #140]	; (8006570 <xTaskResumeAll+0x128>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064e8:	429a      	cmp	r2, r3
 80064ea:	d302      	bcc.n	80064f2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80064ec:	4b21      	ldr	r3, [pc, #132]	; (8006574 <xTaskResumeAll+0x12c>)
 80064ee:	2201      	movs	r2, #1
 80064f0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80064f2:	4b1c      	ldr	r3, [pc, #112]	; (8006564 <xTaskResumeAll+0x11c>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d1cc      	bne.n	8006494 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d001      	beq.n	8006504 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006500:	f000 fa0e 	bl	8006920 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006504:	4b1c      	ldr	r3, [pc, #112]	; (8006578 <xTaskResumeAll+0x130>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d010      	beq.n	8006532 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006510:	f000 f836 	bl	8006580 <xTaskIncrementTick>
 8006514:	4603      	mov	r3, r0
 8006516:	2b00      	cmp	r3, #0
 8006518:	d002      	beq.n	8006520 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800651a:	4b16      	ldr	r3, [pc, #88]	; (8006574 <xTaskResumeAll+0x12c>)
 800651c:	2201      	movs	r2, #1
 800651e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	3b01      	subs	r3, #1
 8006524:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d1f1      	bne.n	8006510 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800652c:	4b12      	ldr	r3, [pc, #72]	; (8006578 <xTaskResumeAll+0x130>)
 800652e:	2200      	movs	r2, #0
 8006530:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006532:	4b10      	ldr	r3, [pc, #64]	; (8006574 <xTaskResumeAll+0x12c>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d009      	beq.n	800654e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800653a:	2301      	movs	r3, #1
 800653c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800653e:	4b0f      	ldr	r3, [pc, #60]	; (800657c <xTaskResumeAll+0x134>)
 8006540:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006544:	601a      	str	r2, [r3, #0]
 8006546:	f3bf 8f4f 	dsb	sy
 800654a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800654e:	f000 fbd1 	bl	8006cf4 <vPortExitCritical>

	return xAlreadyYielded;
 8006552:	68bb      	ldr	r3, [r7, #8]
}
 8006554:	4618      	mov	r0, r3
 8006556:	3710      	adds	r7, #16
 8006558:	46bd      	mov	sp, r7
 800655a:	bd80      	pop	{r7, pc}
 800655c:	200001e0 	.word	0x200001e0
 8006560:	200001b8 	.word	0x200001b8
 8006564:	20000178 	.word	0x20000178
 8006568:	200001c0 	.word	0x200001c0
 800656c:	200000bc 	.word	0x200000bc
 8006570:	200000b8 	.word	0x200000b8
 8006574:	200001cc 	.word	0x200001cc
 8006578:	200001c8 	.word	0x200001c8
 800657c:	e000ed04 	.word	0xe000ed04

08006580 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b086      	sub	sp, #24
 8006584:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006586:	2300      	movs	r3, #0
 8006588:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800658a:	4b51      	ldr	r3, [pc, #324]	; (80066d0 <xTaskIncrementTick+0x150>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	2b00      	cmp	r3, #0
 8006590:	f040 808d 	bne.w	80066ae <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006594:	4b4f      	ldr	r3, [pc, #316]	; (80066d4 <xTaskIncrementTick+0x154>)
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	3301      	adds	r3, #1
 800659a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800659c:	4a4d      	ldr	r2, [pc, #308]	; (80066d4 <xTaskIncrementTick+0x154>)
 800659e:	693b      	ldr	r3, [r7, #16]
 80065a0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d120      	bne.n	80065ea <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80065a8:	4b4b      	ldr	r3, [pc, #300]	; (80066d8 <xTaskIncrementTick+0x158>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d00a      	beq.n	80065c8 <xTaskIncrementTick+0x48>
	__asm volatile
 80065b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065b6:	f383 8811 	msr	BASEPRI, r3
 80065ba:	f3bf 8f6f 	isb	sy
 80065be:	f3bf 8f4f 	dsb	sy
 80065c2:	603b      	str	r3, [r7, #0]
}
 80065c4:	bf00      	nop
 80065c6:	e7fe      	b.n	80065c6 <xTaskIncrementTick+0x46>
 80065c8:	4b43      	ldr	r3, [pc, #268]	; (80066d8 <xTaskIncrementTick+0x158>)
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	60fb      	str	r3, [r7, #12]
 80065ce:	4b43      	ldr	r3, [pc, #268]	; (80066dc <xTaskIncrementTick+0x15c>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4a41      	ldr	r2, [pc, #260]	; (80066d8 <xTaskIncrementTick+0x158>)
 80065d4:	6013      	str	r3, [r2, #0]
 80065d6:	4a41      	ldr	r2, [pc, #260]	; (80066dc <xTaskIncrementTick+0x15c>)
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	6013      	str	r3, [r2, #0]
 80065dc:	4b40      	ldr	r3, [pc, #256]	; (80066e0 <xTaskIncrementTick+0x160>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	3301      	adds	r3, #1
 80065e2:	4a3f      	ldr	r2, [pc, #252]	; (80066e0 <xTaskIncrementTick+0x160>)
 80065e4:	6013      	str	r3, [r2, #0]
 80065e6:	f000 f99b 	bl	8006920 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80065ea:	4b3e      	ldr	r3, [pc, #248]	; (80066e4 <xTaskIncrementTick+0x164>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	693a      	ldr	r2, [r7, #16]
 80065f0:	429a      	cmp	r2, r3
 80065f2:	d34d      	bcc.n	8006690 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80065f4:	4b38      	ldr	r3, [pc, #224]	; (80066d8 <xTaskIncrementTick+0x158>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d101      	bne.n	8006602 <xTaskIncrementTick+0x82>
 80065fe:	2301      	movs	r3, #1
 8006600:	e000      	b.n	8006604 <xTaskIncrementTick+0x84>
 8006602:	2300      	movs	r3, #0
 8006604:	2b00      	cmp	r3, #0
 8006606:	d004      	beq.n	8006612 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006608:	4b36      	ldr	r3, [pc, #216]	; (80066e4 <xTaskIncrementTick+0x164>)
 800660a:	f04f 32ff 	mov.w	r2, #4294967295
 800660e:	601a      	str	r2, [r3, #0]
					break;
 8006610:	e03e      	b.n	8006690 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006612:	4b31      	ldr	r3, [pc, #196]	; (80066d8 <xTaskIncrementTick+0x158>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	68db      	ldr	r3, [r3, #12]
 8006618:	68db      	ldr	r3, [r3, #12]
 800661a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	685b      	ldr	r3, [r3, #4]
 8006620:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006622:	693a      	ldr	r2, [r7, #16]
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	429a      	cmp	r2, r3
 8006628:	d203      	bcs.n	8006632 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800662a:	4a2e      	ldr	r2, [pc, #184]	; (80066e4 <xTaskIncrementTick+0x164>)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6013      	str	r3, [r2, #0]
						break;
 8006630:	e02e      	b.n	8006690 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	3304      	adds	r3, #4
 8006636:	4618      	mov	r0, r3
 8006638:	f7ff fcaf 	bl	8005f9a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006640:	2b00      	cmp	r3, #0
 8006642:	d004      	beq.n	800664e <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	3318      	adds	r3, #24
 8006648:	4618      	mov	r0, r3
 800664a:	f7ff fca6 	bl	8005f9a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006652:	2201      	movs	r2, #1
 8006654:	409a      	lsls	r2, r3
 8006656:	4b24      	ldr	r3, [pc, #144]	; (80066e8 <xTaskIncrementTick+0x168>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4313      	orrs	r3, r2
 800665c:	4a22      	ldr	r2, [pc, #136]	; (80066e8 <xTaskIncrementTick+0x168>)
 800665e:	6013      	str	r3, [r2, #0]
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006664:	4613      	mov	r3, r2
 8006666:	009b      	lsls	r3, r3, #2
 8006668:	4413      	add	r3, r2
 800666a:	009b      	lsls	r3, r3, #2
 800666c:	4a1f      	ldr	r2, [pc, #124]	; (80066ec <xTaskIncrementTick+0x16c>)
 800666e:	441a      	add	r2, r3
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	3304      	adds	r3, #4
 8006674:	4619      	mov	r1, r3
 8006676:	4610      	mov	r0, r2
 8006678:	f7ff fc32 	bl	8005ee0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006680:	4b1b      	ldr	r3, [pc, #108]	; (80066f0 <xTaskIncrementTick+0x170>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006686:	429a      	cmp	r2, r3
 8006688:	d3b4      	bcc.n	80065f4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800668a:	2301      	movs	r3, #1
 800668c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800668e:	e7b1      	b.n	80065f4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006690:	4b17      	ldr	r3, [pc, #92]	; (80066f0 <xTaskIncrementTick+0x170>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006696:	4915      	ldr	r1, [pc, #84]	; (80066ec <xTaskIncrementTick+0x16c>)
 8006698:	4613      	mov	r3, r2
 800669a:	009b      	lsls	r3, r3, #2
 800669c:	4413      	add	r3, r2
 800669e:	009b      	lsls	r3, r3, #2
 80066a0:	440b      	add	r3, r1
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	2b01      	cmp	r3, #1
 80066a6:	d907      	bls.n	80066b8 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 80066a8:	2301      	movs	r3, #1
 80066aa:	617b      	str	r3, [r7, #20]
 80066ac:	e004      	b.n	80066b8 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80066ae:	4b11      	ldr	r3, [pc, #68]	; (80066f4 <xTaskIncrementTick+0x174>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	3301      	adds	r3, #1
 80066b4:	4a0f      	ldr	r2, [pc, #60]	; (80066f4 <xTaskIncrementTick+0x174>)
 80066b6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80066b8:	4b0f      	ldr	r3, [pc, #60]	; (80066f8 <xTaskIncrementTick+0x178>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d001      	beq.n	80066c4 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 80066c0:	2301      	movs	r3, #1
 80066c2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80066c4:	697b      	ldr	r3, [r7, #20]
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	3718      	adds	r7, #24
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}
 80066ce:	bf00      	nop
 80066d0:	200001e0 	.word	0x200001e0
 80066d4:	200001bc 	.word	0x200001bc
 80066d8:	20000170 	.word	0x20000170
 80066dc:	20000174 	.word	0x20000174
 80066e0:	200001d0 	.word	0x200001d0
 80066e4:	200001d8 	.word	0x200001d8
 80066e8:	200001c0 	.word	0x200001c0
 80066ec:	200000bc 	.word	0x200000bc
 80066f0:	200000b8 	.word	0x200000b8
 80066f4:	200001c8 	.word	0x200001c8
 80066f8:	200001cc 	.word	0x200001cc

080066fc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80066fc:	b480      	push	{r7}
 80066fe:	b087      	sub	sp, #28
 8006700:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006702:	4b27      	ldr	r3, [pc, #156]	; (80067a0 <vTaskSwitchContext+0xa4>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d003      	beq.n	8006712 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800670a:	4b26      	ldr	r3, [pc, #152]	; (80067a4 <vTaskSwitchContext+0xa8>)
 800670c:	2201      	movs	r2, #1
 800670e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006710:	e03f      	b.n	8006792 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8006712:	4b24      	ldr	r3, [pc, #144]	; (80067a4 <vTaskSwitchContext+0xa8>)
 8006714:	2200      	movs	r2, #0
 8006716:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006718:	4b23      	ldr	r3, [pc, #140]	; (80067a8 <vTaskSwitchContext+0xac>)
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	fab3 f383 	clz	r3, r3
 8006724:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006726:	7afb      	ldrb	r3, [r7, #11]
 8006728:	f1c3 031f 	rsb	r3, r3, #31
 800672c:	617b      	str	r3, [r7, #20]
 800672e:	491f      	ldr	r1, [pc, #124]	; (80067ac <vTaskSwitchContext+0xb0>)
 8006730:	697a      	ldr	r2, [r7, #20]
 8006732:	4613      	mov	r3, r2
 8006734:	009b      	lsls	r3, r3, #2
 8006736:	4413      	add	r3, r2
 8006738:	009b      	lsls	r3, r3, #2
 800673a:	440b      	add	r3, r1
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d10a      	bne.n	8006758 <vTaskSwitchContext+0x5c>
	__asm volatile
 8006742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006746:	f383 8811 	msr	BASEPRI, r3
 800674a:	f3bf 8f6f 	isb	sy
 800674e:	f3bf 8f4f 	dsb	sy
 8006752:	607b      	str	r3, [r7, #4]
}
 8006754:	bf00      	nop
 8006756:	e7fe      	b.n	8006756 <vTaskSwitchContext+0x5a>
 8006758:	697a      	ldr	r2, [r7, #20]
 800675a:	4613      	mov	r3, r2
 800675c:	009b      	lsls	r3, r3, #2
 800675e:	4413      	add	r3, r2
 8006760:	009b      	lsls	r3, r3, #2
 8006762:	4a12      	ldr	r2, [pc, #72]	; (80067ac <vTaskSwitchContext+0xb0>)
 8006764:	4413      	add	r3, r2
 8006766:	613b      	str	r3, [r7, #16]
 8006768:	693b      	ldr	r3, [r7, #16]
 800676a:	685b      	ldr	r3, [r3, #4]
 800676c:	685a      	ldr	r2, [r3, #4]
 800676e:	693b      	ldr	r3, [r7, #16]
 8006770:	605a      	str	r2, [r3, #4]
 8006772:	693b      	ldr	r3, [r7, #16]
 8006774:	685a      	ldr	r2, [r3, #4]
 8006776:	693b      	ldr	r3, [r7, #16]
 8006778:	3308      	adds	r3, #8
 800677a:	429a      	cmp	r2, r3
 800677c:	d104      	bne.n	8006788 <vTaskSwitchContext+0x8c>
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	685b      	ldr	r3, [r3, #4]
 8006782:	685a      	ldr	r2, [r3, #4]
 8006784:	693b      	ldr	r3, [r7, #16]
 8006786:	605a      	str	r2, [r3, #4]
 8006788:	693b      	ldr	r3, [r7, #16]
 800678a:	685b      	ldr	r3, [r3, #4]
 800678c:	68db      	ldr	r3, [r3, #12]
 800678e:	4a08      	ldr	r2, [pc, #32]	; (80067b0 <vTaskSwitchContext+0xb4>)
 8006790:	6013      	str	r3, [r2, #0]
}
 8006792:	bf00      	nop
 8006794:	371c      	adds	r7, #28
 8006796:	46bd      	mov	sp, r7
 8006798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679c:	4770      	bx	lr
 800679e:	bf00      	nop
 80067a0:	200001e0 	.word	0x200001e0
 80067a4:	200001cc 	.word	0x200001cc
 80067a8:	200001c0 	.word	0x200001c0
 80067ac:	200000bc 	.word	0x200000bc
 80067b0:	200000b8 	.word	0x200000b8

080067b4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b082      	sub	sp, #8
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80067bc:	f000 f852 	bl	8006864 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80067c0:	4b06      	ldr	r3, [pc, #24]	; (80067dc <prvIdleTask+0x28>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	2b01      	cmp	r3, #1
 80067c6:	d9f9      	bls.n	80067bc <prvIdleTask+0x8>
			{
				taskYIELD();
 80067c8:	4b05      	ldr	r3, [pc, #20]	; (80067e0 <prvIdleTask+0x2c>)
 80067ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067ce:	601a      	str	r2, [r3, #0]
 80067d0:	f3bf 8f4f 	dsb	sy
 80067d4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80067d8:	e7f0      	b.n	80067bc <prvIdleTask+0x8>
 80067da:	bf00      	nop
 80067dc:	200000bc 	.word	0x200000bc
 80067e0:	e000ed04 	.word	0xe000ed04

080067e4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b082      	sub	sp, #8
 80067e8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80067ea:	2300      	movs	r3, #0
 80067ec:	607b      	str	r3, [r7, #4]
 80067ee:	e00c      	b.n	800680a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80067f0:	687a      	ldr	r2, [r7, #4]
 80067f2:	4613      	mov	r3, r2
 80067f4:	009b      	lsls	r3, r3, #2
 80067f6:	4413      	add	r3, r2
 80067f8:	009b      	lsls	r3, r3, #2
 80067fa:	4a12      	ldr	r2, [pc, #72]	; (8006844 <prvInitialiseTaskLists+0x60>)
 80067fc:	4413      	add	r3, r2
 80067fe:	4618      	mov	r0, r3
 8006800:	f7ff fb41 	bl	8005e86 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	3301      	adds	r3, #1
 8006808:	607b      	str	r3, [r7, #4]
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2b06      	cmp	r3, #6
 800680e:	d9ef      	bls.n	80067f0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006810:	480d      	ldr	r0, [pc, #52]	; (8006848 <prvInitialiseTaskLists+0x64>)
 8006812:	f7ff fb38 	bl	8005e86 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006816:	480d      	ldr	r0, [pc, #52]	; (800684c <prvInitialiseTaskLists+0x68>)
 8006818:	f7ff fb35 	bl	8005e86 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800681c:	480c      	ldr	r0, [pc, #48]	; (8006850 <prvInitialiseTaskLists+0x6c>)
 800681e:	f7ff fb32 	bl	8005e86 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006822:	480c      	ldr	r0, [pc, #48]	; (8006854 <prvInitialiseTaskLists+0x70>)
 8006824:	f7ff fb2f 	bl	8005e86 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006828:	480b      	ldr	r0, [pc, #44]	; (8006858 <prvInitialiseTaskLists+0x74>)
 800682a:	f7ff fb2c 	bl	8005e86 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800682e:	4b0b      	ldr	r3, [pc, #44]	; (800685c <prvInitialiseTaskLists+0x78>)
 8006830:	4a05      	ldr	r2, [pc, #20]	; (8006848 <prvInitialiseTaskLists+0x64>)
 8006832:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006834:	4b0a      	ldr	r3, [pc, #40]	; (8006860 <prvInitialiseTaskLists+0x7c>)
 8006836:	4a05      	ldr	r2, [pc, #20]	; (800684c <prvInitialiseTaskLists+0x68>)
 8006838:	601a      	str	r2, [r3, #0]
}
 800683a:	bf00      	nop
 800683c:	3708      	adds	r7, #8
 800683e:	46bd      	mov	sp, r7
 8006840:	bd80      	pop	{r7, pc}
 8006842:	bf00      	nop
 8006844:	200000bc 	.word	0x200000bc
 8006848:	20000148 	.word	0x20000148
 800684c:	2000015c 	.word	0x2000015c
 8006850:	20000178 	.word	0x20000178
 8006854:	2000018c 	.word	0x2000018c
 8006858:	200001a4 	.word	0x200001a4
 800685c:	20000170 	.word	0x20000170
 8006860:	20000174 	.word	0x20000174

08006864 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b082      	sub	sp, #8
 8006868:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800686a:	e019      	b.n	80068a0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800686c:	f000 fa12 	bl	8006c94 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006870:	4b10      	ldr	r3, [pc, #64]	; (80068b4 <prvCheckTasksWaitingTermination+0x50>)
 8006872:	68db      	ldr	r3, [r3, #12]
 8006874:	68db      	ldr	r3, [r3, #12]
 8006876:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	3304      	adds	r3, #4
 800687c:	4618      	mov	r0, r3
 800687e:	f7ff fb8c 	bl	8005f9a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006882:	4b0d      	ldr	r3, [pc, #52]	; (80068b8 <prvCheckTasksWaitingTermination+0x54>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	3b01      	subs	r3, #1
 8006888:	4a0b      	ldr	r2, [pc, #44]	; (80068b8 <prvCheckTasksWaitingTermination+0x54>)
 800688a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800688c:	4b0b      	ldr	r3, [pc, #44]	; (80068bc <prvCheckTasksWaitingTermination+0x58>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	3b01      	subs	r3, #1
 8006892:	4a0a      	ldr	r2, [pc, #40]	; (80068bc <prvCheckTasksWaitingTermination+0x58>)
 8006894:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006896:	f000 fa2d 	bl	8006cf4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f000 f810 	bl	80068c0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80068a0:	4b06      	ldr	r3, [pc, #24]	; (80068bc <prvCheckTasksWaitingTermination+0x58>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d1e1      	bne.n	800686c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80068a8:	bf00      	nop
 80068aa:	bf00      	nop
 80068ac:	3708      	adds	r7, #8
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}
 80068b2:	bf00      	nop
 80068b4:	2000018c 	.word	0x2000018c
 80068b8:	200001b8 	.word	0x200001b8
 80068bc:	200001a0 	.word	0x200001a0

080068c0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b084      	sub	sp, #16
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d108      	bne.n	80068e4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068d6:	4618      	mov	r0, r3
 80068d8:	f000 fb82 	bl	8006fe0 <vPortFree>
				vPortFree( pxTCB );
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f000 fb7f 	bl	8006fe0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80068e2:	e018      	b.n	8006916 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80068ea:	2b01      	cmp	r3, #1
 80068ec:	d103      	bne.n	80068f6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	f000 fb76 	bl	8006fe0 <vPortFree>
	}
 80068f4:	e00f      	b.n	8006916 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80068fc:	2b02      	cmp	r3, #2
 80068fe:	d00a      	beq.n	8006916 <prvDeleteTCB+0x56>
	__asm volatile
 8006900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006904:	f383 8811 	msr	BASEPRI, r3
 8006908:	f3bf 8f6f 	isb	sy
 800690c:	f3bf 8f4f 	dsb	sy
 8006910:	60fb      	str	r3, [r7, #12]
}
 8006912:	bf00      	nop
 8006914:	e7fe      	b.n	8006914 <prvDeleteTCB+0x54>
	}
 8006916:	bf00      	nop
 8006918:	3710      	adds	r7, #16
 800691a:	46bd      	mov	sp, r7
 800691c:	bd80      	pop	{r7, pc}
	...

08006920 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006920:	b480      	push	{r7}
 8006922:	b083      	sub	sp, #12
 8006924:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006926:	4b0f      	ldr	r3, [pc, #60]	; (8006964 <prvResetNextTaskUnblockTime+0x44>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d101      	bne.n	8006934 <prvResetNextTaskUnblockTime+0x14>
 8006930:	2301      	movs	r3, #1
 8006932:	e000      	b.n	8006936 <prvResetNextTaskUnblockTime+0x16>
 8006934:	2300      	movs	r3, #0
 8006936:	2b00      	cmp	r3, #0
 8006938:	d004      	beq.n	8006944 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800693a:	4b0b      	ldr	r3, [pc, #44]	; (8006968 <prvResetNextTaskUnblockTime+0x48>)
 800693c:	f04f 32ff 	mov.w	r2, #4294967295
 8006940:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006942:	e008      	b.n	8006956 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006944:	4b07      	ldr	r3, [pc, #28]	; (8006964 <prvResetNextTaskUnblockTime+0x44>)
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	68db      	ldr	r3, [r3, #12]
 800694a:	68db      	ldr	r3, [r3, #12]
 800694c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	685b      	ldr	r3, [r3, #4]
 8006952:	4a05      	ldr	r2, [pc, #20]	; (8006968 <prvResetNextTaskUnblockTime+0x48>)
 8006954:	6013      	str	r3, [r2, #0]
}
 8006956:	bf00      	nop
 8006958:	370c      	adds	r7, #12
 800695a:	46bd      	mov	sp, r7
 800695c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006960:	4770      	bx	lr
 8006962:	bf00      	nop
 8006964:	20000170 	.word	0x20000170
 8006968:	200001d8 	.word	0x200001d8

0800696c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b084      	sub	sp, #16
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
 8006974:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006976:	4b29      	ldr	r3, [pc, #164]	; (8006a1c <prvAddCurrentTaskToDelayedList+0xb0>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800697c:	4b28      	ldr	r3, [pc, #160]	; (8006a20 <prvAddCurrentTaskToDelayedList+0xb4>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	3304      	adds	r3, #4
 8006982:	4618      	mov	r0, r3
 8006984:	f7ff fb09 	bl	8005f9a <uxListRemove>
 8006988:	4603      	mov	r3, r0
 800698a:	2b00      	cmp	r3, #0
 800698c:	d10b      	bne.n	80069a6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800698e:	4b24      	ldr	r3, [pc, #144]	; (8006a20 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006994:	2201      	movs	r2, #1
 8006996:	fa02 f303 	lsl.w	r3, r2, r3
 800699a:	43da      	mvns	r2, r3
 800699c:	4b21      	ldr	r3, [pc, #132]	; (8006a24 <prvAddCurrentTaskToDelayedList+0xb8>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4013      	ands	r3, r2
 80069a2:	4a20      	ldr	r2, [pc, #128]	; (8006a24 <prvAddCurrentTaskToDelayedList+0xb8>)
 80069a4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069ac:	d10a      	bne.n	80069c4 <prvAddCurrentTaskToDelayedList+0x58>
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d007      	beq.n	80069c4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80069b4:	4b1a      	ldr	r3, [pc, #104]	; (8006a20 <prvAddCurrentTaskToDelayedList+0xb4>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	3304      	adds	r3, #4
 80069ba:	4619      	mov	r1, r3
 80069bc:	481a      	ldr	r0, [pc, #104]	; (8006a28 <prvAddCurrentTaskToDelayedList+0xbc>)
 80069be:	f7ff fa8f 	bl	8005ee0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80069c2:	e026      	b.n	8006a12 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80069c4:	68fa      	ldr	r2, [r7, #12]
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	4413      	add	r3, r2
 80069ca:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80069cc:	4b14      	ldr	r3, [pc, #80]	; (8006a20 <prvAddCurrentTaskToDelayedList+0xb4>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	68ba      	ldr	r2, [r7, #8]
 80069d2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80069d4:	68ba      	ldr	r2, [r7, #8]
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	429a      	cmp	r2, r3
 80069da:	d209      	bcs.n	80069f0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80069dc:	4b13      	ldr	r3, [pc, #76]	; (8006a2c <prvAddCurrentTaskToDelayedList+0xc0>)
 80069de:	681a      	ldr	r2, [r3, #0]
 80069e0:	4b0f      	ldr	r3, [pc, #60]	; (8006a20 <prvAddCurrentTaskToDelayedList+0xb4>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	3304      	adds	r3, #4
 80069e6:	4619      	mov	r1, r3
 80069e8:	4610      	mov	r0, r2
 80069ea:	f7ff fa9d 	bl	8005f28 <vListInsert>
}
 80069ee:	e010      	b.n	8006a12 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80069f0:	4b0f      	ldr	r3, [pc, #60]	; (8006a30 <prvAddCurrentTaskToDelayedList+0xc4>)
 80069f2:	681a      	ldr	r2, [r3, #0]
 80069f4:	4b0a      	ldr	r3, [pc, #40]	; (8006a20 <prvAddCurrentTaskToDelayedList+0xb4>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	3304      	adds	r3, #4
 80069fa:	4619      	mov	r1, r3
 80069fc:	4610      	mov	r0, r2
 80069fe:	f7ff fa93 	bl	8005f28 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006a02:	4b0c      	ldr	r3, [pc, #48]	; (8006a34 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	68ba      	ldr	r2, [r7, #8]
 8006a08:	429a      	cmp	r2, r3
 8006a0a:	d202      	bcs.n	8006a12 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006a0c:	4a09      	ldr	r2, [pc, #36]	; (8006a34 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	6013      	str	r3, [r2, #0]
}
 8006a12:	bf00      	nop
 8006a14:	3710      	adds	r7, #16
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bd80      	pop	{r7, pc}
 8006a1a:	bf00      	nop
 8006a1c:	200001bc 	.word	0x200001bc
 8006a20:	200000b8 	.word	0x200000b8
 8006a24:	200001c0 	.word	0x200001c0
 8006a28:	200001a4 	.word	0x200001a4
 8006a2c:	20000174 	.word	0x20000174
 8006a30:	20000170 	.word	0x20000170
 8006a34:	200001d8 	.word	0x200001d8

08006a38 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006a38:	b480      	push	{r7}
 8006a3a:	b085      	sub	sp, #20
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	60f8      	str	r0, [r7, #12]
 8006a40:	60b9      	str	r1, [r7, #8]
 8006a42:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	3b04      	subs	r3, #4
 8006a48:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006a50:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	3b04      	subs	r3, #4
 8006a56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	f023 0201 	bic.w	r2, r3, #1
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	3b04      	subs	r3, #4
 8006a66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006a68:	4a0c      	ldr	r2, [pc, #48]	; (8006a9c <pxPortInitialiseStack+0x64>)
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	3b14      	subs	r3, #20
 8006a72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006a74:	687a      	ldr	r2, [r7, #4]
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	3b04      	subs	r3, #4
 8006a7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	f06f 0202 	mvn.w	r2, #2
 8006a86:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	3b20      	subs	r3, #32
 8006a8c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
}
 8006a90:	4618      	mov	r0, r3
 8006a92:	3714      	adds	r7, #20
 8006a94:	46bd      	mov	sp, r7
 8006a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9a:	4770      	bx	lr
 8006a9c:	08006aa1 	.word	0x08006aa1

08006aa0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006aa0:	b480      	push	{r7}
 8006aa2:	b085      	sub	sp, #20
 8006aa4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006aaa:	4b12      	ldr	r3, [pc, #72]	; (8006af4 <prvTaskExitError+0x54>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ab2:	d00a      	beq.n	8006aca <prvTaskExitError+0x2a>
	__asm volatile
 8006ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ab8:	f383 8811 	msr	BASEPRI, r3
 8006abc:	f3bf 8f6f 	isb	sy
 8006ac0:	f3bf 8f4f 	dsb	sy
 8006ac4:	60fb      	str	r3, [r7, #12]
}
 8006ac6:	bf00      	nop
 8006ac8:	e7fe      	b.n	8006ac8 <prvTaskExitError+0x28>
	__asm volatile
 8006aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ace:	f383 8811 	msr	BASEPRI, r3
 8006ad2:	f3bf 8f6f 	isb	sy
 8006ad6:	f3bf 8f4f 	dsb	sy
 8006ada:	60bb      	str	r3, [r7, #8]
}
 8006adc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006ade:	bf00      	nop
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d0fc      	beq.n	8006ae0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006ae6:	bf00      	nop
 8006ae8:	bf00      	nop
 8006aea:	3714      	adds	r7, #20
 8006aec:	46bd      	mov	sp, r7
 8006aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af2:	4770      	bx	lr
 8006af4:	20000008 	.word	0x20000008
	...

08006b00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006b00:	4b07      	ldr	r3, [pc, #28]	; (8006b20 <pxCurrentTCBConst2>)
 8006b02:	6819      	ldr	r1, [r3, #0]
 8006b04:	6808      	ldr	r0, [r1, #0]
 8006b06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b0a:	f380 8809 	msr	PSP, r0
 8006b0e:	f3bf 8f6f 	isb	sy
 8006b12:	f04f 0000 	mov.w	r0, #0
 8006b16:	f380 8811 	msr	BASEPRI, r0
 8006b1a:	4770      	bx	lr
 8006b1c:	f3af 8000 	nop.w

08006b20 <pxCurrentTCBConst2>:
 8006b20:	200000b8 	.word	0x200000b8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006b24:	bf00      	nop
 8006b26:	bf00      	nop

08006b28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006b28:	4808      	ldr	r0, [pc, #32]	; (8006b4c <prvPortStartFirstTask+0x24>)
 8006b2a:	6800      	ldr	r0, [r0, #0]
 8006b2c:	6800      	ldr	r0, [r0, #0]
 8006b2e:	f380 8808 	msr	MSP, r0
 8006b32:	f04f 0000 	mov.w	r0, #0
 8006b36:	f380 8814 	msr	CONTROL, r0
 8006b3a:	b662      	cpsie	i
 8006b3c:	b661      	cpsie	f
 8006b3e:	f3bf 8f4f 	dsb	sy
 8006b42:	f3bf 8f6f 	isb	sy
 8006b46:	df00      	svc	0
 8006b48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006b4a:	bf00      	nop
 8006b4c:	e000ed08 	.word	0xe000ed08

08006b50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b086      	sub	sp, #24
 8006b54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006b56:	4b46      	ldr	r3, [pc, #280]	; (8006c70 <xPortStartScheduler+0x120>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4a46      	ldr	r2, [pc, #280]	; (8006c74 <xPortStartScheduler+0x124>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d10a      	bne.n	8006b76 <xPortStartScheduler+0x26>
	__asm volatile
 8006b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b64:	f383 8811 	msr	BASEPRI, r3
 8006b68:	f3bf 8f6f 	isb	sy
 8006b6c:	f3bf 8f4f 	dsb	sy
 8006b70:	613b      	str	r3, [r7, #16]
}
 8006b72:	bf00      	nop
 8006b74:	e7fe      	b.n	8006b74 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006b76:	4b3e      	ldr	r3, [pc, #248]	; (8006c70 <xPortStartScheduler+0x120>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	4a3f      	ldr	r2, [pc, #252]	; (8006c78 <xPortStartScheduler+0x128>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d10a      	bne.n	8006b96 <xPortStartScheduler+0x46>
	__asm volatile
 8006b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b84:	f383 8811 	msr	BASEPRI, r3
 8006b88:	f3bf 8f6f 	isb	sy
 8006b8c:	f3bf 8f4f 	dsb	sy
 8006b90:	60fb      	str	r3, [r7, #12]
}
 8006b92:	bf00      	nop
 8006b94:	e7fe      	b.n	8006b94 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006b96:	4b39      	ldr	r3, [pc, #228]	; (8006c7c <xPortStartScheduler+0x12c>)
 8006b98:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	781b      	ldrb	r3, [r3, #0]
 8006b9e:	b2db      	uxtb	r3, r3
 8006ba0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006ba2:	697b      	ldr	r3, [r7, #20]
 8006ba4:	22ff      	movs	r2, #255	; 0xff
 8006ba6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006ba8:	697b      	ldr	r3, [r7, #20]
 8006baa:	781b      	ldrb	r3, [r3, #0]
 8006bac:	b2db      	uxtb	r3, r3
 8006bae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006bb0:	78fb      	ldrb	r3, [r7, #3]
 8006bb2:	b2db      	uxtb	r3, r3
 8006bb4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006bb8:	b2da      	uxtb	r2, r3
 8006bba:	4b31      	ldr	r3, [pc, #196]	; (8006c80 <xPortStartScheduler+0x130>)
 8006bbc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006bbe:	4b31      	ldr	r3, [pc, #196]	; (8006c84 <xPortStartScheduler+0x134>)
 8006bc0:	2207      	movs	r2, #7
 8006bc2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006bc4:	e009      	b.n	8006bda <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006bc6:	4b2f      	ldr	r3, [pc, #188]	; (8006c84 <xPortStartScheduler+0x134>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	3b01      	subs	r3, #1
 8006bcc:	4a2d      	ldr	r2, [pc, #180]	; (8006c84 <xPortStartScheduler+0x134>)
 8006bce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006bd0:	78fb      	ldrb	r3, [r7, #3]
 8006bd2:	b2db      	uxtb	r3, r3
 8006bd4:	005b      	lsls	r3, r3, #1
 8006bd6:	b2db      	uxtb	r3, r3
 8006bd8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006bda:	78fb      	ldrb	r3, [r7, #3]
 8006bdc:	b2db      	uxtb	r3, r3
 8006bde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006be2:	2b80      	cmp	r3, #128	; 0x80
 8006be4:	d0ef      	beq.n	8006bc6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006be6:	4b27      	ldr	r3, [pc, #156]	; (8006c84 <xPortStartScheduler+0x134>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f1c3 0307 	rsb	r3, r3, #7
 8006bee:	2b04      	cmp	r3, #4
 8006bf0:	d00a      	beq.n	8006c08 <xPortStartScheduler+0xb8>
	__asm volatile
 8006bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bf6:	f383 8811 	msr	BASEPRI, r3
 8006bfa:	f3bf 8f6f 	isb	sy
 8006bfe:	f3bf 8f4f 	dsb	sy
 8006c02:	60bb      	str	r3, [r7, #8]
}
 8006c04:	bf00      	nop
 8006c06:	e7fe      	b.n	8006c06 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006c08:	4b1e      	ldr	r3, [pc, #120]	; (8006c84 <xPortStartScheduler+0x134>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	021b      	lsls	r3, r3, #8
 8006c0e:	4a1d      	ldr	r2, [pc, #116]	; (8006c84 <xPortStartScheduler+0x134>)
 8006c10:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006c12:	4b1c      	ldr	r3, [pc, #112]	; (8006c84 <xPortStartScheduler+0x134>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006c1a:	4a1a      	ldr	r2, [pc, #104]	; (8006c84 <xPortStartScheduler+0x134>)
 8006c1c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	b2da      	uxtb	r2, r3
 8006c22:	697b      	ldr	r3, [r7, #20]
 8006c24:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006c26:	4b18      	ldr	r3, [pc, #96]	; (8006c88 <xPortStartScheduler+0x138>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	4a17      	ldr	r2, [pc, #92]	; (8006c88 <xPortStartScheduler+0x138>)
 8006c2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006c30:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006c32:	4b15      	ldr	r3, [pc, #84]	; (8006c88 <xPortStartScheduler+0x138>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4a14      	ldr	r2, [pc, #80]	; (8006c88 <xPortStartScheduler+0x138>)
 8006c38:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006c3c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006c3e:	f000 f8dd 	bl	8006dfc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006c42:	4b12      	ldr	r3, [pc, #72]	; (8006c8c <xPortStartScheduler+0x13c>)
 8006c44:	2200      	movs	r2, #0
 8006c46:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006c48:	f000 f8fc 	bl	8006e44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006c4c:	4b10      	ldr	r3, [pc, #64]	; (8006c90 <xPortStartScheduler+0x140>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	4a0f      	ldr	r2, [pc, #60]	; (8006c90 <xPortStartScheduler+0x140>)
 8006c52:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006c56:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006c58:	f7ff ff66 	bl	8006b28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006c5c:	f7ff fd4e 	bl	80066fc <vTaskSwitchContext>
	prvTaskExitError();
 8006c60:	f7ff ff1e 	bl	8006aa0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006c64:	2300      	movs	r3, #0
}
 8006c66:	4618      	mov	r0, r3
 8006c68:	3718      	adds	r7, #24
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bd80      	pop	{r7, pc}
 8006c6e:	bf00      	nop
 8006c70:	e000ed00 	.word	0xe000ed00
 8006c74:	410fc271 	.word	0x410fc271
 8006c78:	410fc270 	.word	0x410fc270
 8006c7c:	e000e400 	.word	0xe000e400
 8006c80:	200001e4 	.word	0x200001e4
 8006c84:	200001e8 	.word	0x200001e8
 8006c88:	e000ed20 	.word	0xe000ed20
 8006c8c:	20000008 	.word	0x20000008
 8006c90:	e000ef34 	.word	0xe000ef34

08006c94 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006c94:	b480      	push	{r7}
 8006c96:	b083      	sub	sp, #12
 8006c98:	af00      	add	r7, sp, #0
	__asm volatile
 8006c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c9e:	f383 8811 	msr	BASEPRI, r3
 8006ca2:	f3bf 8f6f 	isb	sy
 8006ca6:	f3bf 8f4f 	dsb	sy
 8006caa:	607b      	str	r3, [r7, #4]
}
 8006cac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006cae:	4b0f      	ldr	r3, [pc, #60]	; (8006cec <vPortEnterCritical+0x58>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	3301      	adds	r3, #1
 8006cb4:	4a0d      	ldr	r2, [pc, #52]	; (8006cec <vPortEnterCritical+0x58>)
 8006cb6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006cb8:	4b0c      	ldr	r3, [pc, #48]	; (8006cec <vPortEnterCritical+0x58>)
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	2b01      	cmp	r3, #1
 8006cbe:	d10f      	bne.n	8006ce0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006cc0:	4b0b      	ldr	r3, [pc, #44]	; (8006cf0 <vPortEnterCritical+0x5c>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	b2db      	uxtb	r3, r3
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d00a      	beq.n	8006ce0 <vPortEnterCritical+0x4c>
	__asm volatile
 8006cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cce:	f383 8811 	msr	BASEPRI, r3
 8006cd2:	f3bf 8f6f 	isb	sy
 8006cd6:	f3bf 8f4f 	dsb	sy
 8006cda:	603b      	str	r3, [r7, #0]
}
 8006cdc:	bf00      	nop
 8006cde:	e7fe      	b.n	8006cde <vPortEnterCritical+0x4a>
	}
}
 8006ce0:	bf00      	nop
 8006ce2:	370c      	adds	r7, #12
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cea:	4770      	bx	lr
 8006cec:	20000008 	.word	0x20000008
 8006cf0:	e000ed04 	.word	0xe000ed04

08006cf4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b083      	sub	sp, #12
 8006cf8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006cfa:	4b12      	ldr	r3, [pc, #72]	; (8006d44 <vPortExitCritical+0x50>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d10a      	bne.n	8006d18 <vPortExitCritical+0x24>
	__asm volatile
 8006d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d06:	f383 8811 	msr	BASEPRI, r3
 8006d0a:	f3bf 8f6f 	isb	sy
 8006d0e:	f3bf 8f4f 	dsb	sy
 8006d12:	607b      	str	r3, [r7, #4]
}
 8006d14:	bf00      	nop
 8006d16:	e7fe      	b.n	8006d16 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006d18:	4b0a      	ldr	r3, [pc, #40]	; (8006d44 <vPortExitCritical+0x50>)
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	3b01      	subs	r3, #1
 8006d1e:	4a09      	ldr	r2, [pc, #36]	; (8006d44 <vPortExitCritical+0x50>)
 8006d20:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006d22:	4b08      	ldr	r3, [pc, #32]	; (8006d44 <vPortExitCritical+0x50>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d105      	bne.n	8006d36 <vPortExitCritical+0x42>
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006d34:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006d36:	bf00      	nop
 8006d38:	370c      	adds	r7, #12
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d40:	4770      	bx	lr
 8006d42:	bf00      	nop
 8006d44:	20000008 	.word	0x20000008
	...

08006d50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006d50:	f3ef 8009 	mrs	r0, PSP
 8006d54:	f3bf 8f6f 	isb	sy
 8006d58:	4b15      	ldr	r3, [pc, #84]	; (8006db0 <pxCurrentTCBConst>)
 8006d5a:	681a      	ldr	r2, [r3, #0]
 8006d5c:	f01e 0f10 	tst.w	lr, #16
 8006d60:	bf08      	it	eq
 8006d62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006d66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d6a:	6010      	str	r0, [r2, #0]
 8006d6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006d70:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006d74:	f380 8811 	msr	BASEPRI, r0
 8006d78:	f3bf 8f4f 	dsb	sy
 8006d7c:	f3bf 8f6f 	isb	sy
 8006d80:	f7ff fcbc 	bl	80066fc <vTaskSwitchContext>
 8006d84:	f04f 0000 	mov.w	r0, #0
 8006d88:	f380 8811 	msr	BASEPRI, r0
 8006d8c:	bc09      	pop	{r0, r3}
 8006d8e:	6819      	ldr	r1, [r3, #0]
 8006d90:	6808      	ldr	r0, [r1, #0]
 8006d92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d96:	f01e 0f10 	tst.w	lr, #16
 8006d9a:	bf08      	it	eq
 8006d9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006da0:	f380 8809 	msr	PSP, r0
 8006da4:	f3bf 8f6f 	isb	sy
 8006da8:	4770      	bx	lr
 8006daa:	bf00      	nop
 8006dac:	f3af 8000 	nop.w

08006db0 <pxCurrentTCBConst>:
 8006db0:	200000b8 	.word	0x200000b8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006db4:	bf00      	nop
 8006db6:	bf00      	nop

08006db8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b082      	sub	sp, #8
 8006dbc:	af00      	add	r7, sp, #0
	__asm volatile
 8006dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dc2:	f383 8811 	msr	BASEPRI, r3
 8006dc6:	f3bf 8f6f 	isb	sy
 8006dca:	f3bf 8f4f 	dsb	sy
 8006dce:	607b      	str	r3, [r7, #4]
}
 8006dd0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006dd2:	f7ff fbd5 	bl	8006580 <xTaskIncrementTick>
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d003      	beq.n	8006de4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006ddc:	4b06      	ldr	r3, [pc, #24]	; (8006df8 <SysTick_Handler+0x40>)
 8006dde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006de2:	601a      	str	r2, [r3, #0]
 8006de4:	2300      	movs	r3, #0
 8006de6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	f383 8811 	msr	BASEPRI, r3
}
 8006dee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006df0:	bf00      	nop
 8006df2:	3708      	adds	r7, #8
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bd80      	pop	{r7, pc}
 8006df8:	e000ed04 	.word	0xe000ed04

08006dfc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006dfc:	b480      	push	{r7}
 8006dfe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006e00:	4b0b      	ldr	r3, [pc, #44]	; (8006e30 <vPortSetupTimerInterrupt+0x34>)
 8006e02:	2200      	movs	r2, #0
 8006e04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006e06:	4b0b      	ldr	r3, [pc, #44]	; (8006e34 <vPortSetupTimerInterrupt+0x38>)
 8006e08:	2200      	movs	r2, #0
 8006e0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006e0c:	4b0a      	ldr	r3, [pc, #40]	; (8006e38 <vPortSetupTimerInterrupt+0x3c>)
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4a0a      	ldr	r2, [pc, #40]	; (8006e3c <vPortSetupTimerInterrupt+0x40>)
 8006e12:	fba2 2303 	umull	r2, r3, r2, r3
 8006e16:	099b      	lsrs	r3, r3, #6
 8006e18:	4a09      	ldr	r2, [pc, #36]	; (8006e40 <vPortSetupTimerInterrupt+0x44>)
 8006e1a:	3b01      	subs	r3, #1
 8006e1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006e1e:	4b04      	ldr	r3, [pc, #16]	; (8006e30 <vPortSetupTimerInterrupt+0x34>)
 8006e20:	2207      	movs	r2, #7
 8006e22:	601a      	str	r2, [r3, #0]
}
 8006e24:	bf00      	nop
 8006e26:	46bd      	mov	sp, r7
 8006e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2c:	4770      	bx	lr
 8006e2e:	bf00      	nop
 8006e30:	e000e010 	.word	0xe000e010
 8006e34:	e000e018 	.word	0xe000e018
 8006e38:	2000000c 	.word	0x2000000c
 8006e3c:	10624dd3 	.word	0x10624dd3
 8006e40:	e000e014 	.word	0xe000e014

08006e44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006e44:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006e54 <vPortEnableVFP+0x10>
 8006e48:	6801      	ldr	r1, [r0, #0]
 8006e4a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006e4e:	6001      	str	r1, [r0, #0]
 8006e50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006e52:	bf00      	nop
 8006e54:	e000ed88 	.word	0xe000ed88

08006e58 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b08a      	sub	sp, #40	; 0x28
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006e60:	2300      	movs	r3, #0
 8006e62:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006e64:	f7ff fae2 	bl	800642c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006e68:	4b58      	ldr	r3, [pc, #352]	; (8006fcc <pvPortMalloc+0x174>)
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d101      	bne.n	8006e74 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006e70:	f000 f910 	bl	8007094 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006e74:	4b56      	ldr	r3, [pc, #344]	; (8006fd0 <pvPortMalloc+0x178>)
 8006e76:	681a      	ldr	r2, [r3, #0]
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	4013      	ands	r3, r2
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	f040 808e 	bne.w	8006f9e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d01d      	beq.n	8006ec4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006e88:	2208      	movs	r2, #8
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	4413      	add	r3, r2
 8006e8e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f003 0307 	and.w	r3, r3, #7
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d014      	beq.n	8006ec4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f023 0307 	bic.w	r3, r3, #7
 8006ea0:	3308      	adds	r3, #8
 8006ea2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f003 0307 	and.w	r3, r3, #7
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d00a      	beq.n	8006ec4 <pvPortMalloc+0x6c>
	__asm volatile
 8006eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eb2:	f383 8811 	msr	BASEPRI, r3
 8006eb6:	f3bf 8f6f 	isb	sy
 8006eba:	f3bf 8f4f 	dsb	sy
 8006ebe:	617b      	str	r3, [r7, #20]
}
 8006ec0:	bf00      	nop
 8006ec2:	e7fe      	b.n	8006ec2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d069      	beq.n	8006f9e <pvPortMalloc+0x146>
 8006eca:	4b42      	ldr	r3, [pc, #264]	; (8006fd4 <pvPortMalloc+0x17c>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	687a      	ldr	r2, [r7, #4]
 8006ed0:	429a      	cmp	r2, r3
 8006ed2:	d864      	bhi.n	8006f9e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006ed4:	4b40      	ldr	r3, [pc, #256]	; (8006fd8 <pvPortMalloc+0x180>)
 8006ed6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006ed8:	4b3f      	ldr	r3, [pc, #252]	; (8006fd8 <pvPortMalloc+0x180>)
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006ede:	e004      	b.n	8006eea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eec:	685b      	ldr	r3, [r3, #4]
 8006eee:	687a      	ldr	r2, [r7, #4]
 8006ef0:	429a      	cmp	r2, r3
 8006ef2:	d903      	bls.n	8006efc <pvPortMalloc+0xa4>
 8006ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d1f1      	bne.n	8006ee0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006efc:	4b33      	ldr	r3, [pc, #204]	; (8006fcc <pvPortMalloc+0x174>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f02:	429a      	cmp	r2, r3
 8006f04:	d04b      	beq.n	8006f9e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006f06:	6a3b      	ldr	r3, [r7, #32]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	2208      	movs	r2, #8
 8006f0c:	4413      	add	r3, r2
 8006f0e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f12:	681a      	ldr	r2, [r3, #0]
 8006f14:	6a3b      	ldr	r3, [r7, #32]
 8006f16:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f1a:	685a      	ldr	r2, [r3, #4]
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	1ad2      	subs	r2, r2, r3
 8006f20:	2308      	movs	r3, #8
 8006f22:	005b      	lsls	r3, r3, #1
 8006f24:	429a      	cmp	r2, r3
 8006f26:	d91f      	bls.n	8006f68 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006f28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	4413      	add	r3, r2
 8006f2e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006f30:	69bb      	ldr	r3, [r7, #24]
 8006f32:	f003 0307 	and.w	r3, r3, #7
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d00a      	beq.n	8006f50 <pvPortMalloc+0xf8>
	__asm volatile
 8006f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f3e:	f383 8811 	msr	BASEPRI, r3
 8006f42:	f3bf 8f6f 	isb	sy
 8006f46:	f3bf 8f4f 	dsb	sy
 8006f4a:	613b      	str	r3, [r7, #16]
}
 8006f4c:	bf00      	nop
 8006f4e:	e7fe      	b.n	8006f4e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f52:	685a      	ldr	r2, [r3, #4]
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	1ad2      	subs	r2, r2, r3
 8006f58:	69bb      	ldr	r3, [r7, #24]
 8006f5a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f5e:	687a      	ldr	r2, [r7, #4]
 8006f60:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006f62:	69b8      	ldr	r0, [r7, #24]
 8006f64:	f000 f8f8 	bl	8007158 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006f68:	4b1a      	ldr	r3, [pc, #104]	; (8006fd4 <pvPortMalloc+0x17c>)
 8006f6a:	681a      	ldr	r2, [r3, #0]
 8006f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f6e:	685b      	ldr	r3, [r3, #4]
 8006f70:	1ad3      	subs	r3, r2, r3
 8006f72:	4a18      	ldr	r2, [pc, #96]	; (8006fd4 <pvPortMalloc+0x17c>)
 8006f74:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006f76:	4b17      	ldr	r3, [pc, #92]	; (8006fd4 <pvPortMalloc+0x17c>)
 8006f78:	681a      	ldr	r2, [r3, #0]
 8006f7a:	4b18      	ldr	r3, [pc, #96]	; (8006fdc <pvPortMalloc+0x184>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	429a      	cmp	r2, r3
 8006f80:	d203      	bcs.n	8006f8a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006f82:	4b14      	ldr	r3, [pc, #80]	; (8006fd4 <pvPortMalloc+0x17c>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	4a15      	ldr	r2, [pc, #84]	; (8006fdc <pvPortMalloc+0x184>)
 8006f88:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f8c:	685a      	ldr	r2, [r3, #4]
 8006f8e:	4b10      	ldr	r3, [pc, #64]	; (8006fd0 <pvPortMalloc+0x178>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	431a      	orrs	r2, r3
 8006f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f96:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006f9e:	f7ff fa53 	bl	8006448 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006fa2:	69fb      	ldr	r3, [r7, #28]
 8006fa4:	f003 0307 	and.w	r3, r3, #7
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d00a      	beq.n	8006fc2 <pvPortMalloc+0x16a>
	__asm volatile
 8006fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fb0:	f383 8811 	msr	BASEPRI, r3
 8006fb4:	f3bf 8f6f 	isb	sy
 8006fb8:	f3bf 8f4f 	dsb	sy
 8006fbc:	60fb      	str	r3, [r7, #12]
}
 8006fbe:	bf00      	nop
 8006fc0:	e7fe      	b.n	8006fc0 <pvPortMalloc+0x168>
	return pvReturn;
 8006fc2:	69fb      	ldr	r3, [r7, #28]
}
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	3728      	adds	r7, #40	; 0x28
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	bd80      	pop	{r7, pc}
 8006fcc:	20000bf4 	.word	0x20000bf4
 8006fd0:	20000c00 	.word	0x20000c00
 8006fd4:	20000bf8 	.word	0x20000bf8
 8006fd8:	20000bec 	.word	0x20000bec
 8006fdc:	20000bfc 	.word	0x20000bfc

08006fe0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b086      	sub	sp, #24
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d048      	beq.n	8007084 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006ff2:	2308      	movs	r3, #8
 8006ff4:	425b      	negs	r3, r3
 8006ff6:	697a      	ldr	r2, [r7, #20]
 8006ff8:	4413      	add	r3, r2
 8006ffa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006ffc:	697b      	ldr	r3, [r7, #20]
 8006ffe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007000:	693b      	ldr	r3, [r7, #16]
 8007002:	685a      	ldr	r2, [r3, #4]
 8007004:	4b21      	ldr	r3, [pc, #132]	; (800708c <vPortFree+0xac>)
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4013      	ands	r3, r2
 800700a:	2b00      	cmp	r3, #0
 800700c:	d10a      	bne.n	8007024 <vPortFree+0x44>
	__asm volatile
 800700e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007012:	f383 8811 	msr	BASEPRI, r3
 8007016:	f3bf 8f6f 	isb	sy
 800701a:	f3bf 8f4f 	dsb	sy
 800701e:	60fb      	str	r3, [r7, #12]
}
 8007020:	bf00      	nop
 8007022:	e7fe      	b.n	8007022 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007024:	693b      	ldr	r3, [r7, #16]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d00a      	beq.n	8007042 <vPortFree+0x62>
	__asm volatile
 800702c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007030:	f383 8811 	msr	BASEPRI, r3
 8007034:	f3bf 8f6f 	isb	sy
 8007038:	f3bf 8f4f 	dsb	sy
 800703c:	60bb      	str	r3, [r7, #8]
}
 800703e:	bf00      	nop
 8007040:	e7fe      	b.n	8007040 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007042:	693b      	ldr	r3, [r7, #16]
 8007044:	685a      	ldr	r2, [r3, #4]
 8007046:	4b11      	ldr	r3, [pc, #68]	; (800708c <vPortFree+0xac>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	4013      	ands	r3, r2
 800704c:	2b00      	cmp	r3, #0
 800704e:	d019      	beq.n	8007084 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007050:	693b      	ldr	r3, [r7, #16]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d115      	bne.n	8007084 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007058:	693b      	ldr	r3, [r7, #16]
 800705a:	685a      	ldr	r2, [r3, #4]
 800705c:	4b0b      	ldr	r3, [pc, #44]	; (800708c <vPortFree+0xac>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	43db      	mvns	r3, r3
 8007062:	401a      	ands	r2, r3
 8007064:	693b      	ldr	r3, [r7, #16]
 8007066:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007068:	f7ff f9e0 	bl	800642c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800706c:	693b      	ldr	r3, [r7, #16]
 800706e:	685a      	ldr	r2, [r3, #4]
 8007070:	4b07      	ldr	r3, [pc, #28]	; (8007090 <vPortFree+0xb0>)
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	4413      	add	r3, r2
 8007076:	4a06      	ldr	r2, [pc, #24]	; (8007090 <vPortFree+0xb0>)
 8007078:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800707a:	6938      	ldr	r0, [r7, #16]
 800707c:	f000 f86c 	bl	8007158 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007080:	f7ff f9e2 	bl	8006448 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007084:	bf00      	nop
 8007086:	3718      	adds	r7, #24
 8007088:	46bd      	mov	sp, r7
 800708a:	bd80      	pop	{r7, pc}
 800708c:	20000c00 	.word	0x20000c00
 8007090:	20000bf8 	.word	0x20000bf8

08007094 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007094:	b480      	push	{r7}
 8007096:	b085      	sub	sp, #20
 8007098:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800709a:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800709e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80070a0:	4b27      	ldr	r3, [pc, #156]	; (8007140 <prvHeapInit+0xac>)
 80070a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	f003 0307 	and.w	r3, r3, #7
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d00c      	beq.n	80070c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	3307      	adds	r3, #7
 80070b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	f023 0307 	bic.w	r3, r3, #7
 80070ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80070bc:	68ba      	ldr	r2, [r7, #8]
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	1ad3      	subs	r3, r2, r3
 80070c2:	4a1f      	ldr	r2, [pc, #124]	; (8007140 <prvHeapInit+0xac>)
 80070c4:	4413      	add	r3, r2
 80070c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80070cc:	4a1d      	ldr	r2, [pc, #116]	; (8007144 <prvHeapInit+0xb0>)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80070d2:	4b1c      	ldr	r3, [pc, #112]	; (8007144 <prvHeapInit+0xb0>)
 80070d4:	2200      	movs	r2, #0
 80070d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	68ba      	ldr	r2, [r7, #8]
 80070dc:	4413      	add	r3, r2
 80070de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80070e0:	2208      	movs	r2, #8
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	1a9b      	subs	r3, r3, r2
 80070e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	f023 0307 	bic.w	r3, r3, #7
 80070ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	4a15      	ldr	r2, [pc, #84]	; (8007148 <prvHeapInit+0xb4>)
 80070f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80070f6:	4b14      	ldr	r3, [pc, #80]	; (8007148 <prvHeapInit+0xb4>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	2200      	movs	r2, #0
 80070fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80070fe:	4b12      	ldr	r3, [pc, #72]	; (8007148 <prvHeapInit+0xb4>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	2200      	movs	r2, #0
 8007104:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	68fa      	ldr	r2, [r7, #12]
 800710e:	1ad2      	subs	r2, r2, r3
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007114:	4b0c      	ldr	r3, [pc, #48]	; (8007148 <prvHeapInit+0xb4>)
 8007116:	681a      	ldr	r2, [r3, #0]
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	685b      	ldr	r3, [r3, #4]
 8007120:	4a0a      	ldr	r2, [pc, #40]	; (800714c <prvHeapInit+0xb8>)
 8007122:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	685b      	ldr	r3, [r3, #4]
 8007128:	4a09      	ldr	r2, [pc, #36]	; (8007150 <prvHeapInit+0xbc>)
 800712a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800712c:	4b09      	ldr	r3, [pc, #36]	; (8007154 <prvHeapInit+0xc0>)
 800712e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007132:	601a      	str	r2, [r3, #0]
}
 8007134:	bf00      	nop
 8007136:	3714      	adds	r7, #20
 8007138:	46bd      	mov	sp, r7
 800713a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713e:	4770      	bx	lr
 8007140:	200001ec 	.word	0x200001ec
 8007144:	20000bec 	.word	0x20000bec
 8007148:	20000bf4 	.word	0x20000bf4
 800714c:	20000bfc 	.word	0x20000bfc
 8007150:	20000bf8 	.word	0x20000bf8
 8007154:	20000c00 	.word	0x20000c00

08007158 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007158:	b480      	push	{r7}
 800715a:	b085      	sub	sp, #20
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007160:	4b28      	ldr	r3, [pc, #160]	; (8007204 <prvInsertBlockIntoFreeList+0xac>)
 8007162:	60fb      	str	r3, [r7, #12]
 8007164:	e002      	b.n	800716c <prvInsertBlockIntoFreeList+0x14>
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	60fb      	str	r3, [r7, #12]
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	687a      	ldr	r2, [r7, #4]
 8007172:	429a      	cmp	r2, r3
 8007174:	d8f7      	bhi.n	8007166 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	685b      	ldr	r3, [r3, #4]
 800717e:	68ba      	ldr	r2, [r7, #8]
 8007180:	4413      	add	r3, r2
 8007182:	687a      	ldr	r2, [r7, #4]
 8007184:	429a      	cmp	r2, r3
 8007186:	d108      	bne.n	800719a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	685a      	ldr	r2, [r3, #4]
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	685b      	ldr	r3, [r3, #4]
 8007190:	441a      	add	r2, r3
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	685b      	ldr	r3, [r3, #4]
 80071a2:	68ba      	ldr	r2, [r7, #8]
 80071a4:	441a      	add	r2, r3
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	429a      	cmp	r2, r3
 80071ac:	d118      	bne.n	80071e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681a      	ldr	r2, [r3, #0]
 80071b2:	4b15      	ldr	r3, [pc, #84]	; (8007208 <prvInsertBlockIntoFreeList+0xb0>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	429a      	cmp	r2, r3
 80071b8:	d00d      	beq.n	80071d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	685a      	ldr	r2, [r3, #4]
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	685b      	ldr	r3, [r3, #4]
 80071c4:	441a      	add	r2, r3
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	681a      	ldr	r2, [r3, #0]
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	601a      	str	r2, [r3, #0]
 80071d4:	e008      	b.n	80071e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80071d6:	4b0c      	ldr	r3, [pc, #48]	; (8007208 <prvInsertBlockIntoFreeList+0xb0>)
 80071d8:	681a      	ldr	r2, [r3, #0]
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	601a      	str	r2, [r3, #0]
 80071de:	e003      	b.n	80071e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	681a      	ldr	r2, [r3, #0]
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80071e8:	68fa      	ldr	r2, [r7, #12]
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	429a      	cmp	r2, r3
 80071ee:	d002      	beq.n	80071f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	687a      	ldr	r2, [r7, #4]
 80071f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80071f6:	bf00      	nop
 80071f8:	3714      	adds	r7, #20
 80071fa:	46bd      	mov	sp, r7
 80071fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007200:	4770      	bx	lr
 8007202:	bf00      	nop
 8007204:	20000bec 	.word	0x20000bec
 8007208:	20000bf4 	.word	0x20000bf4

0800720c <__NVIC_GetEnableIRQ>:
	__STATIC_INLINE uint32_t __NVIC_GetEnableIRQ(IRQn_Type IRQn) {
 800720c:	b480      	push	{r7}
 800720e:	b083      	sub	sp, #12
 8007210:	af00      	add	r7, sp, #0
 8007212:	4603      	mov	r3, r0
 8007214:	71fb      	strb	r3, [r7, #7]
		if ((int32_t) (IRQn) >= 0) {
 8007216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800721a:	2b00      	cmp	r3, #0
 800721c:	db0d      	blt.n	800723a <__NVIC_GetEnableIRQ+0x2e>
			return ((uint32_t) (((NVIC->ISER[(((uint32_t) IRQn) >> 5UL)] & (1UL << (((uint32_t) IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 800721e:	4a0a      	ldr	r2, [pc, #40]	; (8007248 <__NVIC_GetEnableIRQ+0x3c>)
 8007220:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007224:	095b      	lsrs	r3, r3, #5
 8007226:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800722a:	79fb      	ldrb	r3, [r7, #7]
 800722c:	f003 031f 	and.w	r3, r3, #31
 8007230:	fa22 f303 	lsr.w	r3, r2, r3
 8007234:	f003 0301 	and.w	r3, r3, #1
 8007238:	e000      	b.n	800723c <__NVIC_GetEnableIRQ+0x30>
			return (0U);
 800723a:	2300      	movs	r3, #0
	}
 800723c:	4618      	mov	r0, r3
 800723e:	370c      	adds	r7, #12
 8007240:	46bd      	mov	sp, r7
 8007242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007246:	4770      	bx	lr
 8007248:	e000e100 	.word	0xe000e100

0800724c <__NVIC_ClearPendingIRQ>:
	__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn) {
 800724c:	b480      	push	{r7}
 800724e:	b083      	sub	sp, #12
 8007250:	af00      	add	r7, sp, #0
 8007252:	4603      	mov	r3, r0
 8007254:	71fb      	strb	r3, [r7, #7]
		if ((int32_t) (IRQn) >= 0) {
 8007256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800725a:	2b00      	cmp	r3, #0
 800725c:	db0c      	blt.n	8007278 <__NVIC_ClearPendingIRQ+0x2c>
			NVIC->ICPR[(((uint32_t) IRQn) >> 5UL)] = (uint32_t) (1UL << (((uint32_t) IRQn) & 0x1FUL));
 800725e:	79fb      	ldrb	r3, [r7, #7]
 8007260:	f003 021f 	and.w	r2, r3, #31
 8007264:	4907      	ldr	r1, [pc, #28]	; (8007284 <__NVIC_ClearPendingIRQ+0x38>)
 8007266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800726a:	095b      	lsrs	r3, r3, #5
 800726c:	2001      	movs	r0, #1
 800726e:	fa00 f202 	lsl.w	r2, r0, r2
 8007272:	3360      	adds	r3, #96	; 0x60
 8007274:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}
 8007278:	bf00      	nop
 800727a:	370c      	adds	r7, #12
 800727c:	46bd      	mov	sp, r7
 800727e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007282:	4770      	bx	lr
 8007284:	e000e100 	.word	0xe000e100

08007288 <vApplicationGetIdleTaskMemory>:

/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory(StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007288:	b480      	push	{r7}
 800728a:	b085      	sub	sp, #20
 800728c:	af00      	add	r7, sp, #0
 800728e:	60f8      	str	r0, [r7, #12]
 8007290:	60b9      	str	r1, [r7, #8]
 8007292:	607a      	str	r2, [r7, #4]
	*ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	4a07      	ldr	r2, [pc, #28]	; (80072b4 <vApplicationGetIdleTaskMemory+0x2c>)
 8007298:	601a      	str	r2, [r3, #0]
	*ppxIdleTaskStackBuffer = &xIdleStack[0];
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	4a06      	ldr	r2, [pc, #24]	; (80072b8 <vApplicationGetIdleTaskMemory+0x30>)
 800729e:	601a      	str	r2, [r3, #0]
	*pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2280      	movs	r2, #128	; 0x80
 80072a4:	601a      	str	r2, [r3, #0]
	/* place for user code */
}
 80072a6:	bf00      	nop
 80072a8:	3714      	adds	r7, #20
 80072aa:	46bd      	mov	sp, r7
 80072ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b0:	4770      	bx	lr
 80072b2:	bf00      	nop
 80072b4:	20000c08 	.word	0x20000c08
 80072b8:	20000c5c 	.word	0x20000c5c

080072bc <MX_FREERTOS_Init>:
/**
 * @brief  FreeRTOS initialization
 * @param  None
 * @retval None
 */
void MX_FREERTOS_Init(void) {
 80072bc:	b5b0      	push	{r4, r5, r7, lr}
 80072be:	b08e      	sub	sp, #56	; 0x38
 80072c0:	af00      	add	r7, sp, #0
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of updateScreen */
	osThreadDef(updateScreen, ScreenAndButtonTask, osPriorityNormal, 0, 256);
 80072c2:	4b14      	ldr	r3, [pc, #80]	; (8007314 <MX_FREERTOS_Init+0x58>)
 80072c4:	f107 041c 	add.w	r4, r7, #28
 80072c8:	461d      	mov	r5, r3
 80072ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80072cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80072ce:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80072d2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	updateScreenHandle = osThreadCreate(osThread(updateScreen), NULL);
 80072d6:	f107 031c 	add.w	r3, r7, #28
 80072da:	2100      	movs	r1, #0
 80072dc:	4618      	mov	r0, r3
 80072de:	f7fe fd72 	bl	8005dc6 <osThreadCreate>
 80072e2:	4603      	mov	r3, r0
 80072e4:	4a0c      	ldr	r2, [pc, #48]	; (8007318 <MX_FREERTOS_Init+0x5c>)
 80072e6:	6013      	str	r3, [r2, #0]

	/* definition and creation of configuringPara */
	osThreadDef(configuringPara, FansTask, osPriorityNormal, 0, 256);
 80072e8:	4b0c      	ldr	r3, [pc, #48]	; (800731c <MX_FREERTOS_Init+0x60>)
 80072ea:	463c      	mov	r4, r7
 80072ec:	461d      	mov	r5, r3
 80072ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80072f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80072f2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80072f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	configuringParaHandle = osThreadCreate(osThread(configuringPara), NULL);
 80072fa:	463b      	mov	r3, r7
 80072fc:	2100      	movs	r1, #0
 80072fe:	4618      	mov	r0, r3
 8007300:	f7fe fd61 	bl	8005dc6 <osThreadCreate>
 8007304:	4603      	mov	r3, r0
 8007306:	4a06      	ldr	r2, [pc, #24]	; (8007320 <MX_FREERTOS_Init+0x64>)
 8007308:	6013      	str	r3, [r2, #0]

	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

}
 800730a:	bf00      	nop
 800730c:	3738      	adds	r7, #56	; 0x38
 800730e:	46bd      	mov	sp, r7
 8007310:	bdb0      	pop	{r4, r5, r7, pc}
 8007312:	bf00      	nop
 8007314:	0800ad54 	.word	0x0800ad54
 8007318:	20001740 	.word	0x20001740
 800731c:	0800ad70 	.word	0x0800ad70
 8007320:	20001744 	.word	0x20001744

08007324 <ScreenAndButtonTask>:
 * @brief  Function implementing the updateScreen thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void ScreenAndButtonTask(void const *argument) {
 8007324:	b580      	push	{r7, lr}
 8007326:	b082      	sub	sp, #8
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN ScreenAndButtonTask */
	/* Infinite loop */
	for (;;) {
		//кнопка
		if (NVIC_GetEnableIRQ(EXTI15_10_IRQn) == 0) {//если прерывания выключены
 800732c:	2028      	movs	r0, #40	; 0x28
 800732e:	f7ff ff6d 	bl	800720c <__NVIC_GetEnableIRQ>
 8007332:	4603      	mov	r3, r0
 8007334:	2b00      	cmp	r3, #0
 8007336:	d113      	bne.n	8007360 <ScreenAndButtonTask+0x3c>
			if (ssd1306_CheckDisplayStatus() == SSD1306_ON) { // если дисплей включен
 8007338:	f002 feea 	bl	800a110 <ssd1306_CheckDisplayStatus>
 800733c:	4603      	mov	r3, r0
 800733e:	2b01      	cmp	r3, #1
 8007340:	d102      	bne.n	8007348 <ScreenAndButtonTask+0x24>
				KEYBOARD_ButtonClick();
 8007342:	f7fe fce1 	bl	8005d08 <KEYBOARD_ButtonClick>
 8007346:	e001      	b.n	800734c <ScreenAndButtonTask+0x28>
			} else { //если дисплей выключен, включаем дисплей
				ssd1306_on();
 8007348:	f002 feca 	bl	800a0e0 <ssd1306_on>
			}
			// в любом случае включаем прирывания кнопки и сбрасываем флаг
			__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_12);
 800734c:	4b11      	ldr	r3, [pc, #68]	; (8007394 <ScreenAndButtonTask+0x70>)
 800734e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007352:	615a      	str	r2, [r3, #20]
			NVIC_ClearPendingIRQ(EXTI15_10_IRQn);
 8007354:	2028      	movs	r0, #40	; 0x28
 8007356:	f7ff ff79 	bl	800724c <__NVIC_ClearPendingIRQ>
			HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800735a:	2028      	movs	r0, #40	; 0x28
 800735c:	f7f9 fca0 	bl	8000ca0 <HAL_NVIC_EnableIRQ>
		} //кнопка	END

		// выключаем дисплей, после указаного периода
		if (((HAL_GetTick() - timeOfLastClick) > DISPLAY_DOWNTIME) && ssd1306_CheckDisplayStatus()) {
 8007360:	f7f9 fb76 	bl	8000a50 <HAL_GetTick>
 8007364:	4602      	mov	r2, r0
 8007366:	4b0c      	ldr	r3, [pc, #48]	; (8007398 <ScreenAndButtonTask+0x74>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	1ad3      	subs	r3, r2, r3
 800736c:	f64e 2260 	movw	r2, #60000	; 0xea60
 8007370:	4293      	cmp	r3, r2
 8007372:	d909      	bls.n	8007388 <ScreenAndButtonTask+0x64>
 8007374:	f002 fecc 	bl	800a110 <ssd1306_CheckDisplayStatus>
 8007378:	4603      	mov	r3, r0
 800737a:	2b00      	cmp	r3, #0
 800737c:	d004      	beq.n	8007388 <ScreenAndButtonTask+0x64>
			ssd1306_off();
 800737e:	f002 febb 	bl	800a0f8 <ssd1306_off>
			STORING_SaveSetting();
 8007382:	f001 f9e7 	bl	8008754 <STORING_SaveSetting>
 8007386:	e001      	b.n	800738c <ScreenAndButtonTask+0x68>
		} else {
			DISPLAY_ShowMenu();
 8007388:	f7f9 fa8e 	bl	80008a8 <DISPLAY_ShowMenu>
		}
		osDelay(50);
 800738c:	2032      	movs	r0, #50	; 0x32
 800738e:	f7fe fd66 	bl	8005e5e <osDelay>
		if (NVIC_GetEnableIRQ(EXTI15_10_IRQn) == 0) {//если прерывания выключены
 8007392:	e7cb      	b.n	800732c <ScreenAndButtonTask+0x8>
 8007394:	40010400 	.word	0x40010400
 8007398:	200000b4 	.word	0x200000b4

0800739c <FansTask>:
 * @brief Function implementing the configuringPara thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask02 */
void FansTask(void const *argument) {
 800739c:	b580      	push	{r7, lr}
 800739e:	b084      	sub	sp, #16
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN FansTask */
	/* Infinite loop */
	for (;;) {
		uint32_t startTimeFansTask = HAL_GetTick();
 80073a4:	f7f9 fb54 	bl	8000a50 <HAL_GetTick>
 80073a8:	60f8      	str	r0, [r7, #12]

		HAL_RTC_GetTime(&hrtc, &currentTime, RTC_FORMAT_BIN);	// получение времени
 80073aa:	2200      	movs	r2, #0
 80073ac:	4926      	ldr	r1, [pc, #152]	; (8007448 <FansTask+0xac>)
 80073ae:	4827      	ldr	r0, [pc, #156]	; (800744c <FansTask+0xb0>)
 80073b0:	f7fc f8ca 	bl	8003548 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &currentDate, RTC_FORMAT_BIN);	// получение даты. НЕОБХОДИМО для получения времени.
 80073b4:	2200      	movs	r2, #0
 80073b6:	4926      	ldr	r1, [pc, #152]	; (8007450 <FansTask+0xb4>)
 80073b8:	4824      	ldr	r0, [pc, #144]	; (800744c <FansTask+0xb0>)
 80073ba:	f7fc f9ca 	bl	8003752 <HAL_RTC_GetDate>

		timeNow = (uint32_t) (((uint32_t) currentTime.Hours * 3600U) + ((uint32_t) currentTime.Minutes * 60U) + ((uint32_t) currentTime.Seconds)); //Преобразуем время из структуры в одно число
 80073be:	4b22      	ldr	r3, [pc, #136]	; (8007448 <FansTask+0xac>)
 80073c0:	781b      	ldrb	r3, [r3, #0]
 80073c2:	461a      	mov	r2, r3
 80073c4:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80073c8:	fb03 f202 	mul.w	r2, r3, r2
 80073cc:	4b1e      	ldr	r3, [pc, #120]	; (8007448 <FansTask+0xac>)
 80073ce:	785b      	ldrb	r3, [r3, #1]
 80073d0:	4619      	mov	r1, r3
 80073d2:	460b      	mov	r3, r1
 80073d4:	011b      	lsls	r3, r3, #4
 80073d6:	1a5b      	subs	r3, r3, r1
 80073d8:	009b      	lsls	r3, r3, #2
 80073da:	4413      	add	r3, r2
 80073dc:	4a1a      	ldr	r2, [pc, #104]	; (8007448 <FansTask+0xac>)
 80073de:	7892      	ldrb	r2, [r2, #2]
 80073e0:	4413      	add	r3, r2
 80073e2:	4a1c      	ldr	r2, [pc, #112]	; (8007454 <FansTask+0xb8>)
 80073e4:	6013      	str	r3, [r2, #0]

		//  определяем день или ночь
		if (timeNow < dayOn.FullTime || timeNow > dayOff.FullTime) {
 80073e6:	4b1c      	ldr	r3, [pc, #112]	; (8007458 <FansTask+0xbc>)
 80073e8:	695a      	ldr	r2, [r3, #20]
 80073ea:	4b1a      	ldr	r3, [pc, #104]	; (8007454 <FansTask+0xb8>)
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	429a      	cmp	r2, r3
 80073f0:	d805      	bhi.n	80073fe <FansTask+0x62>
 80073f2:	4b1a      	ldr	r3, [pc, #104]	; (800745c <FansTask+0xc0>)
 80073f4:	695a      	ldr	r2, [r3, #20]
 80073f6:	4b17      	ldr	r3, [pc, #92]	; (8007454 <FansTask+0xb8>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	429a      	cmp	r2, r3
 80073fc:	d203      	bcs.n	8007406 <FansTask+0x6a>
			g_timeOfDay = FANS_TIME_NIGHT;
 80073fe:	4b18      	ldr	r3, [pc, #96]	; (8007460 <FansTask+0xc4>)
 8007400:	2200      	movs	r2, #0
 8007402:	701a      	strb	r2, [r3, #0]
 8007404:	e002      	b.n	800740c <FansTask+0x70>
		} else {
			g_timeOfDay = FANS_TIME_DAY;
 8007406:	4b16      	ldr	r3, [pc, #88]	; (8007460 <FansTask+0xc4>)
 8007408:	2201      	movs	r2, #1
 800740a:	701a      	strb	r2, [r3, #0]
		}

		FANS_SetSpeed(); //устанавливаем скорость для всех вентиляторов
 800740c:	f7fe fa14 	bl	8005838 <FANS_SetSpeed>

		//Переключение суток
		if (g_flagNewDay) {
 8007410:	4b14      	ldr	r3, [pc, #80]	; (8007464 <FansTask+0xc8>)
 8007412:	781b      	ldrb	r3, [r3, #0]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d006      	beq.n	8007426 <FansTask+0x8a>
			FANS_CalculationDate();  // переводим текущую дату в число
 8007418:	f7fe f906 	bl	8005628 <FANS_CalculationDate>
			FANS_UpdateCyrrentDays(); //считаем текущие дни
 800741c:	f7fd fe22 	bl	8005064 <FANS_UpdateCyrrentDays>
			g_flagNewDay = 0;
 8007420:	4b10      	ldr	r3, [pc, #64]	; (8007464 <FansTask+0xc8>)
 8007422:	2200      	movs	r2, #0
 8007424:	701a      	strb	r2, [r3, #0]
		}

		HAL_IWDG_Refresh(&hiwdg); //Сбрасываем сторожевой таймер
 8007426:	4810      	ldr	r0, [pc, #64]	; (8007468 <FansTask+0xcc>)
 8007428:	f7fa fc21 	bl	8001c6e <HAL_IWDG_Refresh>
		uint32_t runTimeFansTask = HAL_GetTick() - startTimeFansTask;
 800742c:	f7f9 fb10 	bl	8000a50 <HAL_GetTick>
 8007430:	4602      	mov	r2, r0
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	1ad3      	subs	r3, r2, r3
 8007436:	60bb      	str	r3, [r7, #8]

		osDelay(1000 - runTimeFansTask);
 8007438:	68bb      	ldr	r3, [r7, #8]
 800743a:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 800743e:	4618      	mov	r0, r3
 8007440:	f7fe fd0d 	bl	8005e5e <osDelay>
	for (;;) {
 8007444:	e7ae      	b.n	80073a4 <FansTask+0x8>
 8007446:	bf00      	nop
 8007448:	20000e5c 	.word	0x20000e5c
 800744c:	200017a4 	.word	0x200017a4
 8007450:	20000ebc 	.word	0x20000ebc
 8007454:	20000c04 	.word	0x20000c04
 8007458:	20000e8c 	.word	0x20000e8c
 800745c:	20000ea4 	.word	0x20000ea4
 8007460:	2000130c 	.word	0x2000130c
 8007464:	200000ad 	.word	0x200000ad
 8007468:	20001794 	.word	0x20001794

0800746c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b08a      	sub	sp, #40	; 0x28
 8007470:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007472:	f107 0314 	add.w	r3, r7, #20
 8007476:	2200      	movs	r2, #0
 8007478:	601a      	str	r2, [r3, #0]
 800747a:	605a      	str	r2, [r3, #4]
 800747c:	609a      	str	r2, [r3, #8]
 800747e:	60da      	str	r2, [r3, #12]
 8007480:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007482:	4b41      	ldr	r3, [pc, #260]	; (8007588 <MX_GPIO_Init+0x11c>)
 8007484:	695b      	ldr	r3, [r3, #20]
 8007486:	4a40      	ldr	r2, [pc, #256]	; (8007588 <MX_GPIO_Init+0x11c>)
 8007488:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800748c:	6153      	str	r3, [r2, #20]
 800748e:	4b3e      	ldr	r3, [pc, #248]	; (8007588 <MX_GPIO_Init+0x11c>)
 8007490:	695b      	ldr	r3, [r3, #20]
 8007492:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007496:	613b      	str	r3, [r7, #16]
 8007498:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800749a:	4b3b      	ldr	r3, [pc, #236]	; (8007588 <MX_GPIO_Init+0x11c>)
 800749c:	695b      	ldr	r3, [r3, #20]
 800749e:	4a3a      	ldr	r2, [pc, #232]	; (8007588 <MX_GPIO_Init+0x11c>)
 80074a0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80074a4:	6153      	str	r3, [r2, #20]
 80074a6:	4b38      	ldr	r3, [pc, #224]	; (8007588 <MX_GPIO_Init+0x11c>)
 80074a8:	695b      	ldr	r3, [r3, #20]
 80074aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80074ae:	60fb      	str	r3, [r7, #12]
 80074b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80074b2:	4b35      	ldr	r3, [pc, #212]	; (8007588 <MX_GPIO_Init+0x11c>)
 80074b4:	695b      	ldr	r3, [r3, #20]
 80074b6:	4a34      	ldr	r2, [pc, #208]	; (8007588 <MX_GPIO_Init+0x11c>)
 80074b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80074bc:	6153      	str	r3, [r2, #20]
 80074be:	4b32      	ldr	r3, [pc, #200]	; (8007588 <MX_GPIO_Init+0x11c>)
 80074c0:	695b      	ldr	r3, [r3, #20]
 80074c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074c6:	60bb      	str	r3, [r7, #8]
 80074c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80074ca:	4b2f      	ldr	r3, [pc, #188]	; (8007588 <MX_GPIO_Init+0x11c>)
 80074cc:	695b      	ldr	r3, [r3, #20]
 80074ce:	4a2e      	ldr	r2, [pc, #184]	; (8007588 <MX_GPIO_Init+0x11c>)
 80074d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80074d4:	6153      	str	r3, [r2, #20]
 80074d6:	4b2c      	ldr	r3, [pc, #176]	; (8007588 <MX_GPIO_Init+0x11c>)
 80074d8:	695b      	ldr	r3, [r3, #20]
 80074da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80074de:	607b      	str	r3, [r7, #4]
 80074e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 80074e2:	2200      	movs	r2, #0
 80074e4:	213c      	movs	r1, #60	; 0x3c
 80074e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80074ea:	f7f9 ff47 	bl	800137c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80074ee:	2200      	movs	r2, #0
 80074f0:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80074f4:	4825      	ldr	r0, [pc, #148]	; (800758c <MX_GPIO_Init+0x120>)
 80074f6:	f7f9 ff41 	bl	800137c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA2 PA3 PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80074fa:	233c      	movs	r3, #60	; 0x3c
 80074fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80074fe:	2301      	movs	r3, #1
 8007500:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007502:	2300      	movs	r3, #0
 8007504:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007506:	2300      	movs	r3, #0
 8007508:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800750a:	f107 0314 	add.w	r3, r7, #20
 800750e:	4619      	mov	r1, r3
 8007510:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007514:	f7f9 fdb8 	bl	8001088 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8007518:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800751c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800751e:	2301      	movs	r3, #1
 8007520:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8007522:	2302      	movs	r3, #2
 8007524:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8007526:	2301      	movs	r3, #1
 8007528:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800752a:	f107 0314 	add.w	r3, r7, #20
 800752e:	4619      	mov	r1, r3
 8007530:	4816      	ldr	r0, [pc, #88]	; (800758c <MX_GPIO_Init+0x120>)
 8007532:	f7f9 fda9 	bl	8001088 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8007536:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800753a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800753c:	2301      	movs	r3, #1
 800753e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007540:	2300      	movs	r3, #0
 8007542:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007544:	2300      	movs	r3, #0
 8007546:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007548:	f107 0314 	add.w	r3, r7, #20
 800754c:	4619      	mov	r1, r3
 800754e:	480f      	ldr	r0, [pc, #60]	; (800758c <MX_GPIO_Init+0x120>)
 8007550:	f7f9 fd9a 	bl	8001088 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8007554:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007558:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800755a:	4b0d      	ldr	r3, [pc, #52]	; (8007590 <MX_GPIO_Init+0x124>)
 800755c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800755e:	2302      	movs	r3, #2
 8007560:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007562:	f107 0314 	add.w	r3, r7, #20
 8007566:	4619      	mov	r1, r3
 8007568:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800756c:	f7f9 fd8c 	bl	8001088 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8007570:	2200      	movs	r2, #0
 8007572:	2105      	movs	r1, #5
 8007574:	2028      	movs	r0, #40	; 0x28
 8007576:	f7f9 fb77 	bl	8000c68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800757a:	2028      	movs	r0, #40	; 0x28
 800757c:	f7f9 fb90 	bl	8000ca0 <HAL_NVIC_EnableIRQ>

}
 8007580:	bf00      	nop
 8007582:	3728      	adds	r7, #40	; 0x28
 8007584:	46bd      	mov	sp, r7
 8007586:	bd80      	pop	{r7, pc}
 8007588:	40021000 	.word	0x40021000
 800758c:	48000400 	.word	0x48000400
 8007590:	10110000 	.word	0x10110000

08007594 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8007598:	4b1b      	ldr	r3, [pc, #108]	; (8007608 <MX_I2C1_Init+0x74>)
 800759a:	4a1c      	ldr	r2, [pc, #112]	; (800760c <MX_I2C1_Init+0x78>)
 800759c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800759e:	4b1a      	ldr	r3, [pc, #104]	; (8007608 <MX_I2C1_Init+0x74>)
 80075a0:	4a1b      	ldr	r2, [pc, #108]	; (8007610 <MX_I2C1_Init+0x7c>)
 80075a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80075a4:	4b18      	ldr	r3, [pc, #96]	; (8007608 <MX_I2C1_Init+0x74>)
 80075a6:	2200      	movs	r2, #0
 80075a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80075aa:	4b17      	ldr	r3, [pc, #92]	; (8007608 <MX_I2C1_Init+0x74>)
 80075ac:	2201      	movs	r2, #1
 80075ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80075b0:	4b15      	ldr	r3, [pc, #84]	; (8007608 <MX_I2C1_Init+0x74>)
 80075b2:	2200      	movs	r2, #0
 80075b4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80075b6:	4b14      	ldr	r3, [pc, #80]	; (8007608 <MX_I2C1_Init+0x74>)
 80075b8:	2200      	movs	r2, #0
 80075ba:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80075bc:	4b12      	ldr	r3, [pc, #72]	; (8007608 <MX_I2C1_Init+0x74>)
 80075be:	2200      	movs	r2, #0
 80075c0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80075c2:	4b11      	ldr	r3, [pc, #68]	; (8007608 <MX_I2C1_Init+0x74>)
 80075c4:	2200      	movs	r2, #0
 80075c6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80075c8:	4b0f      	ldr	r3, [pc, #60]	; (8007608 <MX_I2C1_Init+0x74>)
 80075ca:	2200      	movs	r2, #0
 80075cc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80075ce:	480e      	ldr	r0, [pc, #56]	; (8007608 <MX_I2C1_Init+0x74>)
 80075d0:	f7f9 ff04 	bl	80013dc <HAL_I2C_Init>
 80075d4:	4603      	mov	r3, r0
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d001      	beq.n	80075de <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80075da:	f000 f9a7 	bl	800792c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80075de:	2100      	movs	r1, #0
 80075e0:	4809      	ldr	r0, [pc, #36]	; (8007608 <MX_I2C1_Init+0x74>)
 80075e2:	f7fa fa67 	bl	8001ab4 <HAL_I2CEx_ConfigAnalogFilter>
 80075e6:	4603      	mov	r3, r0
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d001      	beq.n	80075f0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80075ec:	f000 f99e 	bl	800792c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80075f0:	2100      	movs	r1, #0
 80075f2:	4805      	ldr	r0, [pc, #20]	; (8007608 <MX_I2C1_Init+0x74>)
 80075f4:	f7fa faa9 	bl	8001b4a <HAL_I2CEx_ConfigDigitalFilter>
 80075f8:	4603      	mov	r3, r0
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d001      	beq.n	8007602 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80075fe:	f000 f995 	bl	800792c <Error_Handler>
  }

}
 8007602:	bf00      	nop
 8007604:	bd80      	pop	{r7, pc}
 8007606:	bf00      	nop
 8007608:	20001748 	.word	0x20001748
 800760c:	40005400 	.word	0x40005400
 8007610:	2000090e 	.word	0x2000090e

08007614 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b08a      	sub	sp, #40	; 0x28
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800761c:	f107 0314 	add.w	r3, r7, #20
 8007620:	2200      	movs	r2, #0
 8007622:	601a      	str	r2, [r3, #0]
 8007624:	605a      	str	r2, [r3, #4]
 8007626:	609a      	str	r2, [r3, #8]
 8007628:	60da      	str	r2, [r3, #12]
 800762a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	4a17      	ldr	r2, [pc, #92]	; (8007690 <HAL_I2C_MspInit+0x7c>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d127      	bne.n	8007686 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007636:	4b17      	ldr	r3, [pc, #92]	; (8007694 <HAL_I2C_MspInit+0x80>)
 8007638:	695b      	ldr	r3, [r3, #20]
 800763a:	4a16      	ldr	r2, [pc, #88]	; (8007694 <HAL_I2C_MspInit+0x80>)
 800763c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007640:	6153      	str	r3, [r2, #20]
 8007642:	4b14      	ldr	r3, [pc, #80]	; (8007694 <HAL_I2C_MspInit+0x80>)
 8007644:	695b      	ldr	r3, [r3, #20]
 8007646:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800764a:	613b      	str	r3, [r7, #16]
 800764c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800764e:	23c0      	movs	r3, #192	; 0xc0
 8007650:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007652:	2312      	movs	r3, #18
 8007654:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007656:	2301      	movs	r3, #1
 8007658:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800765a:	2303      	movs	r3, #3
 800765c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800765e:	2304      	movs	r3, #4
 8007660:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007662:	f107 0314 	add.w	r3, r7, #20
 8007666:	4619      	mov	r1, r3
 8007668:	480b      	ldr	r0, [pc, #44]	; (8007698 <HAL_I2C_MspInit+0x84>)
 800766a:	f7f9 fd0d 	bl	8001088 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800766e:	4b09      	ldr	r3, [pc, #36]	; (8007694 <HAL_I2C_MspInit+0x80>)
 8007670:	69db      	ldr	r3, [r3, #28]
 8007672:	4a08      	ldr	r2, [pc, #32]	; (8007694 <HAL_I2C_MspInit+0x80>)
 8007674:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007678:	61d3      	str	r3, [r2, #28]
 800767a:	4b06      	ldr	r3, [pc, #24]	; (8007694 <HAL_I2C_MspInit+0x80>)
 800767c:	69db      	ldr	r3, [r3, #28]
 800767e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007682:	60fb      	str	r3, [r7, #12]
 8007684:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8007686:	bf00      	nop
 8007688:	3728      	adds	r7, #40	; 0x28
 800768a:	46bd      	mov	sp, r7
 800768c:	bd80      	pop	{r7, pc}
 800768e:	bf00      	nop
 8007690:	40005400 	.word	0x40005400
 8007694:	40021000 	.word	0x40021000
 8007698:	48000400 	.word	0x48000400

0800769c <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	af00      	add	r7, sp, #0

  hiwdg.Instance = IWDG;
 80076a0:	4b0b      	ldr	r3, [pc, #44]	; (80076d0 <MX_IWDG_Init+0x34>)
 80076a2:	4a0c      	ldr	r2, [pc, #48]	; (80076d4 <MX_IWDG_Init+0x38>)
 80076a4:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_32;
 80076a6:	4b0a      	ldr	r3, [pc, #40]	; (80076d0 <MX_IWDG_Init+0x34>)
 80076a8:	2203      	movs	r2, #3
 80076aa:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 2499;
 80076ac:	4b08      	ldr	r3, [pc, #32]	; (80076d0 <MX_IWDG_Init+0x34>)
 80076ae:	f640 12c3 	movw	r2, #2499	; 0x9c3
 80076b2:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 2499;
 80076b4:	4b06      	ldr	r3, [pc, #24]	; (80076d0 <MX_IWDG_Init+0x34>)
 80076b6:	f640 12c3 	movw	r2, #2499	; 0x9c3
 80076ba:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80076bc:	4804      	ldr	r0, [pc, #16]	; (80076d0 <MX_IWDG_Init+0x34>)
 80076be:	f7fa fa90 	bl	8001be2 <HAL_IWDG_Init>
 80076c2:	4603      	mov	r3, r0
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d001      	beq.n	80076cc <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 80076c8:	f000 f930 	bl	800792c <Error_Handler>
  }

}
 80076cc:	bf00      	nop
 80076ce:	bd80      	pop	{r7, pc}
 80076d0:	20001794 	.word	0x20001794
 80076d4:	40003000 	.word	0x40003000

080076d8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */

int main(void) {
 80076d8:	b580      	push	{r7, lr}
 80076da:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80076dc:	f7f9 f98e 	bl	80009fc <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80076e0:	f000 f88a 	bl	80077f8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80076e4:	f7ff fec2 	bl	800746c <MX_GPIO_Init>
	MX_I2C1_Init();
 80076e8:	f7ff ff54 	bl	8007594 <MX_I2C1_Init>
	MX_RTC_Init();
 80076ec:	f000 f926 	bl	800793c <MX_RTC_Init>
	MX_TIM1_Init();
 80076f0:	f000 faca 	bl	8007c88 <MX_TIM1_Init>
	MX_TIM2_Init();
 80076f4:	f000 fb7a 	bl	8007dec <MX_TIM2_Init>
	MX_TIM3_Init();
 80076f8:	f000 fbcc 	bl	8007e94 <MX_TIM3_Init>
	MX_TIM4_Init();
 80076fc:	f000 fc44 	bl	8007f88 <MX_TIM4_Init>
	MX_TIM6_Init();
 8007700:	f000 fc92 	bl	8008028 <MX_TIM6_Init>
	MX_IWDG_Init();
 8007704:	f7ff ffca 	bl	800769c <MX_IWDG_Init>
	/* USER CODE BEGIN 2 */
	HAL_IWDG_Refresh(&hiwdg);
 8007708:	4831      	ldr	r0, [pc, #196]	; (80077d0 <main+0xf8>)
 800770a:	f7fa fab0 	bl	8001c6e <HAL_IWDG_Refresh>
	HAL_TIM_Base_Start_IT(&htim4); //Timer4 need to switch DayHigh and DayLow. Value saved into TIM4->ARR.
 800770e:	4831      	ldr	r0, [pc, #196]	; (80077d4 <main+0xfc>)
 8007710:	f7fc fab2 	bl	8003c78 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim6);
 8007714:	4830      	ldr	r0, [pc, #192]	; (80077d8 <main+0x100>)
 8007716:	f7fc faaf 	bl	8003c78 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_2); //Timer2 need for Encoder
 800771a:	2104      	movs	r1, #4
 800771c:	482f      	ldr	r0, [pc, #188]	; (80077dc <main+0x104>)
 800771e:	f7fc fbeb 	bl	8003ef8 <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1); // Start CHANNEL_1. Define speed fan1.
 8007722:	2100      	movs	r1, #0
 8007724:	482e      	ldr	r0, [pc, #184]	; (80077e0 <main+0x108>)
 8007726:	f7fc fafd 	bl	8003d24 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2); // Start CHANNEL_2. Define speed fan2.
 800772a:	2104      	movs	r1, #4
 800772c:	482c      	ldr	r0, [pc, #176]	; (80077e0 <main+0x108>)
 800772e:	f7fc faf9 	bl	8003d24 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3); // Start CHANNEL_3. Define speed fan3.
 8007732:	2108      	movs	r1, #8
 8007734:	482a      	ldr	r0, [pc, #168]	; (80077e0 <main+0x108>)
 8007736:	f7fc faf5 	bl	8003d24 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4); // Start CHANNEL_4. Define speed fan4.
 800773a:	210c      	movs	r1, #12
 800773c:	4828      	ldr	r0, [pc, #160]	; (80077e0 <main+0x108>)
 800773e:	f7fc faf1 	bl	8003d24 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8007742:	2100      	movs	r1, #0
 8007744:	4827      	ldr	r0, [pc, #156]	; (80077e4 <main+0x10c>)
 8007746:	f7fc faed 	bl	8003d24 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800774a:	2104      	movs	r1, #4
 800774c:	4825      	ldr	r0, [pc, #148]	; (80077e4 <main+0x10c>)
 800774e:	f7fc fae9 	bl	8003d24 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8007752:	2108      	movs	r1, #8
 8007754:	4823      	ldr	r0, [pc, #140]	; (80077e4 <main+0x10c>)
 8007756:	f7fc fae5 	bl	8003d24 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 800775a:	210c      	movs	r1, #12
 800775c:	4821      	ldr	r0, [pc, #132]	; (80077e4 <main+0x10c>)
 800775e:	f7fc fae1 	bl	8003d24 <HAL_TIM_PWM_Start>
	HAL_RTC_GetTime(&hrtc, &currentTime, RTC_FORMAT_BIN);
 8007762:	2200      	movs	r2, #0
 8007764:	4920      	ldr	r1, [pc, #128]	; (80077e8 <main+0x110>)
 8007766:	4821      	ldr	r0, [pc, #132]	; (80077ec <main+0x114>)
 8007768:	f7fb feee 	bl	8003548 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &currentDate, RTC_FORMAT_BIN);
 800776c:	2200      	movs	r2, #0
 800776e:	4920      	ldr	r1, [pc, #128]	; (80077f0 <main+0x118>)
 8007770:	481e      	ldr	r0, [pc, #120]	; (80077ec <main+0x114>)
 8007772:	f7fb ffee 	bl	8003752 <HAL_RTC_GetDate>
	//Дата обновляется не сразу, поэтому требуется задержка:
	while (currentDate.Year == 0 && currentDate.Month == 0 && currentDate.Date == 0) {
 8007776:	e002      	b.n	800777e <main+0xa6>
		HAL_Delay(1);
 8007778:	2001      	movs	r0, #1
 800777a:	f7f9 f975 	bl	8000a68 <HAL_Delay>
	while (currentDate.Year == 0 && currentDate.Month == 0 && currentDate.Date == 0) {
 800777e:	4b1c      	ldr	r3, [pc, #112]	; (80077f0 <main+0x118>)
 8007780:	78db      	ldrb	r3, [r3, #3]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d107      	bne.n	8007796 <main+0xbe>
 8007786:	4b1a      	ldr	r3, [pc, #104]	; (80077f0 <main+0x118>)
 8007788:	785b      	ldrb	r3, [r3, #1]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d103      	bne.n	8007796 <main+0xbe>
 800778e:	4b18      	ldr	r3, [pc, #96]	; (80077f0 <main+0x118>)
 8007790:	789b      	ldrb	r3, [r3, #2]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d0f0      	beq.n	8007778 <main+0xa0>
	}
	HAL_Delay(500);
 8007796:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800779a:	f7f9 f965 	bl	8000a68 <HAL_Delay>
	FANS_CalculationDate();  // переводим текущую дату в число
 800779e:	f7fd ff43 	bl	8005628 <FANS_CalculationDate>
	STORING_ReadSetting();
 80077a2:	f001 f8f5 	bl	8008990 <STORING_ReadSetting>
	STORING_CheckFirstStart(); //проверяем, что прошивка новая
 80077a6:	f000 fdf1 	bl	800838c <STORING_CheckFirstStart>
	FANS_FillProgram(curMainMenu); //функция заполняет массивы циклов из данных о количестве дней и режимов
 80077aa:	4b12      	ldr	r3, [pc, #72]	; (80077f4 <main+0x11c>)
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	4618      	mov	r0, r3
 80077b0:	f7fd fd3a 	bl	8005228 <FANS_FillProgram>
	FANS_UpdateCyrrentDays(); //Cчитаем текущие дни
 80077b4:	f7fd fc56 	bl	8005064 <FANS_UpdateCyrrentDays>
	MENU_Fill();
 80077b8:	f001 f90e 	bl	80089d8 <MENU_Fill>
	ssd1306_Init();
 80077bc:	f002 fc24 	bl	800a008 <ssd1306_Init>
	ssd1306_on();
 80077c0:	f002 fc8e 	bl	800a0e0 <ssd1306_on>
	/* USER CODE END 2 */

	/* Call init function for freertos objects (in freertos.c) */

	MX_FREERTOS_Init();
 80077c4:	f7ff fd7a 	bl	80072bc <MX_FREERTOS_Init>

	/* Start scheduler */

	//---------------
	//---------------
	osKernelStart();
 80077c8:	f7fe faf6 	bl	8005db8 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 80077cc:	e7fe      	b.n	80077cc <main+0xf4>
 80077ce:	bf00      	nop
 80077d0:	20001794 	.word	0x20001794
 80077d4:	20001804 	.word	0x20001804
 80077d8:	20001884 	.word	0x20001884
 80077dc:	20001904 	.word	0x20001904
 80077e0:	200018c4 	.word	0x200018c4
 80077e4:	20001844 	.word	0x20001844
 80077e8:	20000e5c 	.word	0x20000e5c
 80077ec:	200017a4 	.word	0x200017a4
 80077f0:	20000ebc 	.word	0x20000ebc
 80077f4:	2000001c 	.word	0x2000001c

080077f8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b09e      	sub	sp, #120	; 0x78
 80077fc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80077fe:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007802:	2228      	movs	r2, #40	; 0x28
 8007804:	2100      	movs	r1, #0
 8007806:	4618      	mov	r0, r3
 8007808:	f002 fe3c 	bl	800a484 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800780c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007810:	2200      	movs	r2, #0
 8007812:	601a      	str	r2, [r3, #0]
 8007814:	605a      	str	r2, [r3, #4]
 8007816:	609a      	str	r2, [r3, #8]
 8007818:	60da      	str	r2, [r3, #12]
 800781a:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 800781c:	463b      	mov	r3, r7
 800781e:	223c      	movs	r2, #60	; 0x3c
 8007820:	2100      	movs	r1, #0
 8007822:	4618      	mov	r0, r3
 8007824:	f002 fe2e 	bl	800a484 <memset>

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 8007828:	f7fa fa32 	bl	8001c90 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800782c:	4b28      	ldr	r3, [pc, #160]	; (80078d0 <SystemClock_Config+0xd8>)
 800782e:	6a1b      	ldr	r3, [r3, #32]
 8007830:	4a27      	ldr	r2, [pc, #156]	; (80078d0 <SystemClock_Config+0xd8>)
 8007832:	f023 0318 	bic.w	r3, r3, #24
 8007836:	6213      	str	r3, [r2, #32]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_LSE;
 8007838:	230f      	movs	r3, #15
 800783a:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800783c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007840:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8007842:	2300      	movs	r3, #0
 8007844:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8007846:	2301      	movs	r3, #1
 8007848:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800784a:	2301      	movs	r3, #1
 800784c:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800784e:	2310      	movs	r3, #16
 8007850:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8007852:	2301      	movs	r3, #1
 8007854:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007856:	2302      	movs	r3, #2
 8007858:	66fb      	str	r3, [r7, #108]	; 0x6c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800785a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800785e:	673b      	str	r3, [r7, #112]	; 0x70
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8007860:	2300      	movs	r3, #0
 8007862:	677b      	str	r3, [r7, #116]	; 0x74
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8007864:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007868:	4618      	mov	r0, r3
 800786a:	f7fa fa21 	bl	8001cb0 <HAL_RCC_OscConfig>
 800786e:	4603      	mov	r3, r0
 8007870:	2b00      	cmp	r3, #0
 8007872:	d001      	beq.n	8007878 <SystemClock_Config+0x80>
		Error_Handler();
 8007874:	f000 f85a 	bl	800792c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007878:	230f      	movs	r3, #15
 800787a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800787c:	2302      	movs	r3, #2
 800787e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8007880:	2380      	movs	r3, #128	; 0x80
 8007882:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8007884:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8007888:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800788a:	2300      	movs	r3, #0
 800788c:	64fb      	str	r3, [r7, #76]	; 0x4c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 800788e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007892:	2100      	movs	r1, #0
 8007894:	4618      	mov	r0, r3
 8007896:	f7fb f913 	bl	8002ac0 <HAL_RCC_ClockConfig>
 800789a:	4603      	mov	r3, r0
 800789c:	2b00      	cmp	r3, #0
 800789e:	d001      	beq.n	80078a4 <SystemClock_Config+0xac>
		Error_Handler();
 80078a0:	f000 f844 	bl	800792c <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1 | RCC_PERIPHCLK_RTC | RCC_PERIPHCLK_TIM1;
 80078a4:	4b0b      	ldr	r3, [pc, #44]	; (80078d4 <SystemClock_Config+0xdc>)
 80078a6:	603b      	str	r3, [r7, #0]
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80078a8:	2300      	movs	r3, #0
 80078aa:	61fb      	str	r3, [r7, #28]
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80078ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80078b0:	607b      	str	r3, [r7, #4]
	PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80078b2:	2300      	movs	r3, #0
 80078b4:	633b      	str	r3, [r7, #48]	; 0x30
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80078b6:	463b      	mov	r3, r7
 80078b8:	4618      	mov	r0, r3
 80078ba:	f7fb fb47 	bl	8002f4c <HAL_RCCEx_PeriphCLKConfig>
 80078be:	4603      	mov	r3, r0
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d001      	beq.n	80078c8 <SystemClock_Config+0xd0>
		Error_Handler();
 80078c4:	f000 f832 	bl	800792c <Error_Handler>
	}
}
 80078c8:	bf00      	nop
 80078ca:	3778      	adds	r7, #120	; 0x78
 80078cc:	46bd      	mov	sp, r7
 80078ce:	bd80      	pop	{r7, pc}
 80078d0:	40021000 	.word	0x40021000
 80078d4:	00011020 	.word	0x00011020

080078d8 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80078d8:	b580      	push	{r7, lr}
 80078da:	b082      	sub	sp, #8
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */
	if (htim->Instance == TIM4) //check if the interrupt comes from TIM4
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	4a0e      	ldr	r2, [pc, #56]	; (8007920 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d10e      	bne.n	8007908 <HAL_TIM_PeriodElapsedCallback+0x30>
	{
		g_operatingMode = !g_operatingMode;
 80078ea:	4b0e      	ldr	r3, [pc, #56]	; (8007924 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80078ec:	781b      	ldrb	r3, [r3, #0]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	bf14      	ite	ne
 80078f2:	2301      	movne	r3, #1
 80078f4:	2300      	moveq	r3, #0
 80078f6:	b2db      	uxtb	r3, r3
 80078f8:	f083 0301 	eor.w	r3, r3, #1
 80078fc:	b2db      	uxtb	r3, r3
 80078fe:	f003 0301 	and.w	r3, r3, #1
 8007902:	b2da      	uxtb	r2, r3
 8007904:	4b07      	ldr	r3, [pc, #28]	; (8007924 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8007906:	701a      	strb	r2, [r3, #0]
	}
	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM8) {
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	4a06      	ldr	r2, [pc, #24]	; (8007928 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800790e:	4293      	cmp	r3, r2
 8007910:	d101      	bne.n	8007916 <HAL_TIM_PeriodElapsedCallback+0x3e>
		HAL_IncTick();
 8007912:	f7f9 f889 	bl	8000a28 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8007916:	bf00      	nop
 8007918:	3708      	adds	r7, #8
 800791a:	46bd      	mov	sp, r7
 800791c:	bd80      	pop	{r7, pc}
 800791e:	bf00      	nop
 8007920:	40000800 	.word	0x40000800
 8007924:	200000ae 	.word	0x200000ae
 8007928:	40013400 	.word	0x40013400

0800792c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800792c:	b480      	push	{r7}
 800792e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8007930:	bf00      	nop
 8007932:	46bd      	mov	sp, r7
 8007934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007938:	4770      	bx	lr
	...

0800793c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b08c      	sub	sp, #48	; 0x30
 8007940:	af00      	add	r7, sp, #0
//  RTC_TimeTypeDef sTime = {0};
//  RTC_DateTypeDef sDate = {0};
  RTC_AlarmTypeDef sAlarm = {0};
 8007942:	1d3b      	adds	r3, r7, #4
 8007944:	222c      	movs	r2, #44	; 0x2c
 8007946:	2100      	movs	r1, #0
 8007948:	4618      	mov	r0, r3
 800794a:	f002 fd9b 	bl	800a484 <memset>

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800794e:	4b22      	ldr	r3, [pc, #136]	; (80079d8 <MX_RTC_Init+0x9c>)
 8007950:	4a22      	ldr	r2, [pc, #136]	; (80079dc <MX_RTC_Init+0xa0>)
 8007952:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8007954:	4b20      	ldr	r3, [pc, #128]	; (80079d8 <MX_RTC_Init+0x9c>)
 8007956:	2200      	movs	r2, #0
 8007958:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800795a:	4b1f      	ldr	r3, [pc, #124]	; (80079d8 <MX_RTC_Init+0x9c>)
 800795c:	227f      	movs	r2, #127	; 0x7f
 800795e:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8007960:	4b1d      	ldr	r3, [pc, #116]	; (80079d8 <MX_RTC_Init+0x9c>)
 8007962:	22ff      	movs	r2, #255	; 0xff
 8007964:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8007966:	4b1c      	ldr	r3, [pc, #112]	; (80079d8 <MX_RTC_Init+0x9c>)
 8007968:	2200      	movs	r2, #0
 800796a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800796c:	4b1a      	ldr	r3, [pc, #104]	; (80079d8 <MX_RTC_Init+0x9c>)
 800796e:	2200      	movs	r2, #0
 8007970:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8007972:	4b19      	ldr	r3, [pc, #100]	; (80079d8 <MX_RTC_Init+0x9c>)
 8007974:	2200      	movs	r2, #0
 8007976:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8007978:	4817      	ldr	r0, [pc, #92]	; (80079d8 <MX_RTC_Init+0x9c>)
 800797a:	f7fb fc97 	bl	80032ac <HAL_RTC_Init>
 800797e:	4603      	mov	r3, r0
 8007980:	2b00      	cmp	r3, #0
 8007982:	d001      	beq.n	8007988 <MX_RTC_Init+0x4c>
  {
    Error_Handler();
 8007984:	f7ff ffd2 	bl	800792c <Error_Handler>

  }
  */
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 8007988:	2300      	movs	r3, #0
 800798a:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0;
 800798c:	2300      	movs	r3, #0
 800798e:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 2;
 8007990:	2302      	movs	r3, #2
 8007992:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.SubSeconds = 0;
 8007994:	2300      	movs	r3, #0
 8007996:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8007998:	2300      	movs	r3, #0
 800799a:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800799c:	2300      	movs	r3, #0
 800799e:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY;
 80079a0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80079a4:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80079a6:	2300      	movs	r3, #0
 80079a8:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80079aa:	2300      	movs	r3, #0
 80079ac:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmDateWeekDay = 1;
 80079ae:	2301      	movs	r3, #1
 80079b0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sAlarm.Alarm = RTC_ALARM_A;
 80079b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80079b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 80079ba:	1d3b      	adds	r3, r7, #4
 80079bc:	2200      	movs	r2, #0
 80079be:	4619      	mov	r1, r3
 80079c0:	4805      	ldr	r0, [pc, #20]	; (80079d8 <MX_RTC_Init+0x9c>)
 80079c2:	f7fb ff15 	bl	80037f0 <HAL_RTC_SetAlarm_IT>
 80079c6:	4603      	mov	r3, r0
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d001      	beq.n	80079d0 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 80079cc:	f7ff ffae 	bl	800792c <Error_Handler>
  }

}
 80079d0:	bf00      	nop
 80079d2:	3730      	adds	r7, #48	; 0x30
 80079d4:	46bd      	mov	sp, r7
 80079d6:	bd80      	pop	{r7, pc}
 80079d8:	200017a4 	.word	0x200017a4
 80079dc:	40002800 	.word	0x40002800

080079e0 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b084      	sub	sp, #16
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	4a10      	ldr	r2, [pc, #64]	; (8007a30 <HAL_RTC_MspInit+0x50>)
 80079ee:	4293      	cmp	r3, r2
 80079f0:	d119      	bne.n	8007a26 <HAL_RTC_MspInit+0x46>
 80079f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80079f6:	60fb      	str	r3, [r7, #12]
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	fa93 f3a3 	rbit	r3, r3
 80079fe:	60bb      	str	r3, [r7, #8]
	return result;
 8007a00:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8007a02:	fab3 f383 	clz	r3, r3
 8007a06:	b2db      	uxtb	r3, r3
 8007a08:	461a      	mov	r2, r3
 8007a0a:	4b0a      	ldr	r3, [pc, #40]	; (8007a34 <HAL_RTC_MspInit+0x54>)
 8007a0c:	4413      	add	r3, r2
 8007a0e:	009b      	lsls	r3, r3, #2
 8007a10:	461a      	mov	r2, r3
 8007a12:	2301      	movs	r3, #1
 8007a14:	6013      	str	r3, [r2, #0]

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 5, 0);
 8007a16:	2200      	movs	r2, #0
 8007a18:	2105      	movs	r1, #5
 8007a1a:	2029      	movs	r0, #41	; 0x29
 8007a1c:	f7f9 f924 	bl	8000c68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8007a20:	2029      	movs	r0, #41	; 0x29
 8007a22:	f7f9 f93d 	bl	8000ca0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8007a26:	bf00      	nop
 8007a28:	3710      	adds	r7, #16
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	bd80      	pop	{r7, pc}
 8007a2e:	bf00      	nop
 8007a30:	40002800 	.word	0x40002800
 8007a34:	10908100 	.word	0x10908100

08007a38 <HAL_MspInit>:

/* USER CODE END 0 */
/**
 * Initializes the Global MSP.
 */
void HAL_MspInit(void) {
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b082      	sub	sp, #8
 8007a3c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MspInit 0 */

	/* USER CODE END MspInit 0 */

	__HAL_RCC_SYSCFG_CLK_ENABLE();
 8007a3e:	4b11      	ldr	r3, [pc, #68]	; (8007a84 <HAL_MspInit+0x4c>)
 8007a40:	699b      	ldr	r3, [r3, #24]
 8007a42:	4a10      	ldr	r2, [pc, #64]	; (8007a84 <HAL_MspInit+0x4c>)
 8007a44:	f043 0301 	orr.w	r3, r3, #1
 8007a48:	6193      	str	r3, [r2, #24]
 8007a4a:	4b0e      	ldr	r3, [pc, #56]	; (8007a84 <HAL_MspInit+0x4c>)
 8007a4c:	699b      	ldr	r3, [r3, #24]
 8007a4e:	f003 0301 	and.w	r3, r3, #1
 8007a52:	607b      	str	r3, [r7, #4]
 8007a54:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_PWR_CLK_ENABLE();
 8007a56:	4b0b      	ldr	r3, [pc, #44]	; (8007a84 <HAL_MspInit+0x4c>)
 8007a58:	69db      	ldr	r3, [r3, #28]
 8007a5a:	4a0a      	ldr	r2, [pc, #40]	; (8007a84 <HAL_MspInit+0x4c>)
 8007a5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a60:	61d3      	str	r3, [r2, #28]
 8007a62:	4b08      	ldr	r3, [pc, #32]	; (8007a84 <HAL_MspInit+0x4c>)
 8007a64:	69db      	ldr	r3, [r3, #28]
 8007a66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a6a:	603b      	str	r3, [r7, #0]
 8007a6c:	683b      	ldr	r3, [r7, #0]

	/* System interrupt init*/
	/* PendSV_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8007a6e:	2200      	movs	r2, #0
 8007a70:	210f      	movs	r1, #15
 8007a72:	f06f 0001 	mvn.w	r0, #1
 8007a76:	f7f9 f8f7 	bl	8000c68 <HAL_NVIC_SetPriority>

	/* USER CODE BEGIN MspInit 1 */

	/* USER CODE END MspInit 1 */
}
 8007a7a:	bf00      	nop
 8007a7c:	3708      	adds	r7, #8
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd80      	pop	{r7, pc}
 8007a82:	bf00      	nop
 8007a84:	40021000 	.word	0x40021000

08007a88 <HAL_InitTick>:
 * @note   This function is called  automatically at the beginning of program after
 *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
 * @param  TickPriority: Tick interrupt priority.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority) {
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b08c      	sub	sp, #48	; 0x30
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
	RCC_ClkInitTypeDef clkconfig;
	uint32_t uwTimclock = 0;
 8007a90:	2300      	movs	r3, #0
 8007a92:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t uwPrescalerValue = 0;
 8007a94:	2300      	movs	r3, #0
 8007a96:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t pFLatency;

	/*Configure the TIM8 IRQ priority */
	HAL_NVIC_SetPriority(TIM8_UP_IRQn, TickPriority, 0);
 8007a98:	2200      	movs	r2, #0
 8007a9a:	6879      	ldr	r1, [r7, #4]
 8007a9c:	202c      	movs	r0, #44	; 0x2c
 8007a9e:	f7f9 f8e3 	bl	8000c68 <HAL_NVIC_SetPriority>

	/* Enable the TIM8 global Interrupt */
	HAL_NVIC_EnableIRQ(TIM8_UP_IRQn);
 8007aa2:	202c      	movs	r0, #44	; 0x2c
 8007aa4:	f7f9 f8fc 	bl	8000ca0 <HAL_NVIC_EnableIRQ>

	/* Enable TIM8 clock */
	__HAL_RCC_TIM8_CLK_ENABLE();
 8007aa8:	4b1e      	ldr	r3, [pc, #120]	; (8007b24 <HAL_InitTick+0x9c>)
 8007aaa:	699b      	ldr	r3, [r3, #24]
 8007aac:	4a1d      	ldr	r2, [pc, #116]	; (8007b24 <HAL_InitTick+0x9c>)
 8007aae:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007ab2:	6193      	str	r3, [r2, #24]
 8007ab4:	4b1b      	ldr	r3, [pc, #108]	; (8007b24 <HAL_InitTick+0x9c>)
 8007ab6:	699b      	ldr	r3, [r3, #24]
 8007ab8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007abc:	60fb      	str	r3, [r7, #12]
 8007abe:	68fb      	ldr	r3, [r7, #12]

	/* Get clock configuration */
	HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8007ac0:	f107 0210 	add.w	r2, r7, #16
 8007ac4:	f107 0314 	add.w	r3, r7, #20
 8007ac8:	4611      	mov	r1, r2
 8007aca:	4618      	mov	r0, r3
 8007acc:	f7fb fa0c 	bl	8002ee8 <HAL_RCC_GetClockConfig>

	/* Compute TIM8 clock */
	uwTimclock = HAL_RCC_GetPCLK2Freq();
 8007ad0:	f7fb f9e8 	bl	8002ea4 <HAL_RCC_GetPCLK2Freq>
 8007ad4:	62f8      	str	r0, [r7, #44]	; 0x2c

	/* Compute the prescaler value to have TIM8 counter clock equal to 1MHz */
	uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8007ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ad8:	4a13      	ldr	r2, [pc, #76]	; (8007b28 <HAL_InitTick+0xa0>)
 8007ada:	fba2 2303 	umull	r2, r3, r2, r3
 8007ade:	0c9b      	lsrs	r3, r3, #18
 8007ae0:	3b01      	subs	r3, #1
 8007ae2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Initialize TIM8 */
	htim8.Instance = TIM8;
 8007ae4:	4b11      	ldr	r3, [pc, #68]	; (8007b2c <HAL_InitTick+0xa4>)
 8007ae6:	4a12      	ldr	r2, [pc, #72]	; (8007b30 <HAL_InitTick+0xa8>)
 8007ae8:	601a      	str	r2, [r3, #0]
	 + Period = [(TIM8CLK/1000) - 1]. to have a (1/1000) s time base.
	 + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
	 + ClockDivision = 0
	 + Counter direction = Up
	 */
	htim8.Init.Period = (1000000 / 1000) - 1;
 8007aea:	4b10      	ldr	r3, [pc, #64]	; (8007b2c <HAL_InitTick+0xa4>)
 8007aec:	f240 32e7 	movw	r2, #999	; 0x3e7
 8007af0:	60da      	str	r2, [r3, #12]
	htim8.Init.Prescaler = uwPrescalerValue;
 8007af2:	4a0e      	ldr	r2, [pc, #56]	; (8007b2c <HAL_InitTick+0xa4>)
 8007af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007af6:	6053      	str	r3, [r2, #4]
	htim8.Init.ClockDivision = 0;
 8007af8:	4b0c      	ldr	r3, [pc, #48]	; (8007b2c <HAL_InitTick+0xa4>)
 8007afa:	2200      	movs	r2, #0
 8007afc:	611a      	str	r2, [r3, #16]
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007afe:	4b0b      	ldr	r3, [pc, #44]	; (8007b2c <HAL_InitTick+0xa4>)
 8007b00:	2200      	movs	r2, #0
 8007b02:	609a      	str	r2, [r3, #8]
	if (HAL_TIM_Base_Init(&htim8) == HAL_OK) {
 8007b04:	4809      	ldr	r0, [pc, #36]	; (8007b2c <HAL_InitTick+0xa4>)
 8007b06:	f7fc f88b 	bl	8003c20 <HAL_TIM_Base_Init>
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d104      	bne.n	8007b1a <HAL_InitTick+0x92>
		/* Start the TIM time Base generation in interrupt mode */
		return HAL_TIM_Base_Start_IT(&htim8);
 8007b10:	4806      	ldr	r0, [pc, #24]	; (8007b2c <HAL_InitTick+0xa4>)
 8007b12:	f7fc f8b1 	bl	8003c78 <HAL_TIM_Base_Start_IT>
 8007b16:	4603      	mov	r3, r0
 8007b18:	e000      	b.n	8007b1c <HAL_InitTick+0x94>
	}

	/* Return function status */
	return HAL_ERROR;
 8007b1a:	2301      	movs	r3, #1
}
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	3730      	adds	r7, #48	; 0x30
 8007b20:	46bd      	mov	sp, r7
 8007b22:	bd80      	pop	{r7, pc}
 8007b24:	40021000 	.word	0x40021000
 8007b28:	431bde83 	.word	0x431bde83
 8007b2c:	200017c4 	.word	0x200017c4
 8007b30:	40013400 	.word	0x40013400

08007b34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007b34:	b480      	push	{r7}
 8007b36:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8007b38:	bf00      	nop
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b40:	4770      	bx	lr

08007b42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007b42:	b480      	push	{r7}
 8007b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007b46:	e7fe      	b.n	8007b46 <HardFault_Handler+0x4>

08007b48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007b48:	b480      	push	{r7}
 8007b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007b4c:	e7fe      	b.n	8007b4c <MemManage_Handler+0x4>

08007b4e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007b4e:	b480      	push	{r7}
 8007b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007b52:	e7fe      	b.n	8007b52 <BusFault_Handler+0x4>

08007b54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007b54:	b480      	push	{r7}
 8007b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007b58:	e7fe      	b.n	8007b58 <UsageFault_Handler+0x4>

08007b5a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007b5a:	b480      	push	{r7}
 8007b5c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007b5e:	bf00      	nop
 8007b60:	46bd      	mov	sp, r7
 8007b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b66:	4770      	bx	lr

08007b68 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger, commutation and TIM17 interrupts.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8007b6c:	4802      	ldr	r0, [pc, #8]	; (8007b78 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8007b6e:	f7fc fa1b 	bl	8003fa8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8007b72:	bf00      	nop
 8007b74:	bd80      	pop	{r7, pc}
 8007b76:	bf00      	nop
 8007b78:	200018c4 	.word	0x200018c4

08007b7c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8007b80:	4802      	ldr	r0, [pc, #8]	; (8007b8c <TIM2_IRQHandler+0x10>)
 8007b82:	f7fc fa11 	bl	8003fa8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8007b86:	bf00      	nop
 8007b88:	bd80      	pop	{r7, pc}
 8007b8a:	bf00      	nop
 8007b8c:	20001904 	.word	0x20001904

08007b90 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8007b94:	4802      	ldr	r0, [pc, #8]	; (8007ba0 <TIM4_IRQHandler+0x10>)
 8007b96:	f7fc fa07 	bl	8003fa8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8007b9a:	bf00      	nop
 8007b9c:	bd80      	pop	{r7, pc}
 8007b9e:	bf00      	nop
 8007ba0:	20001804 	.word	0x20001804

08007ba4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8007ba8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8007bac:	f7f9 fbfe 	bl	80013ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8007bb0:	bf00      	nop
 8007bb2:	bd80      	pop	{r7, pc}

08007bb4 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8007bb8:	4802      	ldr	r0, [pc, #8]	; (8007bc4 <RTC_Alarm_IRQHandler+0x10>)
 8007bba:	f7fb ff51 	bl	8003a60 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8007bbe:	bf00      	nop
 8007bc0:	bd80      	pop	{r7, pc}
 8007bc2:	bf00      	nop
 8007bc4:	200017a4 	.word	0x200017a4

08007bc8 <TIM8_UP_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt.
  */
void TIM8_UP_IRQHandler(void)
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_IRQn 0 */

  /* USER CODE END TIM8_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8007bcc:	4802      	ldr	r0, [pc, #8]	; (8007bd8 <TIM8_UP_IRQHandler+0x10>)
 8007bce:	f7fc f9eb 	bl	8003fa8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_IRQn 1 */

  /* USER CODE END TIM8_UP_IRQn 1 */
}
 8007bd2:	bf00      	nop
 8007bd4:	bd80      	pop	{r7, pc}
 8007bd6:	bf00      	nop
 8007bd8:	200017c4 	.word	0x200017c4

08007bdc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles Timer 6 interrupt and DAC underrun interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8007be0:	4802      	ldr	r0, [pc, #8]	; (8007bec <TIM6_DAC_IRQHandler+0x10>)
 8007be2:	f7fc f9e1 	bl	8003fa8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8007be6:	bf00      	nop
 8007be8:	bd80      	pop	{r7, pc}
 8007bea:	bf00      	nop
 8007bec:	20001884 	.word	0x20001884

08007bf0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b086      	sub	sp, #24
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007bf8:	4a14      	ldr	r2, [pc, #80]	; (8007c4c <_sbrk+0x5c>)
 8007bfa:	4b15      	ldr	r3, [pc, #84]	; (8007c50 <_sbrk+0x60>)
 8007bfc:	1ad3      	subs	r3, r2, r3
 8007bfe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007c00:	697b      	ldr	r3, [r7, #20]
 8007c02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007c04:	4b13      	ldr	r3, [pc, #76]	; (8007c54 <_sbrk+0x64>)
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d102      	bne.n	8007c12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007c0c:	4b11      	ldr	r3, [pc, #68]	; (8007c54 <_sbrk+0x64>)
 8007c0e:	4a12      	ldr	r2, [pc, #72]	; (8007c58 <_sbrk+0x68>)
 8007c10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007c12:	4b10      	ldr	r3, [pc, #64]	; (8007c54 <_sbrk+0x64>)
 8007c14:	681a      	ldr	r2, [r3, #0]
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	4413      	add	r3, r2
 8007c1a:	693a      	ldr	r2, [r7, #16]
 8007c1c:	429a      	cmp	r2, r3
 8007c1e:	d207      	bcs.n	8007c30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007c20:	f002 fbf8 	bl	800a414 <__errno>
 8007c24:	4603      	mov	r3, r0
 8007c26:	220c      	movs	r2, #12
 8007c28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8007c2a:	f04f 33ff 	mov.w	r3, #4294967295
 8007c2e:	e009      	b.n	8007c44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007c30:	4b08      	ldr	r3, [pc, #32]	; (8007c54 <_sbrk+0x64>)
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007c36:	4b07      	ldr	r3, [pc, #28]	; (8007c54 <_sbrk+0x64>)
 8007c38:	681a      	ldr	r2, [r3, #0]
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	4413      	add	r3, r2
 8007c3e:	4a05      	ldr	r2, [pc, #20]	; (8007c54 <_sbrk+0x64>)
 8007c40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8007c42:	68fb      	ldr	r3, [r7, #12]
}
 8007c44:	4618      	mov	r0, r3
 8007c46:	3718      	adds	r7, #24
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	bd80      	pop	{r7, pc}
 8007c4c:	2000a000 	.word	0x2000a000
 8007c50:	00000800 	.word	0x00000800
 8007c54:	20000ec4 	.word	0x20000ec4
 8007c58:	20002e68 	.word	0x20002e68

08007c5c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007c5c:	b480      	push	{r7}
 8007c5e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007c60:	4b08      	ldr	r3, [pc, #32]	; (8007c84 <SystemInit+0x28>)
 8007c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c66:	4a07      	ldr	r2, [pc, #28]	; (8007c84 <SystemInit+0x28>)
 8007c68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007c6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007c70:	4b04      	ldr	r3, [pc, #16]	; (8007c84 <SystemInit+0x28>)
 8007c72:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007c76:	609a      	str	r2, [r3, #8]
#endif
}
 8007c78:	bf00      	nop
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c80:	4770      	bx	lr
 8007c82:	bf00      	nop
 8007c84:	e000ed00 	.word	0xe000ed00

08007c88 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim6;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b096      	sub	sp, #88	; 0x58
 8007c8c:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007c8e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8007c92:	2200      	movs	r2, #0
 8007c94:	601a      	str	r2, [r3, #0]
 8007c96:	605a      	str	r2, [r3, #4]
 8007c98:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8007c9a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	601a      	str	r2, [r3, #0]
 8007ca2:	605a      	str	r2, [r3, #4]
 8007ca4:	609a      	str	r2, [r3, #8]
 8007ca6:	60da      	str	r2, [r3, #12]
 8007ca8:	611a      	str	r2, [r3, #16]
 8007caa:	615a      	str	r2, [r3, #20]
 8007cac:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8007cae:	1d3b      	adds	r3, r7, #4
 8007cb0:	222c      	movs	r2, #44	; 0x2c
 8007cb2:	2100      	movs	r1, #0
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	f002 fbe5 	bl	800a484 <memset>

  htim1.Instance = TIM1;
 8007cba:	4b4a      	ldr	r3, [pc, #296]	; (8007de4 <MX_TIM1_Init+0x15c>)
 8007cbc:	4a4a      	ldr	r2, [pc, #296]	; (8007de8 <MX_TIM1_Init+0x160>)
 8007cbe:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 39;
 8007cc0:	4b48      	ldr	r3, [pc, #288]	; (8007de4 <MX_TIM1_Init+0x15c>)
 8007cc2:	2227      	movs	r2, #39	; 0x27
 8007cc4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007cc6:	4b47      	ldr	r3, [pc, #284]	; (8007de4 <MX_TIM1_Init+0x15c>)
 8007cc8:	2200      	movs	r2, #0
 8007cca:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9;
 8007ccc:	4b45      	ldr	r3, [pc, #276]	; (8007de4 <MX_TIM1_Init+0x15c>)
 8007cce:	2209      	movs	r2, #9
 8007cd0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007cd2:	4b44      	ldr	r3, [pc, #272]	; (8007de4 <MX_TIM1_Init+0x15c>)
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8007cd8:	4b42      	ldr	r3, [pc, #264]	; (8007de4 <MX_TIM1_Init+0x15c>)
 8007cda:	2200      	movs	r2, #0
 8007cdc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007cde:	4b41      	ldr	r3, [pc, #260]	; (8007de4 <MX_TIM1_Init+0x15c>)
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8007ce4:	483f      	ldr	r0, [pc, #252]	; (8007de4 <MX_TIM1_Init+0x15c>)
 8007ce6:	f7fb fff1 	bl	8003ccc <HAL_TIM_PWM_Init>
 8007cea:	4603      	mov	r3, r0
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d001      	beq.n	8007cf4 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8007cf0:	f7ff fe1c 	bl	800792c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8007d00:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8007d04:	4619      	mov	r1, r3
 8007d06:	4837      	ldr	r0, [pc, #220]	; (8007de4 <MX_TIM1_Init+0x15c>)
 8007d08:	f7fd f890 	bl	8004e2c <HAL_TIMEx_MasterConfigSynchronization>
 8007d0c:	4603      	mov	r3, r0
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d001      	beq.n	8007d16 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8007d12:	f7ff fe0b 	bl	800792c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007d16:	2360      	movs	r3, #96	; 0x60
 8007d18:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8007d1e:	2302      	movs	r3, #2
 8007d20:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8007d22:	2300      	movs	r3, #0
 8007d24:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007d26:	2300      	movs	r3, #0
 8007d28:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8007d2e:	2300      	movs	r3, #0
 8007d30:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8007d32:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007d36:	2200      	movs	r2, #0
 8007d38:	4619      	mov	r1, r3
 8007d3a:	482a      	ldr	r0, [pc, #168]	; (8007de4 <MX_TIM1_Init+0x15c>)
 8007d3c:	f7fc fa54 	bl	80041e8 <HAL_TIM_PWM_ConfigChannel>
 8007d40:	4603      	mov	r3, r0
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d001      	beq.n	8007d4a <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8007d46:	f7ff fdf1 	bl	800792c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8007d4a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007d4e:	2204      	movs	r2, #4
 8007d50:	4619      	mov	r1, r3
 8007d52:	4824      	ldr	r0, [pc, #144]	; (8007de4 <MX_TIM1_Init+0x15c>)
 8007d54:	f7fc fa48 	bl	80041e8 <HAL_TIM_PWM_ConfigChannel>
 8007d58:	4603      	mov	r3, r0
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d001      	beq.n	8007d62 <MX_TIM1_Init+0xda>
  {
    Error_Handler();
 8007d5e:	f7ff fde5 	bl	800792c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8007d62:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007d66:	2208      	movs	r2, #8
 8007d68:	4619      	mov	r1, r3
 8007d6a:	481e      	ldr	r0, [pc, #120]	; (8007de4 <MX_TIM1_Init+0x15c>)
 8007d6c:	f7fc fa3c 	bl	80041e8 <HAL_TIM_PWM_ConfigChannel>
 8007d70:	4603      	mov	r3, r0
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d001      	beq.n	8007d7a <MX_TIM1_Init+0xf2>
  {
    Error_Handler();
 8007d76:	f7ff fdd9 	bl	800792c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8007d7a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007d7e:	220c      	movs	r2, #12
 8007d80:	4619      	mov	r1, r3
 8007d82:	4818      	ldr	r0, [pc, #96]	; (8007de4 <MX_TIM1_Init+0x15c>)
 8007d84:	f7fc fa30 	bl	80041e8 <HAL_TIM_PWM_ConfigChannel>
 8007d88:	4603      	mov	r3, r0
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d001      	beq.n	8007d92 <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 8007d8e:	f7ff fdcd 	bl	800792c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8007d92:	2300      	movs	r3, #0
 8007d94:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8007d96:	2300      	movs	r3, #0
 8007d98:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8007d9e:	2300      	movs	r3, #0
 8007da0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8007da2:	2300      	movs	r3, #0
 8007da4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8007da6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007daa:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8007dac:	2300      	movs	r3, #0
 8007dae:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8007db0:	2300      	movs	r3, #0
 8007db2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8007db4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007db8:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8007dba:	2300      	movs	r3, #0
 8007dbc:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8007dc2:	1d3b      	adds	r3, r7, #4
 8007dc4:	4619      	mov	r1, r3
 8007dc6:	4807      	ldr	r0, [pc, #28]	; (8007de4 <MX_TIM1_Init+0x15c>)
 8007dc8:	f7fd f8b0 	bl	8004f2c <HAL_TIMEx_ConfigBreakDeadTime>
 8007dcc:	4603      	mov	r3, r0
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d001      	beq.n	8007dd6 <MX_TIM1_Init+0x14e>
  {
    Error_Handler();
 8007dd2:	f7ff fdab 	bl	800792c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8007dd6:	4803      	ldr	r0, [pc, #12]	; (8007de4 <MX_TIM1_Init+0x15c>)
 8007dd8:	f000 fa22 	bl	8008220 <HAL_TIM_MspPostInit>

}
 8007ddc:	bf00      	nop
 8007dde:	3758      	adds	r7, #88	; 0x58
 8007de0:	46bd      	mov	sp, r7
 8007de2:	bd80      	pop	{r7, pc}
 8007de4:	200018c4 	.word	0x200018c4
 8007de8:	40012c00 	.word	0x40012c00

08007dec <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b08c      	sub	sp, #48	; 0x30
 8007df0:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8007df2:	f107 030c 	add.w	r3, r7, #12
 8007df6:	2224      	movs	r2, #36	; 0x24
 8007df8:	2100      	movs	r1, #0
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	f002 fb42 	bl	800a484 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007e00:	463b      	mov	r3, r7
 8007e02:	2200      	movs	r2, #0
 8007e04:	601a      	str	r2, [r3, #0]
 8007e06:	605a      	str	r2, [r3, #4]
 8007e08:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 8007e0a:	4b21      	ldr	r3, [pc, #132]	; (8007e90 <MX_TIM2_Init+0xa4>)
 8007e0c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8007e10:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8007e12:	4b1f      	ldr	r3, [pc, #124]	; (8007e90 <MX_TIM2_Init+0xa4>)
 8007e14:	2200      	movs	r2, #0
 8007e16:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007e18:	4b1d      	ldr	r3, [pc, #116]	; (8007e90 <MX_TIM2_Init+0xa4>)
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20;
 8007e1e:	4b1c      	ldr	r3, [pc, #112]	; (8007e90 <MX_TIM2_Init+0xa4>)
 8007e20:	2214      	movs	r2, #20
 8007e22:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007e24:	4b1a      	ldr	r3, [pc, #104]	; (8007e90 <MX_TIM2_Init+0xa4>)
 8007e26:	2200      	movs	r2, #0
 8007e28:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007e2a:	4b19      	ldr	r3, [pc, #100]	; (8007e90 <MX_TIM2_Init+0xa4>)
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI2;
 8007e30:	2302      	movs	r3, #2
 8007e32:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8007e34:	2300      	movs	r3, #0
 8007e36:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8007e38:	2301      	movs	r3, #1
 8007e3a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 7;
 8007e40:	2307      	movs	r3, #7
 8007e42:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8007e44:	2300      	movs	r3, #0
 8007e46:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8007e48:	2301      	movs	r3, #1
 8007e4a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8007e50:	230f      	movs	r3, #15
 8007e52:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8007e54:	f107 030c 	add.w	r3, r7, #12
 8007e58:	4619      	mov	r1, r3
 8007e5a:	480d      	ldr	r0, [pc, #52]	; (8007e90 <MX_TIM2_Init+0xa4>)
 8007e5c:	f7fb ffba 	bl	8003dd4 <HAL_TIM_Encoder_Init>
 8007e60:	4603      	mov	r3, r0
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d001      	beq.n	8007e6a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8007e66:	f7ff fd61 	bl	800792c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007e6e:	2300      	movs	r3, #0
 8007e70:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8007e72:	463b      	mov	r3, r7
 8007e74:	4619      	mov	r1, r3
 8007e76:	4806      	ldr	r0, [pc, #24]	; (8007e90 <MX_TIM2_Init+0xa4>)
 8007e78:	f7fc ffd8 	bl	8004e2c <HAL_TIMEx_MasterConfigSynchronization>
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d001      	beq.n	8007e86 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8007e82:	f7ff fd53 	bl	800792c <Error_Handler>
  }

}
 8007e86:	bf00      	nop
 8007e88:	3730      	adds	r7, #48	; 0x30
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bd80      	pop	{r7, pc}
 8007e8e:	bf00      	nop
 8007e90:	20001904 	.word	0x20001904

08007e94 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b08a      	sub	sp, #40	; 0x28
 8007e98:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007e9a:	f107 031c 	add.w	r3, r7, #28
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	601a      	str	r2, [r3, #0]
 8007ea2:	605a      	str	r2, [r3, #4]
 8007ea4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8007ea6:	463b      	mov	r3, r7
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	601a      	str	r2, [r3, #0]
 8007eac:	605a      	str	r2, [r3, #4]
 8007eae:	609a      	str	r2, [r3, #8]
 8007eb0:	60da      	str	r2, [r3, #12]
 8007eb2:	611a      	str	r2, [r3, #16]
 8007eb4:	615a      	str	r2, [r3, #20]
 8007eb6:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8007eb8:	4b31      	ldr	r3, [pc, #196]	; (8007f80 <MX_TIM3_Init+0xec>)
 8007eba:	4a32      	ldr	r2, [pc, #200]	; (8007f84 <MX_TIM3_Init+0xf0>)
 8007ebc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 39;
 8007ebe:	4b30      	ldr	r3, [pc, #192]	; (8007f80 <MX_TIM3_Init+0xec>)
 8007ec0:	2227      	movs	r2, #39	; 0x27
 8007ec2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007ec4:	4b2e      	ldr	r3, [pc, #184]	; (8007f80 <MX_TIM3_Init+0xec>)
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9;
 8007eca:	4b2d      	ldr	r3, [pc, #180]	; (8007f80 <MX_TIM3_Init+0xec>)
 8007ecc:	2209      	movs	r2, #9
 8007ece:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007ed0:	4b2b      	ldr	r3, [pc, #172]	; (8007f80 <MX_TIM3_Init+0xec>)
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007ed6:	4b2a      	ldr	r3, [pc, #168]	; (8007f80 <MX_TIM3_Init+0xec>)
 8007ed8:	2200      	movs	r2, #0
 8007eda:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8007edc:	4828      	ldr	r0, [pc, #160]	; (8007f80 <MX_TIM3_Init+0xec>)
 8007ede:	f7fb fef5 	bl	8003ccc <HAL_TIM_PWM_Init>
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d001      	beq.n	8007eec <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8007ee8:	f7ff fd20 	bl	800792c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007eec:	2300      	movs	r3, #0
 8007eee:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8007ef4:	f107 031c 	add.w	r3, r7, #28
 8007ef8:	4619      	mov	r1, r3
 8007efa:	4821      	ldr	r0, [pc, #132]	; (8007f80 <MX_TIM3_Init+0xec>)
 8007efc:	f7fc ff96 	bl	8004e2c <HAL_TIMEx_MasterConfigSynchronization>
 8007f00:	4603      	mov	r3, r0
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d001      	beq.n	8007f0a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8007f06:	f7ff fd11 	bl	800792c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007f0a:	2360      	movs	r3, #96	; 0x60
 8007f0c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8007f0e:	2300      	movs	r3, #0
 8007f10:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8007f12:	2302      	movs	r3, #2
 8007f14:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007f16:	2300      	movs	r3, #0
 8007f18:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8007f1a:	463b      	mov	r3, r7
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	4619      	mov	r1, r3
 8007f20:	4817      	ldr	r0, [pc, #92]	; (8007f80 <MX_TIM3_Init+0xec>)
 8007f22:	f7fc f961 	bl	80041e8 <HAL_TIM_PWM_ConfigChannel>
 8007f26:	4603      	mov	r3, r0
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d001      	beq.n	8007f30 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8007f2c:	f7ff fcfe 	bl	800792c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8007f30:	463b      	mov	r3, r7
 8007f32:	2204      	movs	r2, #4
 8007f34:	4619      	mov	r1, r3
 8007f36:	4812      	ldr	r0, [pc, #72]	; (8007f80 <MX_TIM3_Init+0xec>)
 8007f38:	f7fc f956 	bl	80041e8 <HAL_TIM_PWM_ConfigChannel>
 8007f3c:	4603      	mov	r3, r0
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d001      	beq.n	8007f46 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8007f42:	f7ff fcf3 	bl	800792c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8007f46:	463b      	mov	r3, r7
 8007f48:	2208      	movs	r2, #8
 8007f4a:	4619      	mov	r1, r3
 8007f4c:	480c      	ldr	r0, [pc, #48]	; (8007f80 <MX_TIM3_Init+0xec>)
 8007f4e:	f7fc f94b 	bl	80041e8 <HAL_TIM_PWM_ConfigChannel>
 8007f52:	4603      	mov	r3, r0
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d001      	beq.n	8007f5c <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8007f58:	f7ff fce8 	bl	800792c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8007f5c:	463b      	mov	r3, r7
 8007f5e:	220c      	movs	r2, #12
 8007f60:	4619      	mov	r1, r3
 8007f62:	4807      	ldr	r0, [pc, #28]	; (8007f80 <MX_TIM3_Init+0xec>)
 8007f64:	f7fc f940 	bl	80041e8 <HAL_TIM_PWM_ConfigChannel>
 8007f68:	4603      	mov	r3, r0
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d001      	beq.n	8007f72 <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 8007f6e:	f7ff fcdd 	bl	800792c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8007f72:	4803      	ldr	r0, [pc, #12]	; (8007f80 <MX_TIM3_Init+0xec>)
 8007f74:	f000 f954 	bl	8008220 <HAL_TIM_MspPostInit>

}
 8007f78:	bf00      	nop
 8007f7a:	3728      	adds	r7, #40	; 0x28
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	bd80      	pop	{r7, pc}
 8007f80:	20001844 	.word	0x20001844
 8007f84:	40000400 	.word	0x40000400

08007f88 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b088      	sub	sp, #32
 8007f8c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007f8e:	f107 0310 	add.w	r3, r7, #16
 8007f92:	2200      	movs	r2, #0
 8007f94:	601a      	str	r2, [r3, #0]
 8007f96:	605a      	str	r2, [r3, #4]
 8007f98:	609a      	str	r2, [r3, #8]
 8007f9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007f9c:	1d3b      	adds	r3, r7, #4
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	601a      	str	r2, [r3, #0]
 8007fa2:	605a      	str	r2, [r3, #4]
 8007fa4:	609a      	str	r2, [r3, #8]

  htim4.Instance = TIM4;
 8007fa6:	4b1e      	ldr	r3, [pc, #120]	; (8008020 <MX_TIM4_Init+0x98>)
 8007fa8:	4a1e      	ldr	r2, [pc, #120]	; (8008024 <MX_TIM4_Init+0x9c>)
 8007faa:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7999;
 8007fac:	4b1c      	ldr	r3, [pc, #112]	; (8008020 <MX_TIM4_Init+0x98>)
 8007fae:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8007fb2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007fb4:	4b1a      	ldr	r3, [pc, #104]	; (8008020 <MX_TIM4_Init+0x98>)
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1999;
 8007fba:	4b19      	ldr	r3, [pc, #100]	; (8008020 <MX_TIM4_Init+0x98>)
 8007fbc:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8007fc0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007fc2:	4b17      	ldr	r3, [pc, #92]	; (8008020 <MX_TIM4_Init+0x98>)
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007fc8:	4b15      	ldr	r3, [pc, #84]	; (8008020 <MX_TIM4_Init+0x98>)
 8007fca:	2200      	movs	r2, #0
 8007fcc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8007fce:	4814      	ldr	r0, [pc, #80]	; (8008020 <MX_TIM4_Init+0x98>)
 8007fd0:	f7fb fe26 	bl	8003c20 <HAL_TIM_Base_Init>
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d001      	beq.n	8007fde <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8007fda:	f7ff fca7 	bl	800792c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007fde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007fe2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8007fe4:	f107 0310 	add.w	r3, r7, #16
 8007fe8:	4619      	mov	r1, r3
 8007fea:	480d      	ldr	r0, [pc, #52]	; (8008020 <MX_TIM4_Init+0x98>)
 8007fec:	f7fc fa14 	bl	8004418 <HAL_TIM_ConfigClockSource>
 8007ff0:	4603      	mov	r3, r0
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d001      	beq.n	8007ffa <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8007ff6:	f7ff fc99 	bl	800792c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007ffe:	2300      	movs	r3, #0
 8008000:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8008002:	1d3b      	adds	r3, r7, #4
 8008004:	4619      	mov	r1, r3
 8008006:	4806      	ldr	r0, [pc, #24]	; (8008020 <MX_TIM4_Init+0x98>)
 8008008:	f7fc ff10 	bl	8004e2c <HAL_TIMEx_MasterConfigSynchronization>
 800800c:	4603      	mov	r3, r0
 800800e:	2b00      	cmp	r3, #0
 8008010:	d001      	beq.n	8008016 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8008012:	f7ff fc8b 	bl	800792c <Error_Handler>
  }

}
 8008016:	bf00      	nop
 8008018:	3720      	adds	r7, #32
 800801a:	46bd      	mov	sp, r7
 800801c:	bd80      	pop	{r7, pc}
 800801e:	bf00      	nop
 8008020:	20001804 	.word	0x20001804
 8008024:	40000800 	.word	0x40000800

08008028 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b084      	sub	sp, #16
 800802c:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800802e:	1d3b      	adds	r3, r7, #4
 8008030:	2200      	movs	r2, #0
 8008032:	601a      	str	r2, [r3, #0]
 8008034:	605a      	str	r2, [r3, #4]
 8008036:	609a      	str	r2, [r3, #8]

  htim6.Instance = TIM6;
 8008038:	4b15      	ldr	r3, [pc, #84]	; (8008090 <MX_TIM6_Init+0x68>)
 800803a:	4a16      	ldr	r2, [pc, #88]	; (8008094 <MX_TIM6_Init+0x6c>)
 800803c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7999;
 800803e:	4b14      	ldr	r3, [pc, #80]	; (8008090 <MX_TIM6_Init+0x68>)
 8008040:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8008044:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008046:	4b12      	ldr	r3, [pc, #72]	; (8008090 <MX_TIM6_Init+0x68>)
 8008048:	2200      	movs	r2, #0
 800804a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 800804c:	4b10      	ldr	r3, [pc, #64]	; (8008090 <MX_TIM6_Init+0x68>)
 800804e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8008052:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008054:	4b0e      	ldr	r3, [pc, #56]	; (8008090 <MX_TIM6_Init+0x68>)
 8008056:	2200      	movs	r2, #0
 8008058:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800805a:	480d      	ldr	r0, [pc, #52]	; (8008090 <MX_TIM6_Init+0x68>)
 800805c:	f7fb fde0 	bl	8003c20 <HAL_TIM_Base_Init>
 8008060:	4603      	mov	r3, r0
 8008062:	2b00      	cmp	r3, #0
 8008064:	d001      	beq.n	800806a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8008066:	f7ff fc61 	bl	800792c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800806a:	2300      	movs	r3, #0
 800806c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800806e:	2300      	movs	r3, #0
 8008070:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8008072:	1d3b      	adds	r3, r7, #4
 8008074:	4619      	mov	r1, r3
 8008076:	4806      	ldr	r0, [pc, #24]	; (8008090 <MX_TIM6_Init+0x68>)
 8008078:	f7fc fed8 	bl	8004e2c <HAL_TIMEx_MasterConfigSynchronization>
 800807c:	4603      	mov	r3, r0
 800807e:	2b00      	cmp	r3, #0
 8008080:	d001      	beq.n	8008086 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8008082:	f7ff fc53 	bl	800792c <Error_Handler>
  }

}
 8008086:	bf00      	nop
 8008088:	3710      	adds	r7, #16
 800808a:	46bd      	mov	sp, r7
 800808c:	bd80      	pop	{r7, pc}
 800808e:	bf00      	nop
 8008090:	20001884 	.word	0x20001884
 8008094:	40001000 	.word	0x40001000

08008098 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b084      	sub	sp, #16
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	4a16      	ldr	r2, [pc, #88]	; (8008100 <HAL_TIM_PWM_MspInit+0x68>)
 80080a6:	4293      	cmp	r3, r2
 80080a8:	d114      	bne.n	80080d4 <HAL_TIM_PWM_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80080aa:	4b16      	ldr	r3, [pc, #88]	; (8008104 <HAL_TIM_PWM_MspInit+0x6c>)
 80080ac:	699b      	ldr	r3, [r3, #24]
 80080ae:	4a15      	ldr	r2, [pc, #84]	; (8008104 <HAL_TIM_PWM_MspInit+0x6c>)
 80080b0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80080b4:	6193      	str	r3, [r2, #24]
 80080b6:	4b13      	ldr	r3, [pc, #76]	; (8008104 <HAL_TIM_PWM_MspInit+0x6c>)
 80080b8:	699b      	ldr	r3, [r3, #24]
 80080ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80080be:	60fb      	str	r3, [r7, #12]
 80080c0:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 5, 0);
 80080c2:	2200      	movs	r2, #0
 80080c4:	2105      	movs	r1, #5
 80080c6:	201a      	movs	r0, #26
 80080c8:	f7f8 fdce 	bl	8000c68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80080cc:	201a      	movs	r0, #26
 80080ce:	f7f8 fde7 	bl	8000ca0 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80080d2:	e010      	b.n	80080f6 <HAL_TIM_PWM_MspInit+0x5e>
  else if(tim_pwmHandle->Instance==TIM3)
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	4a0b      	ldr	r2, [pc, #44]	; (8008108 <HAL_TIM_PWM_MspInit+0x70>)
 80080da:	4293      	cmp	r3, r2
 80080dc:	d10b      	bne.n	80080f6 <HAL_TIM_PWM_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80080de:	4b09      	ldr	r3, [pc, #36]	; (8008104 <HAL_TIM_PWM_MspInit+0x6c>)
 80080e0:	69db      	ldr	r3, [r3, #28]
 80080e2:	4a08      	ldr	r2, [pc, #32]	; (8008104 <HAL_TIM_PWM_MspInit+0x6c>)
 80080e4:	f043 0302 	orr.w	r3, r3, #2
 80080e8:	61d3      	str	r3, [r2, #28]
 80080ea:	4b06      	ldr	r3, [pc, #24]	; (8008104 <HAL_TIM_PWM_MspInit+0x6c>)
 80080ec:	69db      	ldr	r3, [r3, #28]
 80080ee:	f003 0302 	and.w	r3, r3, #2
 80080f2:	60bb      	str	r3, [r7, #8]
 80080f4:	68bb      	ldr	r3, [r7, #8]
}
 80080f6:	bf00      	nop
 80080f8:	3710      	adds	r7, #16
 80080fa:	46bd      	mov	sp, r7
 80080fc:	bd80      	pop	{r7, pc}
 80080fe:	bf00      	nop
 8008100:	40012c00 	.word	0x40012c00
 8008104:	40021000 	.word	0x40021000
 8008108:	40000400 	.word	0x40000400

0800810c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b08a      	sub	sp, #40	; 0x28
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008114:	f107 0314 	add.w	r3, r7, #20
 8008118:	2200      	movs	r2, #0
 800811a:	601a      	str	r2, [r3, #0]
 800811c:	605a      	str	r2, [r3, #4]
 800811e:	609a      	str	r2, [r3, #8]
 8008120:	60da      	str	r2, [r3, #12]
 8008122:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800812c:	d130      	bne.n	8008190 <HAL_TIM_Encoder_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800812e:	4b1a      	ldr	r3, [pc, #104]	; (8008198 <HAL_TIM_Encoder_MspInit+0x8c>)
 8008130:	69db      	ldr	r3, [r3, #28]
 8008132:	4a19      	ldr	r2, [pc, #100]	; (8008198 <HAL_TIM_Encoder_MspInit+0x8c>)
 8008134:	f043 0301 	orr.w	r3, r3, #1
 8008138:	61d3      	str	r3, [r2, #28]
 800813a:	4b17      	ldr	r3, [pc, #92]	; (8008198 <HAL_TIM_Encoder_MspInit+0x8c>)
 800813c:	69db      	ldr	r3, [r3, #28]
 800813e:	f003 0301 	and.w	r3, r3, #1
 8008142:	613b      	str	r3, [r7, #16]
 8008144:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008146:	4b14      	ldr	r3, [pc, #80]	; (8008198 <HAL_TIM_Encoder_MspInit+0x8c>)
 8008148:	695b      	ldr	r3, [r3, #20]
 800814a:	4a13      	ldr	r2, [pc, #76]	; (8008198 <HAL_TIM_Encoder_MspInit+0x8c>)
 800814c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008150:	6153      	str	r3, [r2, #20]
 8008152:	4b11      	ldr	r3, [pc, #68]	; (8008198 <HAL_TIM_Encoder_MspInit+0x8c>)
 8008154:	695b      	ldr	r3, [r3, #20]
 8008156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800815a:	60fb      	str	r3, [r7, #12]
 800815c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800815e:	2303      	movs	r3, #3
 8008160:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008162:	2302      	movs	r3, #2
 8008164:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008166:	2301      	movs	r3, #1
 8008168:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800816a:	2300      	movs	r3, #0
 800816c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800816e:	2301      	movs	r3, #1
 8008170:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008172:	f107 0314 	add.w	r3, r7, #20
 8008176:	4619      	mov	r1, r3
 8008178:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800817c:	f7f8 ff84 	bl	8001088 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8008180:	2200      	movs	r2, #0
 8008182:	2105      	movs	r1, #5
 8008184:	201c      	movs	r0, #28
 8008186:	f7f8 fd6f 	bl	8000c68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800818a:	201c      	movs	r0, #28
 800818c:	f7f8 fd88 	bl	8000ca0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8008190:	bf00      	nop
 8008192:	3728      	adds	r7, #40	; 0x28
 8008194:	46bd      	mov	sp, r7
 8008196:	bd80      	pop	{r7, pc}
 8008198:	40021000 	.word	0x40021000

0800819c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b084      	sub	sp, #16
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	4a1a      	ldr	r2, [pc, #104]	; (8008214 <HAL_TIM_Base_MspInit+0x78>)
 80081aa:	4293      	cmp	r3, r2
 80081ac:	d114      	bne.n	80081d8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80081ae:	4b1a      	ldr	r3, [pc, #104]	; (8008218 <HAL_TIM_Base_MspInit+0x7c>)
 80081b0:	69db      	ldr	r3, [r3, #28]
 80081b2:	4a19      	ldr	r2, [pc, #100]	; (8008218 <HAL_TIM_Base_MspInit+0x7c>)
 80081b4:	f043 0304 	orr.w	r3, r3, #4
 80081b8:	61d3      	str	r3, [r2, #28]
 80081ba:	4b17      	ldr	r3, [pc, #92]	; (8008218 <HAL_TIM_Base_MspInit+0x7c>)
 80081bc:	69db      	ldr	r3, [r3, #28]
 80081be:	f003 0304 	and.w	r3, r3, #4
 80081c2:	60fb      	str	r3, [r7, #12]
 80081c4:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 80081c6:	2200      	movs	r2, #0
 80081c8:	2105      	movs	r1, #5
 80081ca:	201e      	movs	r0, #30
 80081cc:	f7f8 fd4c 	bl	8000c68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80081d0:	201e      	movs	r0, #30
 80081d2:	f7f8 fd65 	bl	8000ca0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80081d6:	e018      	b.n	800820a <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM6)
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	4a0f      	ldr	r2, [pc, #60]	; (800821c <HAL_TIM_Base_MspInit+0x80>)
 80081de:	4293      	cmp	r3, r2
 80081e0:	d113      	bne.n	800820a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80081e2:	4b0d      	ldr	r3, [pc, #52]	; (8008218 <HAL_TIM_Base_MspInit+0x7c>)
 80081e4:	69db      	ldr	r3, [r3, #28]
 80081e6:	4a0c      	ldr	r2, [pc, #48]	; (8008218 <HAL_TIM_Base_MspInit+0x7c>)
 80081e8:	f043 0310 	orr.w	r3, r3, #16
 80081ec:	61d3      	str	r3, [r2, #28]
 80081ee:	4b0a      	ldr	r3, [pc, #40]	; (8008218 <HAL_TIM_Base_MspInit+0x7c>)
 80081f0:	69db      	ldr	r3, [r3, #28]
 80081f2:	f003 0310 	and.w	r3, r3, #16
 80081f6:	60bb      	str	r3, [r7, #8]
 80081f8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 80081fa:	2200      	movs	r2, #0
 80081fc:	2105      	movs	r1, #5
 80081fe:	2036      	movs	r0, #54	; 0x36
 8008200:	f7f8 fd32 	bl	8000c68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8008204:	2036      	movs	r0, #54	; 0x36
 8008206:	f7f8 fd4b 	bl	8000ca0 <HAL_NVIC_EnableIRQ>
}
 800820a:	bf00      	nop
 800820c:	3710      	adds	r7, #16
 800820e:	46bd      	mov	sp, r7
 8008210:	bd80      	pop	{r7, pc}
 8008212:	bf00      	nop
 8008214:	40000800 	.word	0x40000800
 8008218:	40021000 	.word	0x40021000
 800821c:	40001000 	.word	0x40001000

08008220 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b08a      	sub	sp, #40	; 0x28
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008228:	f107 0314 	add.w	r3, r7, #20
 800822c:	2200      	movs	r2, #0
 800822e:	601a      	str	r2, [r3, #0]
 8008230:	605a      	str	r2, [r3, #4]
 8008232:	609a      	str	r2, [r3, #8]
 8008234:	60da      	str	r2, [r3, #12]
 8008236:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	4a3a      	ldr	r2, [pc, #232]	; (8008328 <HAL_TIM_MspPostInit+0x108>)
 800823e:	4293      	cmp	r3, r2
 8008240:	d130      	bne.n	80082a4 <HAL_TIM_MspPostInit+0x84>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008242:	4b3a      	ldr	r3, [pc, #232]	; (800832c <HAL_TIM_MspPostInit+0x10c>)
 8008244:	695b      	ldr	r3, [r3, #20]
 8008246:	4a39      	ldr	r2, [pc, #228]	; (800832c <HAL_TIM_MspPostInit+0x10c>)
 8008248:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800824c:	6153      	str	r3, [r2, #20]
 800824e:	4b37      	ldr	r3, [pc, #220]	; (800832c <HAL_TIM_MspPostInit+0x10c>)
 8008250:	695b      	ldr	r3, [r3, #20]
 8008252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008256:	613b      	str	r3, [r7, #16]
 8008258:	693b      	ldr	r3, [r7, #16]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800825a:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800825e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008260:	2302      	movs	r3, #2
 8008262:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008264:	2300      	movs	r3, #0
 8008266:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008268:	2300      	movs	r3, #0
 800826a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800826c:	2306      	movs	r3, #6
 800826e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008270:	f107 0314 	add.w	r3, r7, #20
 8008274:	4619      	mov	r1, r3
 8008276:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800827a:	f7f8 ff05 	bl	8001088 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800827e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008282:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008284:	2302      	movs	r3, #2
 8008286:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008288:	2300      	movs	r3, #0
 800828a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800828c:	2300      	movs	r3, #0
 800828e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_TIM1;
 8008290:	230b      	movs	r3, #11
 8008292:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008294:	f107 0314 	add.w	r3, r7, #20
 8008298:	4619      	mov	r1, r3
 800829a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800829e:	f7f8 fef3 	bl	8001088 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80082a2:	e03d      	b.n	8008320 <HAL_TIM_MspPostInit+0x100>
  else if(timHandle->Instance==TIM3)
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	4a21      	ldr	r2, [pc, #132]	; (8008330 <HAL_TIM_MspPostInit+0x110>)
 80082aa:	4293      	cmp	r3, r2
 80082ac:	d138      	bne.n	8008320 <HAL_TIM_MspPostInit+0x100>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80082ae:	4b1f      	ldr	r3, [pc, #124]	; (800832c <HAL_TIM_MspPostInit+0x10c>)
 80082b0:	695b      	ldr	r3, [r3, #20]
 80082b2:	4a1e      	ldr	r2, [pc, #120]	; (800832c <HAL_TIM_MspPostInit+0x10c>)
 80082b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80082b8:	6153      	str	r3, [r2, #20]
 80082ba:	4b1c      	ldr	r3, [pc, #112]	; (800832c <HAL_TIM_MspPostInit+0x10c>)
 80082bc:	695b      	ldr	r3, [r3, #20]
 80082be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082c2:	60fb      	str	r3, [r7, #12]
 80082c4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80082c6:	4b19      	ldr	r3, [pc, #100]	; (800832c <HAL_TIM_MspPostInit+0x10c>)
 80082c8:	695b      	ldr	r3, [r3, #20]
 80082ca:	4a18      	ldr	r2, [pc, #96]	; (800832c <HAL_TIM_MspPostInit+0x10c>)
 80082cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80082d0:	6153      	str	r3, [r2, #20]
 80082d2:	4b16      	ldr	r3, [pc, #88]	; (800832c <HAL_TIM_MspPostInit+0x10c>)
 80082d4:	695b      	ldr	r3, [r3, #20]
 80082d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80082da:	60bb      	str	r3, [r7, #8]
 80082dc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80082de:	23c0      	movs	r3, #192	; 0xc0
 80082e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80082e2:	2302      	movs	r3, #2
 80082e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082e6:	2300      	movs	r3, #0
 80082e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80082ea:	2300      	movs	r3, #0
 80082ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80082ee:	2302      	movs	r3, #2
 80082f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80082f2:	f107 0314 	add.w	r3, r7, #20
 80082f6:	4619      	mov	r1, r3
 80082f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80082fc:	f7f8 fec4 	bl	8001088 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8008300:	2303      	movs	r3, #3
 8008302:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008304:	2302      	movs	r3, #2
 8008306:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008308:	2300      	movs	r3, #0
 800830a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800830c:	2300      	movs	r3, #0
 800830e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8008310:	2302      	movs	r3, #2
 8008312:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008314:	f107 0314 	add.w	r3, r7, #20
 8008318:	4619      	mov	r1, r3
 800831a:	4806      	ldr	r0, [pc, #24]	; (8008334 <HAL_TIM_MspPostInit+0x114>)
 800831c:	f7f8 feb4 	bl	8001088 <HAL_GPIO_Init>
}
 8008320:	bf00      	nop
 8008322:	3728      	adds	r7, #40	; 0x28
 8008324:	46bd      	mov	sp, r7
 8008326:	bd80      	pop	{r7, pc}
 8008328:	40012c00 	.word	0x40012c00
 800832c:	40021000 	.word	0x40021000
 8008330:	40000400 	.word	0x40000400
 8008334:	48000400 	.word	0x48000400

08008338 <Reset_Handler>:
 8008338:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008370 <LoopForever+0x2>
 800833c:	2100      	movs	r1, #0
 800833e:	e003      	b.n	8008348 <LoopCopyDataInit>

08008340 <CopyDataInit>:
 8008340:	4b0c      	ldr	r3, [pc, #48]	; (8008374 <LoopForever+0x6>)
 8008342:	585b      	ldr	r3, [r3, r1]
 8008344:	5043      	str	r3, [r0, r1]
 8008346:	3104      	adds	r1, #4

08008348 <LoopCopyDataInit>:
 8008348:	480b      	ldr	r0, [pc, #44]	; (8008378 <LoopForever+0xa>)
 800834a:	4b0c      	ldr	r3, [pc, #48]	; (800837c <LoopForever+0xe>)
 800834c:	1842      	adds	r2, r0, r1
 800834e:	429a      	cmp	r2, r3
 8008350:	d3f6      	bcc.n	8008340 <CopyDataInit>
 8008352:	4a0b      	ldr	r2, [pc, #44]	; (8008380 <LoopForever+0x12>)
 8008354:	e002      	b.n	800835c <LoopFillZerobss>

08008356 <FillZerobss>:
 8008356:	2300      	movs	r3, #0
 8008358:	f842 3b04 	str.w	r3, [r2], #4

0800835c <LoopFillZerobss>:
 800835c:	4b09      	ldr	r3, [pc, #36]	; (8008384 <LoopForever+0x16>)
 800835e:	429a      	cmp	r2, r3
 8008360:	d3f9      	bcc.n	8008356 <FillZerobss>
 8008362:	f7ff fc7b 	bl	8007c5c <SystemInit>
 8008366:	f002 f85b 	bl	800a420 <__libc_init_array>
 800836a:	f7ff f9b5 	bl	80076d8 <main>

0800836e <LoopForever>:
 800836e:	e7fe      	b.n	800836e <LoopForever>
 8008370:	2000a000 	.word	0x2000a000
 8008374:	0800b850 	.word	0x0800b850
 8008378:	20000000 	.word	0x20000000
 800837c:	2000008c 	.word	0x2000008c
 8008380:	20000090 	.word	0x20000090
 8008384:	20002e64 	.word	0x20002e64

08008388 <ADC1_2_IRQHandler>:
 8008388:	e7fe      	b.n	8008388 <ADC1_2_IRQHandler>
	...

0800838c <STORING_CheckFirstStart>:
				.NbPages = 1 };
//
//-------------------------------------------------------------
//
//
void STORING_CheckFirstStart(void) { //проверяем, что прошивка новая
 800838c:	b480      	push	{r7}
 800838e:	b083      	sub	sp, #12
 8008390:	af00      	add	r7, sp, #0
//if (1){  //что бы принудительно обнулить
	if (romMemUn.romMemStr.checkNewFirmware == 0xFF) { //если новая, заполняем нулями
 8008392:	4b99      	ldr	r3, [pc, #612]	; (80085f8 <STORING_CheckFirstStart+0x26c>)
 8008394:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8008398:	2bff      	cmp	r3, #255	; 0xff
 800839a:	f040 80ac 	bne.w	80084f6 <STORING_CheckFirstStart+0x16a>

		dayOn.Hours = 0;
 800839e:	4b97      	ldr	r3, [pc, #604]	; (80085fc <STORING_CheckFirstStart+0x270>)
 80083a0:	2200      	movs	r2, #0
 80083a2:	701a      	strb	r2, [r3, #0]
		dayOn.Minutes = 0;
 80083a4:	4b95      	ldr	r3, [pc, #596]	; (80085fc <STORING_CheckFirstStart+0x270>)
 80083a6:	2200      	movs	r2, #0
 80083a8:	705a      	strb	r2, [r3, #1]
		dayOn.Seconds = 0;
 80083aa:	4b94      	ldr	r3, [pc, #592]	; (80085fc <STORING_CheckFirstStart+0x270>)
 80083ac:	2200      	movs	r2, #0
 80083ae:	709a      	strb	r2, [r3, #2]
		dayOn.FullTime = 0;
 80083b0:	4b92      	ldr	r3, [pc, #584]	; (80085fc <STORING_CheckFirstStart+0x270>)
 80083b2:	2200      	movs	r2, #0
 80083b4:	615a      	str	r2, [r3, #20]

		dayOff.Hours = 0;
 80083b6:	4b92      	ldr	r3, [pc, #584]	; (8008600 <STORING_CheckFirstStart+0x274>)
 80083b8:	2200      	movs	r2, #0
 80083ba:	701a      	strb	r2, [r3, #0]
		dayOff.Minutes = 0;
 80083bc:	4b90      	ldr	r3, [pc, #576]	; (8008600 <STORING_CheckFirstStart+0x274>)
 80083be:	2200      	movs	r2, #0
 80083c0:	705a      	strb	r2, [r3, #1]
		dayOff.Seconds = 0;
 80083c2:	4b8f      	ldr	r3, [pc, #572]	; (8008600 <STORING_CheckFirstStart+0x274>)
 80083c4:	2200      	movs	r2, #0
 80083c6:	709a      	strb	r2, [r3, #2]

		dayOff.FullTime = 0;
 80083c8:	4b8d      	ldr	r3, [pc, #564]	; (8008600 <STORING_CheckFirstStart+0x274>)
 80083ca:	2200      	movs	r2, #0
 80083cc:	615a      	str	r2, [r3, #20]

		g_switchingPeriod = 0;
 80083ce:	4b8d      	ldr	r3, [pc, #564]	; (8008604 <STORING_CheckFirstStart+0x278>)
 80083d0:	2200      	movs	r2, #0
 80083d2:	701a      	strb	r2, [r3, #0]

		TIM4->ARR = 0;
 80083d4:	4b8c      	ldr	r3, [pc, #560]	; (8008608 <STORING_CheckFirstStart+0x27c>)
 80083d6:	2200      	movs	r2, #0
 80083d8:	62da      	str	r2, [r3, #44]	; 0x2c

		dlRouteM[0].dayHight = 0;
 80083da:	4b8c      	ldr	r3, [pc, #560]	; (800860c <STORING_CheckFirstStart+0x280>)
 80083dc:	2200      	movs	r2, #0
 80083de:	705a      	strb	r2, [r3, #1]
		dlRouteM[0].dayLow = 0;
 80083e0:	4b8a      	ldr	r3, [pc, #552]	; (800860c <STORING_CheckFirstStart+0x280>)
 80083e2:	2200      	movs	r2, #0
 80083e4:	709a      	strb	r2, [r3, #2]
		dlRouteM[0].night = 0;
 80083e6:	4b89      	ldr	r3, [pc, #548]	; (800860c <STORING_CheckFirstStart+0x280>)
 80083e8:	2200      	movs	r2, #0
 80083ea:	701a      	strb	r2, [r3, #0]

		dlRouteM[1].dayHight = 0;
 80083ec:	4b87      	ldr	r3, [pc, #540]	; (800860c <STORING_CheckFirstStart+0x280>)
 80083ee:	2200      	movs	r2, #0
 80083f0:	711a      	strb	r2, [r3, #4]
		dlRouteM[1].dayLow = 0;
 80083f2:	4b86      	ldr	r3, [pc, #536]	; (800860c <STORING_CheckFirstStart+0x280>)
 80083f4:	2200      	movs	r2, #0
 80083f6:	715a      	strb	r2, [r3, #5]
		dlRouteM[1].night = 0;
 80083f8:	4b84      	ldr	r3, [pc, #528]	; (800860c <STORING_CheckFirstStart+0x280>)
 80083fa:	2200      	movs	r2, #0
 80083fc:	70da      	strb	r2, [r3, #3]

		dlRouteM[2].dayHight = 0;
 80083fe:	4b83      	ldr	r3, [pc, #524]	; (800860c <STORING_CheckFirstStart+0x280>)
 8008400:	2200      	movs	r2, #0
 8008402:	71da      	strb	r2, [r3, #7]
		dlRouteM[2].dayLow = 0;
 8008404:	4b81      	ldr	r3, [pc, #516]	; (800860c <STORING_CheckFirstStart+0x280>)
 8008406:	2200      	movs	r2, #0
 8008408:	721a      	strb	r2, [r3, #8]
		dlRouteM[2].night = 0;
 800840a:	4b80      	ldr	r3, [pc, #512]	; (800860c <STORING_CheckFirstStart+0x280>)
 800840c:	2200      	movs	r2, #0
 800840e:	719a      	strb	r2, [r3, #6]

		dlRouteM[3].dayHight = 0;
 8008410:	4b7e      	ldr	r3, [pc, #504]	; (800860c <STORING_CheckFirstStart+0x280>)
 8008412:	2200      	movs	r2, #0
 8008414:	729a      	strb	r2, [r3, #10]
		dlRouteM[3].dayLow = 0;
 8008416:	4b7d      	ldr	r3, [pc, #500]	; (800860c <STORING_CheckFirstStart+0x280>)
 8008418:	2200      	movs	r2, #0
 800841a:	72da      	strb	r2, [r3, #11]
		dlRouteM[3].night = 0;
 800841c:	4b7b      	ldr	r3, [pc, #492]	; (800860c <STORING_CheckFirstStart+0x280>)
 800841e:	2200      	movs	r2, #0
 8008420:	725a      	strb	r2, [r3, #9]

		for (int i = 0; i < 8; i++) { // данные о количестве дней и режимов
 8008422:	2300      	movs	r3, #0
 8008424:	607b      	str	r3, [r7, #4]
 8008426:	e05e      	b.n	80084e6 <STORING_CheckFirstStart+0x15a>
			ProgramForFun[i].firstDay = fullDate;
 8008428:	4b79      	ldr	r3, [pc, #484]	; (8008610 <STORING_CheckFirstStart+0x284>)
 800842a:	8818      	ldrh	r0, [r3, #0]
 800842c:	4a79      	ldr	r2, [pc, #484]	; (8008614 <STORING_CheckFirstStart+0x288>)
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	2186      	movs	r1, #134	; 0x86
 8008432:	fb01 f303 	mul.w	r3, r1, r3
 8008436:	4413      	add	r3, r2
 8008438:	3304      	adds	r3, #4
 800843a:	4602      	mov	r2, r0
 800843c:	801a      	strh	r2, [r3, #0]
			ProgramForFun[i].fanOn = 0;
 800843e:	4a75      	ldr	r2, [pc, #468]	; (8008614 <STORING_CheckFirstStart+0x288>)
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2186      	movs	r1, #134	; 0x86
 8008444:	fb01 f303 	mul.w	r3, r1, r3
 8008448:	4413      	add	r3, r2
 800844a:	3301      	adds	r3, #1
 800844c:	2200      	movs	r2, #0
 800844e:	701a      	strb	r2, [r3, #0]

			ProgramForFun[i].modeNumber1 = 0;
 8008450:	4a70      	ldr	r2, [pc, #448]	; (8008614 <STORING_CheckFirstStart+0x288>)
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	2186      	movs	r1, #134	; 0x86
 8008456:	fb01 f303 	mul.w	r3, r1, r3
 800845a:	4413      	add	r3, r2
 800845c:	337e      	adds	r3, #126	; 0x7e
 800845e:	2200      	movs	r2, #0
 8008460:	701a      	strb	r2, [r3, #0]
			ProgramForFun[i].modeNumber2 = 0;
 8008462:	4a6c      	ldr	r2, [pc, #432]	; (8008614 <STORING_CheckFirstStart+0x288>)
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2186      	movs	r1, #134	; 0x86
 8008468:	fb01 f303 	mul.w	r3, r1, r3
 800846c:	4413      	add	r3, r2
 800846e:	3380      	adds	r3, #128	; 0x80
 8008470:	2200      	movs	r2, #0
 8008472:	701a      	strb	r2, [r3, #0]
			ProgramForFun[i].modeNumber3 = 0;
 8008474:	4a67      	ldr	r2, [pc, #412]	; (8008614 <STORING_CheckFirstStart+0x288>)
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2186      	movs	r1, #134	; 0x86
 800847a:	fb01 f303 	mul.w	r3, r1, r3
 800847e:	4413      	add	r3, r2
 8008480:	3382      	adds	r3, #130	; 0x82
 8008482:	2200      	movs	r2, #0
 8008484:	701a      	strb	r2, [r3, #0]
			ProgramForFun[i].modeNumber4 = 0;
 8008486:	4a63      	ldr	r2, [pc, #396]	; (8008614 <STORING_CheckFirstStart+0x288>)
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2186      	movs	r1, #134	; 0x86
 800848c:	fb01 f303 	mul.w	r3, r1, r3
 8008490:	4413      	add	r3, r2
 8008492:	3384      	adds	r3, #132	; 0x84
 8008494:	2200      	movs	r2, #0
 8008496:	701a      	strb	r2, [r3, #0]

			ProgramForFun[i].numberOfDays1 = 0;
 8008498:	4a5e      	ldr	r2, [pc, #376]	; (8008614 <STORING_CheckFirstStart+0x288>)
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2186      	movs	r1, #134	; 0x86
 800849e:	fb01 f303 	mul.w	r3, r1, r3
 80084a2:	4413      	add	r3, r2
 80084a4:	337f      	adds	r3, #127	; 0x7f
 80084a6:	2200      	movs	r2, #0
 80084a8:	701a      	strb	r2, [r3, #0]
			ProgramForFun[i].numberOfDays2 = 0;
 80084aa:	4a5a      	ldr	r2, [pc, #360]	; (8008614 <STORING_CheckFirstStart+0x288>)
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2186      	movs	r1, #134	; 0x86
 80084b0:	fb01 f303 	mul.w	r3, r1, r3
 80084b4:	4413      	add	r3, r2
 80084b6:	3381      	adds	r3, #129	; 0x81
 80084b8:	2200      	movs	r2, #0
 80084ba:	701a      	strb	r2, [r3, #0]
			ProgramForFun[i].numberOfDays3 = 0;
 80084bc:	4a55      	ldr	r2, [pc, #340]	; (8008614 <STORING_CheckFirstStart+0x288>)
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	2186      	movs	r1, #134	; 0x86
 80084c2:	fb01 f303 	mul.w	r3, r1, r3
 80084c6:	4413      	add	r3, r2
 80084c8:	3383      	adds	r3, #131	; 0x83
 80084ca:	2200      	movs	r2, #0
 80084cc:	701a      	strb	r2, [r3, #0]
			ProgramForFun[i].numberOfDays4 = 0;
 80084ce:	4a51      	ldr	r2, [pc, #324]	; (8008614 <STORING_CheckFirstStart+0x288>)
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2186      	movs	r1, #134	; 0x86
 80084d4:	fb01 f303 	mul.w	r3, r1, r3
 80084d8:	4413      	add	r3, r2
 80084da:	3385      	adds	r3, #133	; 0x85
 80084dc:	2200      	movs	r2, #0
 80084de:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < 8; i++) { // данные о количестве дней и режимов
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	3301      	adds	r3, #1
 80084e4:	607b      	str	r3, [r7, #4]
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	2b07      	cmp	r3, #7
 80084ea:	dd9d      	ble.n	8008428 <STORING_CheckFirstStart+0x9c>

		}

		romMemUn.romMemStr.checkNewFirmware = 0; //указывает что прошивка больше не новая
 80084ec:	4b42      	ldr	r3, [pc, #264]	; (80085f8 <STORING_CheckFirstStart+0x26c>)
 80084ee:	2200      	movs	r2, #0
 80084f0:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
		}

// END заполняем рабочие данные из структуры
	}

}
 80084f4:	e124      	b.n	8008740 <STORING_CheckFirstStart+0x3b4>
		dayOn.Hours = romMemUn.romMemStr.DONHours;
 80084f6:	4b40      	ldr	r3, [pc, #256]	; (80085f8 <STORING_CheckFirstStart+0x26c>)
 80084f8:	781a      	ldrb	r2, [r3, #0]
 80084fa:	4b40      	ldr	r3, [pc, #256]	; (80085fc <STORING_CheckFirstStart+0x270>)
 80084fc:	701a      	strb	r2, [r3, #0]
		dayOn.Minutes = romMemUn.romMemStr.DONMinutes;
 80084fe:	4b3e      	ldr	r3, [pc, #248]	; (80085f8 <STORING_CheckFirstStart+0x26c>)
 8008500:	785a      	ldrb	r2, [r3, #1]
 8008502:	4b3e      	ldr	r3, [pc, #248]	; (80085fc <STORING_CheckFirstStart+0x270>)
 8008504:	705a      	strb	r2, [r3, #1]
		dayOn.Seconds = romMemUn.romMemStr.DONSeconds;
 8008506:	4b3c      	ldr	r3, [pc, #240]	; (80085f8 <STORING_CheckFirstStart+0x26c>)
 8008508:	789a      	ldrb	r2, [r3, #2]
 800850a:	4b3c      	ldr	r3, [pc, #240]	; (80085fc <STORING_CheckFirstStart+0x270>)
 800850c:	709a      	strb	r2, [r3, #2]
				(uint32_t) (((uint32_t) dayOn.Hours * 3600U)
 800850e:	4b3b      	ldr	r3, [pc, #236]	; (80085fc <STORING_CheckFirstStart+0x270>)
 8008510:	781b      	ldrb	r3, [r3, #0]
 8008512:	461a      	mov	r2, r3
 8008514:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8008518:	fb03 f202 	mul.w	r2, r3, r2
						+ ((uint32_t) dayOn.Minutes * 60U)
 800851c:	4b37      	ldr	r3, [pc, #220]	; (80085fc <STORING_CheckFirstStart+0x270>)
 800851e:	785b      	ldrb	r3, [r3, #1]
 8008520:	4619      	mov	r1, r3
 8008522:	460b      	mov	r3, r1
 8008524:	011b      	lsls	r3, r3, #4
 8008526:	1a5b      	subs	r3, r3, r1
 8008528:	009b      	lsls	r3, r3, #2
 800852a:	4413      	add	r3, r2
						+ ((uint32_t) dayOn.Seconds));
 800852c:	4a33      	ldr	r2, [pc, #204]	; (80085fc <STORING_CheckFirstStart+0x270>)
 800852e:	7892      	ldrb	r2, [r2, #2]
				(uint32_t) (((uint32_t) dayOn.Hours * 3600U)
 8008530:	4413      	add	r3, r2
		dayOn.FullTime =
 8008532:	4a32      	ldr	r2, [pc, #200]	; (80085fc <STORING_CheckFirstStart+0x270>)
 8008534:	6153      	str	r3, [r2, #20]
		dayOff.Hours = romMemUn.romMemStr.DOFFHours;
 8008536:	4b30      	ldr	r3, [pc, #192]	; (80085f8 <STORING_CheckFirstStart+0x26c>)
 8008538:	78da      	ldrb	r2, [r3, #3]
 800853a:	4b31      	ldr	r3, [pc, #196]	; (8008600 <STORING_CheckFirstStart+0x274>)
 800853c:	701a      	strb	r2, [r3, #0]
		dayOff.Minutes = romMemUn.romMemStr.DOFFMinutes;
 800853e:	4b2e      	ldr	r3, [pc, #184]	; (80085f8 <STORING_CheckFirstStart+0x26c>)
 8008540:	791a      	ldrb	r2, [r3, #4]
 8008542:	4b2f      	ldr	r3, [pc, #188]	; (8008600 <STORING_CheckFirstStart+0x274>)
 8008544:	705a      	strb	r2, [r3, #1]
		dayOff.Seconds = romMemUn.romMemStr.DOFFSeconds;
 8008546:	4b2c      	ldr	r3, [pc, #176]	; (80085f8 <STORING_CheckFirstStart+0x26c>)
 8008548:	795a      	ldrb	r2, [r3, #5]
 800854a:	4b2d      	ldr	r3, [pc, #180]	; (8008600 <STORING_CheckFirstStart+0x274>)
 800854c:	709a      	strb	r2, [r3, #2]
		dayOff.FullTime = (uint32_t) (((uint32_t) dayOff.Hours * 3600U)
 800854e:	4b2c      	ldr	r3, [pc, #176]	; (8008600 <STORING_CheckFirstStart+0x274>)
 8008550:	781b      	ldrb	r3, [r3, #0]
 8008552:	461a      	mov	r2, r3
 8008554:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8008558:	fb03 f202 	mul.w	r2, r3, r2
				+ ((uint32_t) dayOff.Minutes * 60U)
 800855c:	4b28      	ldr	r3, [pc, #160]	; (8008600 <STORING_CheckFirstStart+0x274>)
 800855e:	785b      	ldrb	r3, [r3, #1]
 8008560:	4619      	mov	r1, r3
 8008562:	460b      	mov	r3, r1
 8008564:	011b      	lsls	r3, r3, #4
 8008566:	1a5b      	subs	r3, r3, r1
 8008568:	009b      	lsls	r3, r3, #2
 800856a:	4413      	add	r3, r2
				+ ((uint32_t) dayOff.Seconds));
 800856c:	4a24      	ldr	r2, [pc, #144]	; (8008600 <STORING_CheckFirstStart+0x274>)
 800856e:	7892      	ldrb	r2, [r2, #2]
		dayOff.FullTime = (uint32_t) (((uint32_t) dayOff.Hours * 3600U)
 8008570:	4413      	add	r3, r2
 8008572:	4a23      	ldr	r2, [pc, #140]	; (8008600 <STORING_CheckFirstStart+0x274>)
 8008574:	6153      	str	r3, [r2, #20]
		g_switchingPeriod = romMemUn.romMemStr.switchingPeriod;
 8008576:	4b20      	ldr	r3, [pc, #128]	; (80085f8 <STORING_CheckFirstStart+0x26c>)
 8008578:	799a      	ldrb	r2, [r3, #6]
 800857a:	4b22      	ldr	r3, [pc, #136]	; (8008604 <STORING_CheckFirstStart+0x278>)
 800857c:	701a      	strb	r2, [r3, #0]
		TIM4->ARR = (uint32_t) (g_switchingPeriod * 1000 - 1);
 800857e:	4b21      	ldr	r3, [pc, #132]	; (8008604 <STORING_CheckFirstStart+0x278>)
 8008580:	781b      	ldrb	r3, [r3, #0]
 8008582:	461a      	mov	r2, r3
 8008584:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008588:	fb03 f302 	mul.w	r3, r3, r2
 800858c:	1e5a      	subs	r2, r3, #1
 800858e:	4b1e      	ldr	r3, [pc, #120]	; (8008608 <STORING_CheckFirstStart+0x27c>)
 8008590:	62da      	str	r2, [r3, #44]	; 0x2c
		dlRouteM[0].dayHight = romMemUn.romMemStr.Mode0H;
 8008592:	4b19      	ldr	r3, [pc, #100]	; (80085f8 <STORING_CheckFirstStart+0x26c>)
 8008594:	79da      	ldrb	r2, [r3, #7]
 8008596:	4b1d      	ldr	r3, [pc, #116]	; (800860c <STORING_CheckFirstStart+0x280>)
 8008598:	705a      	strb	r2, [r3, #1]
		dlRouteM[0].dayLow = romMemUn.romMemStr.Mode0L;
 800859a:	4b17      	ldr	r3, [pc, #92]	; (80085f8 <STORING_CheckFirstStart+0x26c>)
 800859c:	7a1a      	ldrb	r2, [r3, #8]
 800859e:	4b1b      	ldr	r3, [pc, #108]	; (800860c <STORING_CheckFirstStart+0x280>)
 80085a0:	709a      	strb	r2, [r3, #2]
		dlRouteM[0].night = romMemUn.romMemStr.Mode0N;
 80085a2:	4b15      	ldr	r3, [pc, #84]	; (80085f8 <STORING_CheckFirstStart+0x26c>)
 80085a4:	7a5a      	ldrb	r2, [r3, #9]
 80085a6:	4b19      	ldr	r3, [pc, #100]	; (800860c <STORING_CheckFirstStart+0x280>)
 80085a8:	701a      	strb	r2, [r3, #0]
		dlRouteM[1].dayHight = romMemUn.romMemStr.Mode1H;
 80085aa:	4b13      	ldr	r3, [pc, #76]	; (80085f8 <STORING_CheckFirstStart+0x26c>)
 80085ac:	7a9a      	ldrb	r2, [r3, #10]
 80085ae:	4b17      	ldr	r3, [pc, #92]	; (800860c <STORING_CheckFirstStart+0x280>)
 80085b0:	711a      	strb	r2, [r3, #4]
		dlRouteM[1].dayLow = romMemUn.romMemStr.Mode1L;
 80085b2:	4b11      	ldr	r3, [pc, #68]	; (80085f8 <STORING_CheckFirstStart+0x26c>)
 80085b4:	7ada      	ldrb	r2, [r3, #11]
 80085b6:	4b15      	ldr	r3, [pc, #84]	; (800860c <STORING_CheckFirstStart+0x280>)
 80085b8:	715a      	strb	r2, [r3, #5]
		dlRouteM[1].night = romMemUn.romMemStr.Mode1N;
 80085ba:	4b0f      	ldr	r3, [pc, #60]	; (80085f8 <STORING_CheckFirstStart+0x26c>)
 80085bc:	7b1a      	ldrb	r2, [r3, #12]
 80085be:	4b13      	ldr	r3, [pc, #76]	; (800860c <STORING_CheckFirstStart+0x280>)
 80085c0:	70da      	strb	r2, [r3, #3]
		dlRouteM[2].dayHight = romMemUn.romMemStr.Mode2H;
 80085c2:	4b0d      	ldr	r3, [pc, #52]	; (80085f8 <STORING_CheckFirstStart+0x26c>)
 80085c4:	7b5a      	ldrb	r2, [r3, #13]
 80085c6:	4b11      	ldr	r3, [pc, #68]	; (800860c <STORING_CheckFirstStart+0x280>)
 80085c8:	71da      	strb	r2, [r3, #7]
		dlRouteM[2].dayLow = romMemUn.romMemStr.Mode2L;
 80085ca:	4b0b      	ldr	r3, [pc, #44]	; (80085f8 <STORING_CheckFirstStart+0x26c>)
 80085cc:	7b9a      	ldrb	r2, [r3, #14]
 80085ce:	4b0f      	ldr	r3, [pc, #60]	; (800860c <STORING_CheckFirstStart+0x280>)
 80085d0:	721a      	strb	r2, [r3, #8]
		dlRouteM[2].night = romMemUn.romMemStr.Mode2N;
 80085d2:	4b09      	ldr	r3, [pc, #36]	; (80085f8 <STORING_CheckFirstStart+0x26c>)
 80085d4:	7bda      	ldrb	r2, [r3, #15]
 80085d6:	4b0d      	ldr	r3, [pc, #52]	; (800860c <STORING_CheckFirstStart+0x280>)
 80085d8:	719a      	strb	r2, [r3, #6]
		dlRouteM[3].dayHight = romMemUn.romMemStr.Mode3H;
 80085da:	4b07      	ldr	r3, [pc, #28]	; (80085f8 <STORING_CheckFirstStart+0x26c>)
 80085dc:	7c1a      	ldrb	r2, [r3, #16]
 80085de:	4b0b      	ldr	r3, [pc, #44]	; (800860c <STORING_CheckFirstStart+0x280>)
 80085e0:	729a      	strb	r2, [r3, #10]
		dlRouteM[3].dayLow = romMemUn.romMemStr.Mode3L;
 80085e2:	4b05      	ldr	r3, [pc, #20]	; (80085f8 <STORING_CheckFirstStart+0x26c>)
 80085e4:	7c5a      	ldrb	r2, [r3, #17]
 80085e6:	4b09      	ldr	r3, [pc, #36]	; (800860c <STORING_CheckFirstStart+0x280>)
 80085e8:	72da      	strb	r2, [r3, #11]
		dlRouteM[3].night = romMemUn.romMemStr.Mode3N;
 80085ea:	4b03      	ldr	r3, [pc, #12]	; (80085f8 <STORING_CheckFirstStart+0x26c>)
 80085ec:	7c9a      	ldrb	r2, [r3, #18]
 80085ee:	4b07      	ldr	r3, [pc, #28]	; (800860c <STORING_CheckFirstStart+0x280>)
 80085f0:	725a      	strb	r2, [r3, #9]
		for (int i = 0; i < 8; i++) { // данные о количестве дней и режимов
 80085f2:	2300      	movs	r3, #0
 80085f4:	603b      	str	r3, [r7, #0]
 80085f6:	e09f      	b.n	8008738 <STORING_CheckFirstStart+0x3ac>
 80085f8:	20001944 	.word	0x20001944
 80085fc:	20000e8c 	.word	0x20000e8c
 8008600:	20000ea4 	.word	0x20000ea4
 8008604:	200000b2 	.word	0x200000b2
 8008608:	40000800 	.word	0x40000800
 800860c:	20001300 	.word	0x20001300
 8008610:	200000b0 	.word	0x200000b0
 8008614:	20001310 	.word	0x20001310
			ProgramForFun[i].firstDay = romMemUn.romMemStr.firstDay[i];
 8008618:	4a4c      	ldr	r2, [pc, #304]	; (800874c <STORING_CheckFirstStart+0x3c0>)
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	3308      	adds	r3, #8
 800861e:	005b      	lsls	r3, r3, #1
 8008620:	4413      	add	r3, r2
 8008622:	8898      	ldrh	r0, [r3, #4]
 8008624:	4a4a      	ldr	r2, [pc, #296]	; (8008750 <STORING_CheckFirstStart+0x3c4>)
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	2186      	movs	r1, #134	; 0x86
 800862a:	fb01 f303 	mul.w	r3, r1, r3
 800862e:	4413      	add	r3, r2
 8008630:	3304      	adds	r3, #4
 8008632:	4602      	mov	r2, r0
 8008634:	801a      	strh	r2, [r3, #0]
			ProgramForFun[i].fanOn = romMemUn.romMemStr.fanOn[i];
 8008636:	4a45      	ldr	r2, [pc, #276]	; (800874c <STORING_CheckFirstStart+0x3c0>)
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	4413      	add	r3, r2
 800863c:	3324      	adds	r3, #36	; 0x24
 800863e:	7818      	ldrb	r0, [r3, #0]
 8008640:	4a43      	ldr	r2, [pc, #268]	; (8008750 <STORING_CheckFirstStart+0x3c4>)
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	2186      	movs	r1, #134	; 0x86
 8008646:	fb01 f303 	mul.w	r3, r1, r3
 800864a:	4413      	add	r3, r2
 800864c:	3301      	adds	r3, #1
 800864e:	4602      	mov	r2, r0
 8008650:	701a      	strb	r2, [r3, #0]
			ProgramForFun[i].modeNumber1 = romMemUn.romMemStr.modeNumber1[i];
 8008652:	4a3e      	ldr	r2, [pc, #248]	; (800874c <STORING_CheckFirstStart+0x3c0>)
 8008654:	683b      	ldr	r3, [r7, #0]
 8008656:	4413      	add	r3, r2
 8008658:	332c      	adds	r3, #44	; 0x2c
 800865a:	7818      	ldrb	r0, [r3, #0]
 800865c:	4a3c      	ldr	r2, [pc, #240]	; (8008750 <STORING_CheckFirstStart+0x3c4>)
 800865e:	683b      	ldr	r3, [r7, #0]
 8008660:	2186      	movs	r1, #134	; 0x86
 8008662:	fb01 f303 	mul.w	r3, r1, r3
 8008666:	4413      	add	r3, r2
 8008668:	337e      	adds	r3, #126	; 0x7e
 800866a:	4602      	mov	r2, r0
 800866c:	701a      	strb	r2, [r3, #0]
			ProgramForFun[i].modeNumber2 = romMemUn.romMemStr.modeNumber2[i];
 800866e:	4a37      	ldr	r2, [pc, #220]	; (800874c <STORING_CheckFirstStart+0x3c0>)
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	4413      	add	r3, r2
 8008674:	3334      	adds	r3, #52	; 0x34
 8008676:	7818      	ldrb	r0, [r3, #0]
 8008678:	4a35      	ldr	r2, [pc, #212]	; (8008750 <STORING_CheckFirstStart+0x3c4>)
 800867a:	683b      	ldr	r3, [r7, #0]
 800867c:	2186      	movs	r1, #134	; 0x86
 800867e:	fb01 f303 	mul.w	r3, r1, r3
 8008682:	4413      	add	r3, r2
 8008684:	3380      	adds	r3, #128	; 0x80
 8008686:	4602      	mov	r2, r0
 8008688:	701a      	strb	r2, [r3, #0]
			ProgramForFun[i].modeNumber3 = romMemUn.romMemStr.modeNumber3[i];
 800868a:	4a30      	ldr	r2, [pc, #192]	; (800874c <STORING_CheckFirstStart+0x3c0>)
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	4413      	add	r3, r2
 8008690:	333c      	adds	r3, #60	; 0x3c
 8008692:	7818      	ldrb	r0, [r3, #0]
 8008694:	4a2e      	ldr	r2, [pc, #184]	; (8008750 <STORING_CheckFirstStart+0x3c4>)
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	2186      	movs	r1, #134	; 0x86
 800869a:	fb01 f303 	mul.w	r3, r1, r3
 800869e:	4413      	add	r3, r2
 80086a0:	3382      	adds	r3, #130	; 0x82
 80086a2:	4602      	mov	r2, r0
 80086a4:	701a      	strb	r2, [r3, #0]
			ProgramForFun[i].modeNumber4 = romMemUn.romMemStr.modeNumber4[i];
 80086a6:	4a29      	ldr	r2, [pc, #164]	; (800874c <STORING_CheckFirstStart+0x3c0>)
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	4413      	add	r3, r2
 80086ac:	3344      	adds	r3, #68	; 0x44
 80086ae:	7818      	ldrb	r0, [r3, #0]
 80086b0:	4a27      	ldr	r2, [pc, #156]	; (8008750 <STORING_CheckFirstStart+0x3c4>)
 80086b2:	683b      	ldr	r3, [r7, #0]
 80086b4:	2186      	movs	r1, #134	; 0x86
 80086b6:	fb01 f303 	mul.w	r3, r1, r3
 80086ba:	4413      	add	r3, r2
 80086bc:	3384      	adds	r3, #132	; 0x84
 80086be:	4602      	mov	r2, r0
 80086c0:	701a      	strb	r2, [r3, #0]
					romMemUn.romMemStr.numberOfDays1[i];
 80086c2:	4a22      	ldr	r2, [pc, #136]	; (800874c <STORING_CheckFirstStart+0x3c0>)
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	4413      	add	r3, r2
 80086c8:	334c      	adds	r3, #76	; 0x4c
 80086ca:	7818      	ldrb	r0, [r3, #0]
			ProgramForFun[i].numberOfDays1 =
 80086cc:	4a20      	ldr	r2, [pc, #128]	; (8008750 <STORING_CheckFirstStart+0x3c4>)
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	2186      	movs	r1, #134	; 0x86
 80086d2:	fb01 f303 	mul.w	r3, r1, r3
 80086d6:	4413      	add	r3, r2
 80086d8:	337f      	adds	r3, #127	; 0x7f
 80086da:	4602      	mov	r2, r0
 80086dc:	701a      	strb	r2, [r3, #0]
					romMemUn.romMemStr.numberOfDays2[i];
 80086de:	4a1b      	ldr	r2, [pc, #108]	; (800874c <STORING_CheckFirstStart+0x3c0>)
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	4413      	add	r3, r2
 80086e4:	3354      	adds	r3, #84	; 0x54
 80086e6:	7818      	ldrb	r0, [r3, #0]
			ProgramForFun[i].numberOfDays2 =
 80086e8:	4a19      	ldr	r2, [pc, #100]	; (8008750 <STORING_CheckFirstStart+0x3c4>)
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	2186      	movs	r1, #134	; 0x86
 80086ee:	fb01 f303 	mul.w	r3, r1, r3
 80086f2:	4413      	add	r3, r2
 80086f4:	3381      	adds	r3, #129	; 0x81
 80086f6:	4602      	mov	r2, r0
 80086f8:	701a      	strb	r2, [r3, #0]
					romMemUn.romMemStr.numberOfDays3[i];
 80086fa:	4a14      	ldr	r2, [pc, #80]	; (800874c <STORING_CheckFirstStart+0x3c0>)
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	4413      	add	r3, r2
 8008700:	335c      	adds	r3, #92	; 0x5c
 8008702:	7818      	ldrb	r0, [r3, #0]
			ProgramForFun[i].numberOfDays3 =
 8008704:	4a12      	ldr	r2, [pc, #72]	; (8008750 <STORING_CheckFirstStart+0x3c4>)
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	2186      	movs	r1, #134	; 0x86
 800870a:	fb01 f303 	mul.w	r3, r1, r3
 800870e:	4413      	add	r3, r2
 8008710:	3383      	adds	r3, #131	; 0x83
 8008712:	4602      	mov	r2, r0
 8008714:	701a      	strb	r2, [r3, #0]
					romMemUn.romMemStr.numberOfDays4[i];
 8008716:	4a0d      	ldr	r2, [pc, #52]	; (800874c <STORING_CheckFirstStart+0x3c0>)
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	4413      	add	r3, r2
 800871c:	3364      	adds	r3, #100	; 0x64
 800871e:	7818      	ldrb	r0, [r3, #0]
			ProgramForFun[i].numberOfDays4 =
 8008720:	4a0b      	ldr	r2, [pc, #44]	; (8008750 <STORING_CheckFirstStart+0x3c4>)
 8008722:	683b      	ldr	r3, [r7, #0]
 8008724:	2186      	movs	r1, #134	; 0x86
 8008726:	fb01 f303 	mul.w	r3, r1, r3
 800872a:	4413      	add	r3, r2
 800872c:	3385      	adds	r3, #133	; 0x85
 800872e:	4602      	mov	r2, r0
 8008730:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < 8; i++) { // данные о количестве дней и режимов
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	3301      	adds	r3, #1
 8008736:	603b      	str	r3, [r7, #0]
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	2b07      	cmp	r3, #7
 800873c:	f77f af6c 	ble.w	8008618 <STORING_CheckFirstStart+0x28c>
}
 8008740:	bf00      	nop
 8008742:	370c      	adds	r7, #12
 8008744:	46bd      	mov	sp, r7
 8008746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874a:	4770      	bx	lr
 800874c:	20001944 	.word	0x20001944
 8008750:	20001310 	.word	0x20001310

08008754 <STORING_SaveSetting>:
//
//-------------------------------------------------------------
//
// save all data
void STORING_SaveSetting(void) { //	переносим текущие значения в структуру хранения
 8008754:	b580      	push	{r7, lr}
 8008756:	b084      	sub	sp, #16
 8008758:	af00      	add	r7, sp, #0

	romMemUn.romMemStr.DONHours = dayOn.Hours;
 800875a:	4b86      	ldr	r3, [pc, #536]	; (8008974 <STORING_SaveSetting+0x220>)
 800875c:	781a      	ldrb	r2, [r3, #0]
 800875e:	4b86      	ldr	r3, [pc, #536]	; (8008978 <STORING_SaveSetting+0x224>)
 8008760:	701a      	strb	r2, [r3, #0]
	romMemUn.romMemStr.DONMinutes = dayOn.Minutes;
 8008762:	4b84      	ldr	r3, [pc, #528]	; (8008974 <STORING_SaveSetting+0x220>)
 8008764:	785a      	ldrb	r2, [r3, #1]
 8008766:	4b84      	ldr	r3, [pc, #528]	; (8008978 <STORING_SaveSetting+0x224>)
 8008768:	705a      	strb	r2, [r3, #1]
	romMemUn.romMemStr.DONSeconds = dayOn.Seconds;
 800876a:	4b82      	ldr	r3, [pc, #520]	; (8008974 <STORING_SaveSetting+0x220>)
 800876c:	789a      	ldrb	r2, [r3, #2]
 800876e:	4b82      	ldr	r3, [pc, #520]	; (8008978 <STORING_SaveSetting+0x224>)
 8008770:	709a      	strb	r2, [r3, #2]

	romMemUn.romMemStr.DOFFHours = dayOff.Hours;
 8008772:	4b82      	ldr	r3, [pc, #520]	; (800897c <STORING_SaveSetting+0x228>)
 8008774:	781a      	ldrb	r2, [r3, #0]
 8008776:	4b80      	ldr	r3, [pc, #512]	; (8008978 <STORING_SaveSetting+0x224>)
 8008778:	70da      	strb	r2, [r3, #3]
	romMemUn.romMemStr.DOFFMinutes = dayOff.Minutes;
 800877a:	4b80      	ldr	r3, [pc, #512]	; (800897c <STORING_SaveSetting+0x228>)
 800877c:	785a      	ldrb	r2, [r3, #1]
 800877e:	4b7e      	ldr	r3, [pc, #504]	; (8008978 <STORING_SaveSetting+0x224>)
 8008780:	711a      	strb	r2, [r3, #4]
	romMemUn.romMemStr.DOFFSeconds = dayOff.Seconds;
 8008782:	4b7e      	ldr	r3, [pc, #504]	; (800897c <STORING_SaveSetting+0x228>)
 8008784:	789a      	ldrb	r2, [r3, #2]
 8008786:	4b7c      	ldr	r3, [pc, #496]	; (8008978 <STORING_SaveSetting+0x224>)
 8008788:	715a      	strb	r2, [r3, #5]

	romMemUn.romMemStr.switchingPeriod = g_switchingPeriod;
 800878a:	4b7d      	ldr	r3, [pc, #500]	; (8008980 <STORING_SaveSetting+0x22c>)
 800878c:	781a      	ldrb	r2, [r3, #0]
 800878e:	4b7a      	ldr	r3, [pc, #488]	; (8008978 <STORING_SaveSetting+0x224>)
 8008790:	719a      	strb	r2, [r3, #6]

	romMemUn.romMemStr.Mode0H = dlRouteM[0].dayHight;
 8008792:	4b7c      	ldr	r3, [pc, #496]	; (8008984 <STORING_SaveSetting+0x230>)
 8008794:	785a      	ldrb	r2, [r3, #1]
 8008796:	4b78      	ldr	r3, [pc, #480]	; (8008978 <STORING_SaveSetting+0x224>)
 8008798:	71da      	strb	r2, [r3, #7]
	romMemUn.romMemStr.Mode0L = dlRouteM[0].dayLow;
 800879a:	4b7a      	ldr	r3, [pc, #488]	; (8008984 <STORING_SaveSetting+0x230>)
 800879c:	789a      	ldrb	r2, [r3, #2]
 800879e:	4b76      	ldr	r3, [pc, #472]	; (8008978 <STORING_SaveSetting+0x224>)
 80087a0:	721a      	strb	r2, [r3, #8]
	romMemUn.romMemStr.Mode0N = dlRouteM[0].night;
 80087a2:	4b78      	ldr	r3, [pc, #480]	; (8008984 <STORING_SaveSetting+0x230>)
 80087a4:	781a      	ldrb	r2, [r3, #0]
 80087a6:	4b74      	ldr	r3, [pc, #464]	; (8008978 <STORING_SaveSetting+0x224>)
 80087a8:	725a      	strb	r2, [r3, #9]

	romMemUn.romMemStr.Mode1H = dlRouteM[1].dayHight;
 80087aa:	4b76      	ldr	r3, [pc, #472]	; (8008984 <STORING_SaveSetting+0x230>)
 80087ac:	791a      	ldrb	r2, [r3, #4]
 80087ae:	4b72      	ldr	r3, [pc, #456]	; (8008978 <STORING_SaveSetting+0x224>)
 80087b0:	729a      	strb	r2, [r3, #10]
	romMemUn.romMemStr.Mode1L = dlRouteM[1].dayLow;
 80087b2:	4b74      	ldr	r3, [pc, #464]	; (8008984 <STORING_SaveSetting+0x230>)
 80087b4:	795a      	ldrb	r2, [r3, #5]
 80087b6:	4b70      	ldr	r3, [pc, #448]	; (8008978 <STORING_SaveSetting+0x224>)
 80087b8:	72da      	strb	r2, [r3, #11]
	romMemUn.romMemStr.Mode1N = dlRouteM[1].night;
 80087ba:	4b72      	ldr	r3, [pc, #456]	; (8008984 <STORING_SaveSetting+0x230>)
 80087bc:	78da      	ldrb	r2, [r3, #3]
 80087be:	4b6e      	ldr	r3, [pc, #440]	; (8008978 <STORING_SaveSetting+0x224>)
 80087c0:	731a      	strb	r2, [r3, #12]

	romMemUn.romMemStr.Mode2H = dlRouteM[2].dayHight;
 80087c2:	4b70      	ldr	r3, [pc, #448]	; (8008984 <STORING_SaveSetting+0x230>)
 80087c4:	79da      	ldrb	r2, [r3, #7]
 80087c6:	4b6c      	ldr	r3, [pc, #432]	; (8008978 <STORING_SaveSetting+0x224>)
 80087c8:	735a      	strb	r2, [r3, #13]
	romMemUn.romMemStr.Mode2L = dlRouteM[2].dayLow;
 80087ca:	4b6e      	ldr	r3, [pc, #440]	; (8008984 <STORING_SaveSetting+0x230>)
 80087cc:	7a1a      	ldrb	r2, [r3, #8]
 80087ce:	4b6a      	ldr	r3, [pc, #424]	; (8008978 <STORING_SaveSetting+0x224>)
 80087d0:	739a      	strb	r2, [r3, #14]
	romMemUn.romMemStr.Mode2N = dlRouteM[2].night;
 80087d2:	4b6c      	ldr	r3, [pc, #432]	; (8008984 <STORING_SaveSetting+0x230>)
 80087d4:	799a      	ldrb	r2, [r3, #6]
 80087d6:	4b68      	ldr	r3, [pc, #416]	; (8008978 <STORING_SaveSetting+0x224>)
 80087d8:	73da      	strb	r2, [r3, #15]

	romMemUn.romMemStr.Mode3H = dlRouteM[3].dayHight;
 80087da:	4b6a      	ldr	r3, [pc, #424]	; (8008984 <STORING_SaveSetting+0x230>)
 80087dc:	7a9a      	ldrb	r2, [r3, #10]
 80087de:	4b66      	ldr	r3, [pc, #408]	; (8008978 <STORING_SaveSetting+0x224>)
 80087e0:	741a      	strb	r2, [r3, #16]
	romMemUn.romMemStr.Mode3L = dlRouteM[3].dayLow;
 80087e2:	4b68      	ldr	r3, [pc, #416]	; (8008984 <STORING_SaveSetting+0x230>)
 80087e4:	7ada      	ldrb	r2, [r3, #11]
 80087e6:	4b64      	ldr	r3, [pc, #400]	; (8008978 <STORING_SaveSetting+0x224>)
 80087e8:	745a      	strb	r2, [r3, #17]
	romMemUn.romMemStr.Mode3N = dlRouteM[3].night;
 80087ea:	4b66      	ldr	r3, [pc, #408]	; (8008984 <STORING_SaveSetting+0x230>)
 80087ec:	7a5a      	ldrb	r2, [r3, #9]
 80087ee:	4b62      	ldr	r3, [pc, #392]	; (8008978 <STORING_SaveSetting+0x224>)
 80087f0:	749a      	strb	r2, [r3, #18]

	for (int i = 0; i < 8; i++) { // данных о количестве дней и режимов
 80087f2:	2300      	movs	r3, #0
 80087f4:	60fb      	str	r3, [r7, #12]
 80087f6:	e08f      	b.n	8008918 <STORING_SaveSetting+0x1c4>
		romMemUn.romMemStr.firstDay[i] = ProgramForFun[i].firstDay;
 80087f8:	4a63      	ldr	r2, [pc, #396]	; (8008988 <STORING_SaveSetting+0x234>)
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	2186      	movs	r1, #134	; 0x86
 80087fe:	fb01 f303 	mul.w	r3, r1, r3
 8008802:	4413      	add	r3, r2
 8008804:	3304      	adds	r3, #4
 8008806:	8819      	ldrh	r1, [r3, #0]
 8008808:	4a5b      	ldr	r2, [pc, #364]	; (8008978 <STORING_SaveSetting+0x224>)
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	3308      	adds	r3, #8
 800880e:	005b      	lsls	r3, r3, #1
 8008810:	4413      	add	r3, r2
 8008812:	460a      	mov	r2, r1
 8008814:	809a      	strh	r2, [r3, #4]

		romMemUn.romMemStr.fanOn[i] = ProgramForFun[i].fanOn;
 8008816:	4a5c      	ldr	r2, [pc, #368]	; (8008988 <STORING_SaveSetting+0x234>)
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	2186      	movs	r1, #134	; 0x86
 800881c:	fb01 f303 	mul.w	r3, r1, r3
 8008820:	4413      	add	r3, r2
 8008822:	3301      	adds	r3, #1
 8008824:	7819      	ldrb	r1, [r3, #0]
 8008826:	4a54      	ldr	r2, [pc, #336]	; (8008978 <STORING_SaveSetting+0x224>)
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	4413      	add	r3, r2
 800882c:	3324      	adds	r3, #36	; 0x24
 800882e:	460a      	mov	r2, r1
 8008830:	701a      	strb	r2, [r3, #0]

//1-4 это номера частей цикла работы вентилятора		
		romMemUn.romMemStr.modeNumber1[i] = ProgramForFun[i].modeNumber1;
 8008832:	4a55      	ldr	r2, [pc, #340]	; (8008988 <STORING_SaveSetting+0x234>)
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	2186      	movs	r1, #134	; 0x86
 8008838:	fb01 f303 	mul.w	r3, r1, r3
 800883c:	4413      	add	r3, r2
 800883e:	337e      	adds	r3, #126	; 0x7e
 8008840:	7819      	ldrb	r1, [r3, #0]
 8008842:	4a4d      	ldr	r2, [pc, #308]	; (8008978 <STORING_SaveSetting+0x224>)
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	4413      	add	r3, r2
 8008848:	332c      	adds	r3, #44	; 0x2c
 800884a:	460a      	mov	r2, r1
 800884c:	701a      	strb	r2, [r3, #0]
		romMemUn.romMemStr.modeNumber2[i] = ProgramForFun[i].modeNumber2;
 800884e:	4a4e      	ldr	r2, [pc, #312]	; (8008988 <STORING_SaveSetting+0x234>)
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	2186      	movs	r1, #134	; 0x86
 8008854:	fb01 f303 	mul.w	r3, r1, r3
 8008858:	4413      	add	r3, r2
 800885a:	3380      	adds	r3, #128	; 0x80
 800885c:	7819      	ldrb	r1, [r3, #0]
 800885e:	4a46      	ldr	r2, [pc, #280]	; (8008978 <STORING_SaveSetting+0x224>)
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	4413      	add	r3, r2
 8008864:	3334      	adds	r3, #52	; 0x34
 8008866:	460a      	mov	r2, r1
 8008868:	701a      	strb	r2, [r3, #0]
		romMemUn.romMemStr.modeNumber3[i] = ProgramForFun[i].modeNumber3;
 800886a:	4a47      	ldr	r2, [pc, #284]	; (8008988 <STORING_SaveSetting+0x234>)
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	2186      	movs	r1, #134	; 0x86
 8008870:	fb01 f303 	mul.w	r3, r1, r3
 8008874:	4413      	add	r3, r2
 8008876:	3382      	adds	r3, #130	; 0x82
 8008878:	7819      	ldrb	r1, [r3, #0]
 800887a:	4a3f      	ldr	r2, [pc, #252]	; (8008978 <STORING_SaveSetting+0x224>)
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	4413      	add	r3, r2
 8008880:	333c      	adds	r3, #60	; 0x3c
 8008882:	460a      	mov	r2, r1
 8008884:	701a      	strb	r2, [r3, #0]
		romMemUn.romMemStr.modeNumber4[i] = ProgramForFun[i].modeNumber4;
 8008886:	4a40      	ldr	r2, [pc, #256]	; (8008988 <STORING_SaveSetting+0x234>)
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	2186      	movs	r1, #134	; 0x86
 800888c:	fb01 f303 	mul.w	r3, r1, r3
 8008890:	4413      	add	r3, r2
 8008892:	3384      	adds	r3, #132	; 0x84
 8008894:	7819      	ldrb	r1, [r3, #0]
 8008896:	4a38      	ldr	r2, [pc, #224]	; (8008978 <STORING_SaveSetting+0x224>)
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	4413      	add	r3, r2
 800889c:	3344      	adds	r3, #68	; 0x44
 800889e:	460a      	mov	r2, r1
 80088a0:	701a      	strb	r2, [r3, #0]

		romMemUn.romMemStr.numberOfDays1[i] = ProgramForFun[i].numberOfDays1;
 80088a2:	4a39      	ldr	r2, [pc, #228]	; (8008988 <STORING_SaveSetting+0x234>)
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	2186      	movs	r1, #134	; 0x86
 80088a8:	fb01 f303 	mul.w	r3, r1, r3
 80088ac:	4413      	add	r3, r2
 80088ae:	337f      	adds	r3, #127	; 0x7f
 80088b0:	7819      	ldrb	r1, [r3, #0]
 80088b2:	4a31      	ldr	r2, [pc, #196]	; (8008978 <STORING_SaveSetting+0x224>)
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	4413      	add	r3, r2
 80088b8:	334c      	adds	r3, #76	; 0x4c
 80088ba:	460a      	mov	r2, r1
 80088bc:	701a      	strb	r2, [r3, #0]
		romMemUn.romMemStr.numberOfDays2[i] = ProgramForFun[i].numberOfDays2;
 80088be:	4a32      	ldr	r2, [pc, #200]	; (8008988 <STORING_SaveSetting+0x234>)
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	2186      	movs	r1, #134	; 0x86
 80088c4:	fb01 f303 	mul.w	r3, r1, r3
 80088c8:	4413      	add	r3, r2
 80088ca:	3381      	adds	r3, #129	; 0x81
 80088cc:	7819      	ldrb	r1, [r3, #0]
 80088ce:	4a2a      	ldr	r2, [pc, #168]	; (8008978 <STORING_SaveSetting+0x224>)
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	4413      	add	r3, r2
 80088d4:	3354      	adds	r3, #84	; 0x54
 80088d6:	460a      	mov	r2, r1
 80088d8:	701a      	strb	r2, [r3, #0]
		romMemUn.romMemStr.numberOfDays3[i] = ProgramForFun[i].numberOfDays3;
 80088da:	4a2b      	ldr	r2, [pc, #172]	; (8008988 <STORING_SaveSetting+0x234>)
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	2186      	movs	r1, #134	; 0x86
 80088e0:	fb01 f303 	mul.w	r3, r1, r3
 80088e4:	4413      	add	r3, r2
 80088e6:	3383      	adds	r3, #131	; 0x83
 80088e8:	7819      	ldrb	r1, [r3, #0]
 80088ea:	4a23      	ldr	r2, [pc, #140]	; (8008978 <STORING_SaveSetting+0x224>)
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	4413      	add	r3, r2
 80088f0:	335c      	adds	r3, #92	; 0x5c
 80088f2:	460a      	mov	r2, r1
 80088f4:	701a      	strb	r2, [r3, #0]
		romMemUn.romMemStr.numberOfDays4[i] = ProgramForFun[i].numberOfDays4;
 80088f6:	4a24      	ldr	r2, [pc, #144]	; (8008988 <STORING_SaveSetting+0x234>)
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	2186      	movs	r1, #134	; 0x86
 80088fc:	fb01 f303 	mul.w	r3, r1, r3
 8008900:	4413      	add	r3, r2
 8008902:	3385      	adds	r3, #133	; 0x85
 8008904:	7819      	ldrb	r1, [r3, #0]
 8008906:	4a1c      	ldr	r2, [pc, #112]	; (8008978 <STORING_SaveSetting+0x224>)
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	4413      	add	r3, r2
 800890c:	3364      	adds	r3, #100	; 0x64
 800890e:	460a      	mov	r2, r1
 8008910:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 8; i++) { // данных о количестве дней и режимов
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	3301      	adds	r3, #1
 8008916:	60fb      	str	r3, [r7, #12]
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	2b07      	cmp	r3, #7
 800891c:	f77f af6c 	ble.w	80087f8 <STORING_SaveSetting+0xa4>
	}

	HAL_FLASH_Unlock();
 8008920:	f7f8 fa4a 	bl	8000db8 <HAL_FLASH_Unlock>

	uint32_t SectorError = 0; // FLASH
 8008924:	2300      	movs	r3, #0
 8008926:	603b      	str	r3, [r7, #0]
	HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError); // стираем страницу Flash начиначиная с адреса
 8008928:	463b      	mov	r3, r7
 800892a:	4619      	mov	r1, r3
 800892c:	4817      	ldr	r0, [pc, #92]	; (800898c <STORING_SaveSetting+0x238>)
 800892e:	f7f8 fb07 	bl	8000f40 <HAL_FLASHEx_Erase>

	uint32_t adress = EraseInitStruct.PageAddress; //адрес во Flash начала хранения
 8008932:	4b16      	ldr	r3, [pc, #88]	; (800898c <STORING_SaveSetting+0x238>)
 8008934:	685b      	ldr	r3, [r3, #4]
 8008936:	60bb      	str	r3, [r7, #8]
	uint8_t num = 0;
 8008938:	2300      	movs	r3, #0
 800893a:	71fb      	strb	r3, [r7, #7]

	while (num < ROM_MEM_ARR_SIZE) {
 800893c:	e010      	b.n	8008960 <STORING_SaveSetting+0x20c>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, adress,
				romMemUn.arrRomMem[num]);
 800893e:	79fb      	ldrb	r3, [r7, #7]
 8008940:	4a0d      	ldr	r2, [pc, #52]	; (8008978 <STORING_SaveSetting+0x224>)
 8008942:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, adress,
 8008946:	b29a      	uxth	r2, r3
 8008948:	f04f 0300 	mov.w	r3, #0
 800894c:	68b9      	ldr	r1, [r7, #8]
 800894e:	2001      	movs	r0, #1
 8008950:	f7f8 f9c2 	bl	8000cd8 <HAL_FLASH_Program>

		adress = adress + 2;//сдвигаем адрес на 2 байта, потому что программируем Flash полусловами по 16 bit
 8008954:	68bb      	ldr	r3, [r7, #8]
 8008956:	3302      	adds	r3, #2
 8008958:	60bb      	str	r3, [r7, #8]
		num++;
 800895a:	79fb      	ldrb	r3, [r7, #7]
 800895c:	3301      	adds	r3, #1
 800895e:	71fb      	strb	r3, [r7, #7]
	while (num < ROM_MEM_ARR_SIZE) {
 8008960:	79fb      	ldrb	r3, [r7, #7]
 8008962:	2b36      	cmp	r3, #54	; 0x36
 8008964:	d9eb      	bls.n	800893e <STORING_SaveSetting+0x1ea>
	}

	HAL_FLASH_Lock();
 8008966:	f7f8 fa4d 	bl	8000e04 <HAL_FLASH_Lock>

}
 800896a:	bf00      	nop
 800896c:	3710      	adds	r7, #16
 800896e:	46bd      	mov	sp, r7
 8008970:	bd80      	pop	{r7, pc}
 8008972:	bf00      	nop
 8008974:	20000e8c 	.word	0x20000e8c
 8008978:	20001944 	.word	0x20001944
 800897c:	20000ea4 	.word	0x20000ea4
 8008980:	200000b2 	.word	0x200000b2
 8008984:	20001300 	.word	0x20001300
 8008988:	20001310 	.word	0x20001310
 800898c:	20000010 	.word	0x20000010

08008990 <STORING_ReadSetting>:
//
//-------------------------------------------------------------
//
// 
void STORING_ReadSetting(void) {
 8008990:	b480      	push	{r7}
 8008992:	b083      	sub	sp, #12
 8008994:	af00      	add	r7, sp, #0
// заполняем  структуру в оперативке(через Union) из Flash
	uint32_t adressInFlash = EraseInitStruct.PageAddress; // адрес начала хранения во Flash
 8008996:	4b0e      	ldr	r3, [pc, #56]	; (80089d0 <STORING_ReadSetting+0x40>)
 8008998:	685b      	ldr	r3, [r3, #4]
 800899a:	607b      	str	r3, [r7, #4]
	uint8_t numberOfElement = 0;
 800899c:	2300      	movs	r3, #0
 800899e:	70fb      	strb	r3, [r7, #3]

	while (numberOfElement < ROM_MEM_ARR_SIZE) {
 80089a0:	e00b      	b.n	80089ba <STORING_ReadSetting+0x2a>

		romMemUn.arrRomMem[numberOfElement] = *(uint16_t*) (adressInFlash);
 80089a2:	687a      	ldr	r2, [r7, #4]
 80089a4:	78fb      	ldrb	r3, [r7, #3]
 80089a6:	8811      	ldrh	r1, [r2, #0]
 80089a8:	4a0a      	ldr	r2, [pc, #40]	; (80089d4 <STORING_ReadSetting+0x44>)
 80089aa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		numberOfElement++;
 80089ae:	78fb      	ldrb	r3, [r7, #3]
 80089b0:	3301      	adds	r3, #1
 80089b2:	70fb      	strb	r3, [r7, #3]
		adressInFlash = adressInFlash + 2; // //сдвигаем адрес на 2 байта, потому что программируем Flash полусловами по 16 bit	
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	3302      	adds	r3, #2
 80089b8:	607b      	str	r3, [r7, #4]
	while (numberOfElement < ROM_MEM_ARR_SIZE) {
 80089ba:	78fb      	ldrb	r3, [r7, #3]
 80089bc:	2b36      	cmp	r3, #54	; 0x36
 80089be:	d9f0      	bls.n	80089a2 <STORING_ReadSetting+0x12>
	}
}
 80089c0:	bf00      	nop
 80089c2:	bf00      	nop
 80089c4:	370c      	adds	r7, #12
 80089c6:	46bd      	mov	sp, r7
 80089c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089cc:	4770      	bx	lr
 80089ce:	bf00      	nop
 80089d0:	20000010 	.word	0x20000010
 80089d4:	20001944 	.word	0x20001944

080089d8 <MENU_Fill>:
static void MENU_FillSection(MenuItemStruct *section, uint8_t numItemInSection, char *sectionName);
//
//-------------------------------------------------------------
//
//
void MENU_Fill(void) {
 80089d8:	b580      	push	{r7, lr}
 80089da:	af00      	add	r7, sp, #0
	MENU_FillSection(mainMenu, MAIN_MENU_SIZE, "Main");
 80089dc:	4aa7      	ldr	r2, [pc, #668]	; (8008c7c <MENU_Fill+0x2a4>)
 80089de:	2109      	movs	r1, #9
 80089e0:	48a7      	ldr	r0, [pc, #668]	; (8008c80 <MENU_Fill+0x2a8>)
 80089e2:	f001 fa99 	bl	8009f18 <MENU_FillSection>

	mainMenu[0].name = "Fan 1";
 80089e6:	4ba6      	ldr	r3, [pc, #664]	; (8008c80 <MENU_Fill+0x2a8>)
 80089e8:	4aa6      	ldr	r2, [pc, #664]	; (8008c84 <MENU_Fill+0x2ac>)
 80089ea:	615a      	str	r2, [r3, #20]
	mainMenu[0].enter = &fan1Menu[0];
 80089ec:	4ba4      	ldr	r3, [pc, #656]	; (8008c80 <MENU_Fill+0x2a8>)
 80089ee:	4aa6      	ldr	r2, [pc, #664]	; (8008c88 <MENU_Fill+0x2b0>)
 80089f0:	625a      	str	r2, [r3, #36]	; 0x24
	mainMenu[0].function = DISPLAY_GoesToAndShowInfo;
 80089f2:	4ba3      	ldr	r3, [pc, #652]	; (8008c80 <MENU_Fill+0x2a8>)
 80089f4:	4aa5      	ldr	r2, [pc, #660]	; (8008c8c <MENU_Fill+0x2b4>)
 80089f6:	629a      	str	r2, [r3, #40]	; 0x28
	mainMenu[0].value3 = 1;
 80089f8:	4ba1      	ldr	r3, [pc, #644]	; (8008c80 <MENU_Fill+0x2a8>)
 80089fa:	2201      	movs	r2, #1
 80089fc:	745a      	strb	r2, [r3, #17]

	mainMenu[1].name = "Fan 2";
 80089fe:	4ba0      	ldr	r3, [pc, #640]	; (8008c80 <MENU_Fill+0x2a8>)
 8008a00:	4aa3      	ldr	r2, [pc, #652]	; (8008c90 <MENU_Fill+0x2b8>)
 8008a02:	641a      	str	r2, [r3, #64]	; 0x40
	mainMenu[1].enter = &fan2Menu[0];
 8008a04:	4b9e      	ldr	r3, [pc, #632]	; (8008c80 <MENU_Fill+0x2a8>)
 8008a06:	4aa3      	ldr	r2, [pc, #652]	; (8008c94 <MENU_Fill+0x2bc>)
 8008a08:	651a      	str	r2, [r3, #80]	; 0x50
	mainMenu[1].function = DISPLAY_GoesTo;
 8008a0a:	4b9d      	ldr	r3, [pc, #628]	; (8008c80 <MENU_Fill+0x2a8>)
 8008a0c:	4aa2      	ldr	r2, [pc, #648]	; (8008c98 <MENU_Fill+0x2c0>)
 8008a0e:	655a      	str	r2, [r3, #84]	; 0x54
	mainMenu[1].value3 = 2;
 8008a10:	4b9b      	ldr	r3, [pc, #620]	; (8008c80 <MENU_Fill+0x2a8>)
 8008a12:	2202      	movs	r2, #2
 8008a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	mainMenu[2].name = "Fan 3";
 8008a18:	4b99      	ldr	r3, [pc, #612]	; (8008c80 <MENU_Fill+0x2a8>)
 8008a1a:	4aa0      	ldr	r2, [pc, #640]	; (8008c9c <MENU_Fill+0x2c4>)
 8008a1c:	66da      	str	r2, [r3, #108]	; 0x6c
	mainMenu[2].enter = &fan3Menu[0];
 8008a1e:	4b98      	ldr	r3, [pc, #608]	; (8008c80 <MENU_Fill+0x2a8>)
 8008a20:	4a9f      	ldr	r2, [pc, #636]	; (8008ca0 <MENU_Fill+0x2c8>)
 8008a22:	67da      	str	r2, [r3, #124]	; 0x7c
	mainMenu[2].function = DISPLAY_GoesTo;
 8008a24:	4b96      	ldr	r3, [pc, #600]	; (8008c80 <MENU_Fill+0x2a8>)
 8008a26:	4a9c      	ldr	r2, [pc, #624]	; (8008c98 <MENU_Fill+0x2c0>)
 8008a28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	mainMenu[2].value3 = 3;
 8008a2c:	4b94      	ldr	r3, [pc, #592]	; (8008c80 <MENU_Fill+0x2a8>)
 8008a2e:	2203      	movs	r2, #3
 8008a30:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

	mainMenu[3].name = "Fan 4";
 8008a34:	4b92      	ldr	r3, [pc, #584]	; (8008c80 <MENU_Fill+0x2a8>)
 8008a36:	4a9b      	ldr	r2, [pc, #620]	; (8008ca4 <MENU_Fill+0x2cc>)
 8008a38:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	mainMenu[3].enter = &fan4Menu[0];
 8008a3c:	4b90      	ldr	r3, [pc, #576]	; (8008c80 <MENU_Fill+0x2a8>)
 8008a3e:	4a9a      	ldr	r2, [pc, #616]	; (8008ca8 <MENU_Fill+0x2d0>)
 8008a40:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	mainMenu[3].function = DISPLAY_GoesTo;
 8008a44:	4b8e      	ldr	r3, [pc, #568]	; (8008c80 <MENU_Fill+0x2a8>)
 8008a46:	4a94      	ldr	r2, [pc, #592]	; (8008c98 <MENU_Fill+0x2c0>)
 8008a48:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	mainMenu[3].value3 = 4;
 8008a4c:	4b8c      	ldr	r3, [pc, #560]	; (8008c80 <MENU_Fill+0x2a8>)
 8008a4e:	2204      	movs	r2, #4
 8008a50:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95

	mainMenu[4].name = "Fan 5";
 8008a54:	4b8a      	ldr	r3, [pc, #552]	; (8008c80 <MENU_Fill+0x2a8>)
 8008a56:	4a95      	ldr	r2, [pc, #596]	; (8008cac <MENU_Fill+0x2d4>)
 8008a58:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	mainMenu[4].enter = &fan5Menu[0];
 8008a5c:	4b88      	ldr	r3, [pc, #544]	; (8008c80 <MENU_Fill+0x2a8>)
 8008a5e:	4a94      	ldr	r2, [pc, #592]	; (8008cb0 <MENU_Fill+0x2d8>)
 8008a60:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	mainMenu[4].function = DISPLAY_GoesTo;
 8008a64:	4b86      	ldr	r3, [pc, #536]	; (8008c80 <MENU_Fill+0x2a8>)
 8008a66:	4a8c      	ldr	r2, [pc, #560]	; (8008c98 <MENU_Fill+0x2c0>)
 8008a68:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	mainMenu[4].value3 = 5;
 8008a6c:	4b84      	ldr	r3, [pc, #528]	; (8008c80 <MENU_Fill+0x2a8>)
 8008a6e:	2205      	movs	r2, #5
 8008a70:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

	mainMenu[5].name = "Fan 6";
 8008a74:	4b82      	ldr	r3, [pc, #520]	; (8008c80 <MENU_Fill+0x2a8>)
 8008a76:	4a8f      	ldr	r2, [pc, #572]	; (8008cb4 <MENU_Fill+0x2dc>)
 8008a78:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	mainMenu[5].enter = &fan6Menu[0];
 8008a7c:	4b80      	ldr	r3, [pc, #512]	; (8008c80 <MENU_Fill+0x2a8>)
 8008a7e:	4a8e      	ldr	r2, [pc, #568]	; (8008cb8 <MENU_Fill+0x2e0>)
 8008a80:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	mainMenu[5].function = DISPLAY_GoesTo;
 8008a84:	4b7e      	ldr	r3, [pc, #504]	; (8008c80 <MENU_Fill+0x2a8>)
 8008a86:	4a84      	ldr	r2, [pc, #528]	; (8008c98 <MENU_Fill+0x2c0>)
 8008a88:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	mainMenu[5].value3 = 6;
 8008a8c:	4b7c      	ldr	r3, [pc, #496]	; (8008c80 <MENU_Fill+0x2a8>)
 8008a8e:	2206      	movs	r2, #6
 8008a90:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed

	mainMenu[6].name = "Fan 7";
 8008a94:	4b7a      	ldr	r3, [pc, #488]	; (8008c80 <MENU_Fill+0x2a8>)
 8008a96:	4a89      	ldr	r2, [pc, #548]	; (8008cbc <MENU_Fill+0x2e4>)
 8008a98:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
	mainMenu[6].enter = &fan7Menu[0];
 8008a9c:	4b78      	ldr	r3, [pc, #480]	; (8008c80 <MENU_Fill+0x2a8>)
 8008a9e:	4a88      	ldr	r2, [pc, #544]	; (8008cc0 <MENU_Fill+0x2e8>)
 8008aa0:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
	mainMenu[6].function = DISPLAY_GoesTo;
 8008aa4:	4b76      	ldr	r3, [pc, #472]	; (8008c80 <MENU_Fill+0x2a8>)
 8008aa6:	4a7c      	ldr	r2, [pc, #496]	; (8008c98 <MENU_Fill+0x2c0>)
 8008aa8:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
	mainMenu[6].value3 = 7;
 8008aac:	4b74      	ldr	r3, [pc, #464]	; (8008c80 <MENU_Fill+0x2a8>)
 8008aae:	2207      	movs	r2, #7
 8008ab0:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119

	mainMenu[7].name = "Fan 8";
 8008ab4:	4b72      	ldr	r3, [pc, #456]	; (8008c80 <MENU_Fill+0x2a8>)
 8008ab6:	4a83      	ldr	r2, [pc, #524]	; (8008cc4 <MENU_Fill+0x2ec>)
 8008ab8:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
	mainMenu[7].enter = &fan8Menu[0];
 8008abc:	4b70      	ldr	r3, [pc, #448]	; (8008c80 <MENU_Fill+0x2a8>)
 8008abe:	4a82      	ldr	r2, [pc, #520]	; (8008cc8 <MENU_Fill+0x2f0>)
 8008ac0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
	mainMenu[7].function = DISPLAY_GoesTo;
 8008ac4:	4b6e      	ldr	r3, [pc, #440]	; (8008c80 <MENU_Fill+0x2a8>)
 8008ac6:	4a74      	ldr	r2, [pc, #464]	; (8008c98 <MENU_Fill+0x2c0>)
 8008ac8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
	mainMenu[7].value3 = 8;
 8008acc:	4b6c      	ldr	r3, [pc, #432]	; (8008c80 <MENU_Fill+0x2a8>)
 8008ace:	2208      	movs	r2, #8
 8008ad0:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145

	mainMenu[8].name = "Setting";
 8008ad4:	4b6a      	ldr	r3, [pc, #424]	; (8008c80 <MENU_Fill+0x2a8>)
 8008ad6:	4a7d      	ldr	r2, [pc, #500]	; (8008ccc <MENU_Fill+0x2f4>)
 8008ad8:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
	mainMenu[8].enter = &setting[0];
 8008adc:	4b68      	ldr	r3, [pc, #416]	; (8008c80 <MENU_Fill+0x2a8>)
 8008ade:	4a7c      	ldr	r2, [pc, #496]	; (8008cd0 <MENU_Fill+0x2f8>)
 8008ae0:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	mainMenu[8].function = DISPLAY_GoesTo;
 8008ae4:	4b66      	ldr	r3, [pc, #408]	; (8008c80 <MENU_Fill+0x2a8>)
 8008ae6:	4a6c      	ldr	r2, [pc, #432]	; (8008c98 <MENU_Fill+0x2c0>)
 8008ae8:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188

	//Fan1 menu
	MENU_FillSection(fan1Menu, FAN_MENU_SIZE, "Fan1  ModeN DaysC");
 8008aec:	4a79      	ldr	r2, [pc, #484]	; (8008cd4 <MENU_Fill+0x2fc>)
 8008aee:	2107      	movs	r1, #7
 8008af0:	4865      	ldr	r0, [pc, #404]	; (8008c88 <MENU_Fill+0x2b0>)
 8008af2:	f001 fa11 	bl	8009f18 <MENU_FillSection>

	fan1Menu[0].name = "Stage1";
 8008af6:	4b64      	ldr	r3, [pc, #400]	; (8008c88 <MENU_Fill+0x2b0>)
 8008af8:	4a77      	ldr	r2, [pc, #476]	; (8008cd8 <MENU_Fill+0x300>)
 8008afa:	615a      	str	r2, [r3, #20]
	fan1Menu[0].type = MENU_TYPE_TREE_COLUMN;
 8008afc:	4b62      	ldr	r3, [pc, #392]	; (8008c88 <MENU_Fill+0x2b0>)
 8008afe:	2202      	movs	r2, #2
 8008b00:	705a      	strb	r2, [r3, #1]
	fan1Menu[0].value = &ProgramForFun[0].modeNumber1;
 8008b02:	4b61      	ldr	r3, [pc, #388]	; (8008c88 <MENU_Fill+0x2b0>)
 8008b04:	4a75      	ldr	r2, [pc, #468]	; (8008cdc <MENU_Fill+0x304>)
 8008b06:	605a      	str	r2, [r3, #4]
	fan1Menu[0].maxVal = 3;
 8008b08:	4b5f      	ldr	r3, [pc, #380]	; (8008c88 <MENU_Fill+0x2b0>)
 8008b0a:	2203      	movs	r2, #3
 8008b0c:	721a      	strb	r2, [r3, #8]
	fan1Menu[0].value2 = &ProgramForFun[0].numberOfDays1;
 8008b0e:	4b5e      	ldr	r3, [pc, #376]	; (8008c88 <MENU_Fill+0x2b0>)
 8008b10:	4a73      	ldr	r2, [pc, #460]	; (8008ce0 <MENU_Fill+0x308>)
 8008b12:	60da      	str	r2, [r3, #12]
	fan1Menu[0].maxVal2 = 30;
 8008b14:	4b5c      	ldr	r3, [pc, #368]	; (8008c88 <MENU_Fill+0x2b0>)
 8008b16:	221e      	movs	r2, #30
 8008b18:	741a      	strb	r2, [r3, #16]
	fan1Menu[0].value3 = 1;
 8008b1a:	4b5b      	ldr	r3, [pc, #364]	; (8008c88 <MENU_Fill+0x2b0>)
 8008b1c:	2201      	movs	r2, #1
 8008b1e:	745a      	strb	r2, [r3, #17]

	fan1Menu[1].name = "Stage2";
 8008b20:	4b59      	ldr	r3, [pc, #356]	; (8008c88 <MENU_Fill+0x2b0>)
 8008b22:	4a70      	ldr	r2, [pc, #448]	; (8008ce4 <MENU_Fill+0x30c>)
 8008b24:	641a      	str	r2, [r3, #64]	; 0x40
	fan1Menu[1].type = MENU_TYPE_TREE_COLUMN;
 8008b26:	4b58      	ldr	r3, [pc, #352]	; (8008c88 <MENU_Fill+0x2b0>)
 8008b28:	2202      	movs	r2, #2
 8008b2a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	fan1Menu[1].value = &ProgramForFun[0].modeNumber2;
 8008b2e:	4b56      	ldr	r3, [pc, #344]	; (8008c88 <MENU_Fill+0x2b0>)
 8008b30:	4a6d      	ldr	r2, [pc, #436]	; (8008ce8 <MENU_Fill+0x310>)
 8008b32:	631a      	str	r2, [r3, #48]	; 0x30
	fan1Menu[1].maxVal = 3;
 8008b34:	4b54      	ldr	r3, [pc, #336]	; (8008c88 <MENU_Fill+0x2b0>)
 8008b36:	2203      	movs	r2, #3
 8008b38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	fan1Menu[1].value2 = &ProgramForFun[0].numberOfDays2;
 8008b3c:	4b52      	ldr	r3, [pc, #328]	; (8008c88 <MENU_Fill+0x2b0>)
 8008b3e:	4a6b      	ldr	r2, [pc, #428]	; (8008cec <MENU_Fill+0x314>)
 8008b40:	639a      	str	r2, [r3, #56]	; 0x38
	fan1Menu[1].maxVal2 = 30;
 8008b42:	4b51      	ldr	r3, [pc, #324]	; (8008c88 <MENU_Fill+0x2b0>)
 8008b44:	221e      	movs	r2, #30
 8008b46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	fan1Menu[1].value3 = 1;
 8008b4a:	4b4f      	ldr	r3, [pc, #316]	; (8008c88 <MENU_Fill+0x2b0>)
 8008b4c:	2201      	movs	r2, #1
 8008b4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	fan1Menu[2].name = "Stage3";
 8008b52:	4b4d      	ldr	r3, [pc, #308]	; (8008c88 <MENU_Fill+0x2b0>)
 8008b54:	4a66      	ldr	r2, [pc, #408]	; (8008cf0 <MENU_Fill+0x318>)
 8008b56:	66da      	str	r2, [r3, #108]	; 0x6c
	fan1Menu[2].type = MENU_TYPE_TREE_COLUMN;
 8008b58:	4b4b      	ldr	r3, [pc, #300]	; (8008c88 <MENU_Fill+0x2b0>)
 8008b5a:	2202      	movs	r2, #2
 8008b5c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	fan1Menu[2].value = &ProgramForFun[0].modeNumber3;
 8008b60:	4b49      	ldr	r3, [pc, #292]	; (8008c88 <MENU_Fill+0x2b0>)
 8008b62:	4a64      	ldr	r2, [pc, #400]	; (8008cf4 <MENU_Fill+0x31c>)
 8008b64:	65da      	str	r2, [r3, #92]	; 0x5c
	fan1Menu[2].maxVal = 3;
 8008b66:	4b48      	ldr	r3, [pc, #288]	; (8008c88 <MENU_Fill+0x2b0>)
 8008b68:	2203      	movs	r2, #3
 8008b6a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	fan1Menu[2].value2 = &ProgramForFun[0].numberOfDays3;
 8008b6e:	4b46      	ldr	r3, [pc, #280]	; (8008c88 <MENU_Fill+0x2b0>)
 8008b70:	4a61      	ldr	r2, [pc, #388]	; (8008cf8 <MENU_Fill+0x320>)
 8008b72:	665a      	str	r2, [r3, #100]	; 0x64
	fan1Menu[2].maxVal2 = 30;
 8008b74:	4b44      	ldr	r3, [pc, #272]	; (8008c88 <MENU_Fill+0x2b0>)
 8008b76:	221e      	movs	r2, #30
 8008b78:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	fan1Menu[2].value3 = 1;
 8008b7c:	4b42      	ldr	r3, [pc, #264]	; (8008c88 <MENU_Fill+0x2b0>)
 8008b7e:	2201      	movs	r2, #1
 8008b80:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

	fan1Menu[3].name = "Stage4";
 8008b84:	4b40      	ldr	r3, [pc, #256]	; (8008c88 <MENU_Fill+0x2b0>)
 8008b86:	4a5d      	ldr	r2, [pc, #372]	; (8008cfc <MENU_Fill+0x324>)
 8008b88:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	fan1Menu[3].type = MENU_TYPE_TREE_COLUMN;
 8008b8c:	4b3e      	ldr	r3, [pc, #248]	; (8008c88 <MENU_Fill+0x2b0>)
 8008b8e:	2202      	movs	r2, #2
 8008b90:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
	fan1Menu[3].value = &ProgramForFun[0].modeNumber4;
 8008b94:	4b3c      	ldr	r3, [pc, #240]	; (8008c88 <MENU_Fill+0x2b0>)
 8008b96:	4a5a      	ldr	r2, [pc, #360]	; (8008d00 <MENU_Fill+0x328>)
 8008b98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	fan1Menu[3].maxVal = 3;
 8008b9c:	4b3a      	ldr	r3, [pc, #232]	; (8008c88 <MENU_Fill+0x2b0>)
 8008b9e:	2203      	movs	r2, #3
 8008ba0:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
	fan1Menu[3].value2 = &ProgramForFun[0].numberOfDays4;
 8008ba4:	4b38      	ldr	r3, [pc, #224]	; (8008c88 <MENU_Fill+0x2b0>)
 8008ba6:	4a57      	ldr	r2, [pc, #348]	; (8008d04 <MENU_Fill+0x32c>)
 8008ba8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	fan1Menu[3].maxVal2 = 30;
 8008bac:	4b36      	ldr	r3, [pc, #216]	; (8008c88 <MENU_Fill+0x2b0>)
 8008bae:	221e      	movs	r2, #30
 8008bb0:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
	fan1Menu[3].value3 = 1;
 8008bb4:	4b34      	ldr	r3, [pc, #208]	; (8008c88 <MENU_Fill+0x2b0>)
 8008bb6:	2201      	movs	r2, #1
 8008bb8:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95

	fan1Menu[4].name = "Set start day";
 8008bbc:	4b32      	ldr	r3, [pc, #200]	; (8008c88 <MENU_Fill+0x2b0>)
 8008bbe:	4a52      	ldr	r2, [pc, #328]	; (8008d08 <MENU_Fill+0x330>)
 8008bc0:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	fan1Menu[4].maxVal = 0;  //maxVal - соответствует номеру вентилятора
 8008bc4:	4b30      	ldr	r3, [pc, #192]	; (8008c88 <MENU_Fill+0x2b0>)
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	fan1Menu[4].function = FANS_UpdateFirstDay;
 8008bcc:	4b2e      	ldr	r3, [pc, #184]	; (8008c88 <MENU_Fill+0x2b0>)
 8008bce:	4a4f      	ldr	r2, [pc, #316]	; (8008d0c <MENU_Fill+0x334>)
 8008bd0:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	fan1Menu[4].enter = &fan1Menu[4];
 8008bd4:	4b2c      	ldr	r3, [pc, #176]	; (8008c88 <MENU_Fill+0x2b0>)
 8008bd6:	4a4e      	ldr	r2, [pc, #312]	; (8008d10 <MENU_Fill+0x338>)
 8008bd8:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	fan1Menu[4].value3 = 1;
 8008bdc:	4b2a      	ldr	r3, [pc, #168]	; (8008c88 <MENU_Fill+0x2b0>)
 8008bde:	2201      	movs	r2, #1
 8008be0:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

	fan1Menu[5].name = "ON/OFF";
 8008be4:	4b28      	ldr	r3, [pc, #160]	; (8008c88 <MENU_Fill+0x2b0>)
 8008be6:	4a4b      	ldr	r2, [pc, #300]	; (8008d14 <MENU_Fill+0x33c>)
 8008be8:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	fan1Menu[5].enter = &fan1Menu[5];
 8008bec:	4b26      	ldr	r3, [pc, #152]	; (8008c88 <MENU_Fill+0x2b0>)
 8008bee:	4a4a      	ldr	r2, [pc, #296]	; (8008d18 <MENU_Fill+0x340>)
 8008bf0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	fan1Menu[5].function = FANS_Toggle;
 8008bf4:	4b24      	ldr	r3, [pc, #144]	; (8008c88 <MENU_Fill+0x2b0>)
 8008bf6:	4a49      	ldr	r2, [pc, #292]	; (8008d1c <MENU_Fill+0x344>)
 8008bf8:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	fan1Menu[5].value3 = 1;
 8008bfc:	4b22      	ldr	r3, [pc, #136]	; (8008c88 <MENU_Fill+0x2b0>)
 8008bfe:	2201      	movs	r2, #1
 8008c00:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed

	fan1Menu[6].name = "Save and Back";
 8008c04:	4b20      	ldr	r3, [pc, #128]	; (8008c88 <MENU_Fill+0x2b0>)
 8008c06:	4a46      	ldr	r2, [pc, #280]	; (8008d20 <MENU_Fill+0x348>)
 8008c08:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
	fan1Menu[6].function = FANS_FillProgram;
 8008c0c:	4b1e      	ldr	r3, [pc, #120]	; (8008c88 <MENU_Fill+0x2b0>)
 8008c0e:	4a45      	ldr	r2, [pc, #276]	; (8008d24 <MENU_Fill+0x34c>)
 8008c10:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
	fan1Menu[6].enter = &mainMenu[0];
 8008c14:	4b1c      	ldr	r3, [pc, #112]	; (8008c88 <MENU_Fill+0x2b0>)
 8008c16:	4a1a      	ldr	r2, [pc, #104]	; (8008c80 <MENU_Fill+0x2a8>)
 8008c18:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
	fan1Menu[6].value3 = 1;
 8008c1c:	4b1a      	ldr	r3, [pc, #104]	; (8008c88 <MENU_Fill+0x2b0>)
 8008c1e:	2201      	movs	r2, #1
 8008c20:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119

	//Fan2 menu
	MENU_FillSection(fan2Menu, FAN_MENU_SIZE, "Fan2  ModeN DaysC");
 8008c24:	4a40      	ldr	r2, [pc, #256]	; (8008d28 <MENU_Fill+0x350>)
 8008c26:	2107      	movs	r1, #7
 8008c28:	481a      	ldr	r0, [pc, #104]	; (8008c94 <MENU_Fill+0x2bc>)
 8008c2a:	f001 f975 	bl	8009f18 <MENU_FillSection>

	fan2Menu[0].name = "Stage1";
 8008c2e:	4b19      	ldr	r3, [pc, #100]	; (8008c94 <MENU_Fill+0x2bc>)
 8008c30:	4a29      	ldr	r2, [pc, #164]	; (8008cd8 <MENU_Fill+0x300>)
 8008c32:	615a      	str	r2, [r3, #20]
	fan2Menu[0].type = MENU_TYPE_TREE_COLUMN;
 8008c34:	4b17      	ldr	r3, [pc, #92]	; (8008c94 <MENU_Fill+0x2bc>)
 8008c36:	2202      	movs	r2, #2
 8008c38:	705a      	strb	r2, [r3, #1]
	fan2Menu[0].value = &ProgramForFun[1].modeNumber1;
 8008c3a:	4b16      	ldr	r3, [pc, #88]	; (8008c94 <MENU_Fill+0x2bc>)
 8008c3c:	4a3b      	ldr	r2, [pc, #236]	; (8008d2c <MENU_Fill+0x354>)
 8008c3e:	605a      	str	r2, [r3, #4]
	fan2Menu[0].maxVal = 3;
 8008c40:	4b14      	ldr	r3, [pc, #80]	; (8008c94 <MENU_Fill+0x2bc>)
 8008c42:	2203      	movs	r2, #3
 8008c44:	721a      	strb	r2, [r3, #8]
	fan2Menu[0].value2 = &ProgramForFun[1].numberOfDays1;
 8008c46:	4b13      	ldr	r3, [pc, #76]	; (8008c94 <MENU_Fill+0x2bc>)
 8008c48:	4a39      	ldr	r2, [pc, #228]	; (8008d30 <MENU_Fill+0x358>)
 8008c4a:	60da      	str	r2, [r3, #12]
	fan2Menu[0].maxVal2 = 30;
 8008c4c:	4b11      	ldr	r3, [pc, #68]	; (8008c94 <MENU_Fill+0x2bc>)
 8008c4e:	221e      	movs	r2, #30
 8008c50:	741a      	strb	r2, [r3, #16]
	fan2Menu[0].value3 = 2;
 8008c52:	4b10      	ldr	r3, [pc, #64]	; (8008c94 <MENU_Fill+0x2bc>)
 8008c54:	2202      	movs	r2, #2
 8008c56:	745a      	strb	r2, [r3, #17]

	fan2Menu[1].name = "Stage2";
 8008c58:	4b0e      	ldr	r3, [pc, #56]	; (8008c94 <MENU_Fill+0x2bc>)
 8008c5a:	4a22      	ldr	r2, [pc, #136]	; (8008ce4 <MENU_Fill+0x30c>)
 8008c5c:	641a      	str	r2, [r3, #64]	; 0x40
	fan2Menu[1].type = MENU_TYPE_TREE_COLUMN;
 8008c5e:	4b0d      	ldr	r3, [pc, #52]	; (8008c94 <MENU_Fill+0x2bc>)
 8008c60:	2202      	movs	r2, #2
 8008c62:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	fan2Menu[1].value = &ProgramForFun[1].modeNumber2;
 8008c66:	4b0b      	ldr	r3, [pc, #44]	; (8008c94 <MENU_Fill+0x2bc>)
 8008c68:	4a32      	ldr	r2, [pc, #200]	; (8008d34 <MENU_Fill+0x35c>)
 8008c6a:	631a      	str	r2, [r3, #48]	; 0x30
	fan2Menu[1].maxVal = 3;
 8008c6c:	4b09      	ldr	r3, [pc, #36]	; (8008c94 <MENU_Fill+0x2bc>)
 8008c6e:	2203      	movs	r2, #3
 8008c70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	fan2Menu[1].value2 = &ProgramForFun[1].numberOfDays2;
 8008c74:	4b07      	ldr	r3, [pc, #28]	; (8008c94 <MENU_Fill+0x2bc>)
 8008c76:	4a30      	ldr	r2, [pc, #192]	; (8008d38 <MENU_Fill+0x360>)
 8008c78:	639a      	str	r2, [r3, #56]	; 0x38
 8008c7a:	e05f      	b.n	8008d3c <MENU_Fill+0x364>
 8008c7c:	0800ad8c 	.word	0x0800ad8c
 8008c80:	20002354 	.word	0x20002354
 8008c84:	0800ad94 	.word	0x0800ad94
 8008c88:	20002640 	.word	0x20002640
 8008c8c:	080008dd 	.word	0x080008dd
 8008c90:	0800ad9c 	.word	0x0800ad9c
 8008c94:	20002d20 	.word	0x20002d20
 8008c98:	080008c7 	.word	0x080008c7
 8008c9c:	0800ada4 	.word	0x0800ada4
 8008ca0:	2000219c 	.word	0x2000219c
 8008ca4:	0800adac 	.word	0x0800adac
 8008ca8:	20001d50 	.word	0x20001d50
 8008cac:	0800adb4 	.word	0x0800adb4
 8008cb0:	20002b10 	.word	0x20002b10
 8008cb4:	0800adbc 	.word	0x0800adbc
 8008cb8:	20001f08 	.word	0x20001f08
 8008cbc:	0800adc4 	.word	0x0800adc4
 8008cc0:	20001b6c 	.word	0x20001b6c
 8008cc4:	0800adcc 	.word	0x0800adcc
 8008cc8:	20002774 	.word	0x20002774
 8008ccc:	0800add4 	.word	0x0800add4
 8008cd0:	200024e0 	.word	0x200024e0
 8008cd4:	0800addc 	.word	0x0800addc
 8008cd8:	0800adf0 	.word	0x0800adf0
 8008cdc:	2000138e 	.word	0x2000138e
 8008ce0:	2000138f 	.word	0x2000138f
 8008ce4:	0800adf8 	.word	0x0800adf8
 8008ce8:	20001390 	.word	0x20001390
 8008cec:	20001391 	.word	0x20001391
 8008cf0:	0800ae00 	.word	0x0800ae00
 8008cf4:	20001392 	.word	0x20001392
 8008cf8:	20001393 	.word	0x20001393
 8008cfc:	0800ae08 	.word	0x0800ae08
 8008d00:	20001394 	.word	0x20001394
 8008d04:	20001395 	.word	0x20001395
 8008d08:	0800ae10 	.word	0x0800ae10
 8008d0c:	080051b9 	.word	0x080051b9
 8008d10:	200026f0 	.word	0x200026f0
 8008d14:	0800ae20 	.word	0x0800ae20
 8008d18:	2000271c 	.word	0x2000271c
 8008d1c:	08005169 	.word	0x08005169
 8008d20:	0800ae28 	.word	0x0800ae28
 8008d24:	08005229 	.word	0x08005229
 8008d28:	0800ae38 	.word	0x0800ae38
 8008d2c:	20001414 	.word	0x20001414
 8008d30:	20001415 	.word	0x20001415
 8008d34:	20001416 	.word	0x20001416
 8008d38:	20001417 	.word	0x20001417
	fan2Menu[1].maxVal2 = 30;
 8008d3c:	4bac      	ldr	r3, [pc, #688]	; (8008ff0 <MENU_Fill+0x618>)
 8008d3e:	221e      	movs	r2, #30
 8008d40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	fan2Menu[1].value3 = 2;
 8008d44:	4baa      	ldr	r3, [pc, #680]	; (8008ff0 <MENU_Fill+0x618>)
 8008d46:	2202      	movs	r2, #2
 8008d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	fan2Menu[2].name = "Stage3";
 8008d4c:	4ba8      	ldr	r3, [pc, #672]	; (8008ff0 <MENU_Fill+0x618>)
 8008d4e:	4aa9      	ldr	r2, [pc, #676]	; (8008ff4 <MENU_Fill+0x61c>)
 8008d50:	66da      	str	r2, [r3, #108]	; 0x6c
	fan2Menu[2].type = MENU_TYPE_TREE_COLUMN;
 8008d52:	4ba7      	ldr	r3, [pc, #668]	; (8008ff0 <MENU_Fill+0x618>)
 8008d54:	2202      	movs	r2, #2
 8008d56:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	fan2Menu[2].value = &ProgramForFun[1].modeNumber3;
 8008d5a:	4ba5      	ldr	r3, [pc, #660]	; (8008ff0 <MENU_Fill+0x618>)
 8008d5c:	4aa6      	ldr	r2, [pc, #664]	; (8008ff8 <MENU_Fill+0x620>)
 8008d5e:	65da      	str	r2, [r3, #92]	; 0x5c
	fan2Menu[2].maxVal = 3;
 8008d60:	4ba3      	ldr	r3, [pc, #652]	; (8008ff0 <MENU_Fill+0x618>)
 8008d62:	2203      	movs	r2, #3
 8008d64:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	fan2Menu[2].value2 = &ProgramForFun[1].numberOfDays3;
 8008d68:	4ba1      	ldr	r3, [pc, #644]	; (8008ff0 <MENU_Fill+0x618>)
 8008d6a:	4aa4      	ldr	r2, [pc, #656]	; (8008ffc <MENU_Fill+0x624>)
 8008d6c:	665a      	str	r2, [r3, #100]	; 0x64
	fan2Menu[2].maxVal2 = 30;
 8008d6e:	4ba0      	ldr	r3, [pc, #640]	; (8008ff0 <MENU_Fill+0x618>)
 8008d70:	221e      	movs	r2, #30
 8008d72:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	fan2Menu[2].value3 = 2;
 8008d76:	4b9e      	ldr	r3, [pc, #632]	; (8008ff0 <MENU_Fill+0x618>)
 8008d78:	2202      	movs	r2, #2
 8008d7a:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

	fan2Menu[3].name = "Stage4";
 8008d7e:	4b9c      	ldr	r3, [pc, #624]	; (8008ff0 <MENU_Fill+0x618>)
 8008d80:	4a9f      	ldr	r2, [pc, #636]	; (8009000 <MENU_Fill+0x628>)
 8008d82:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	fan2Menu[3].type = MENU_TYPE_TREE_COLUMN;
 8008d86:	4b9a      	ldr	r3, [pc, #616]	; (8008ff0 <MENU_Fill+0x618>)
 8008d88:	2202      	movs	r2, #2
 8008d8a:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
	fan2Menu[3].value = &ProgramForFun[1].modeNumber4;
 8008d8e:	4b98      	ldr	r3, [pc, #608]	; (8008ff0 <MENU_Fill+0x618>)
 8008d90:	4a9c      	ldr	r2, [pc, #624]	; (8009004 <MENU_Fill+0x62c>)
 8008d92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	fan2Menu[3].maxVal = 3;
 8008d96:	4b96      	ldr	r3, [pc, #600]	; (8008ff0 <MENU_Fill+0x618>)
 8008d98:	2203      	movs	r2, #3
 8008d9a:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
	fan2Menu[3].value2 = &ProgramForFun[1].numberOfDays4;
 8008d9e:	4b94      	ldr	r3, [pc, #592]	; (8008ff0 <MENU_Fill+0x618>)
 8008da0:	4a99      	ldr	r2, [pc, #612]	; (8009008 <MENU_Fill+0x630>)
 8008da2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	fan2Menu[3].maxVal2 = 30;
 8008da6:	4b92      	ldr	r3, [pc, #584]	; (8008ff0 <MENU_Fill+0x618>)
 8008da8:	221e      	movs	r2, #30
 8008daa:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
	fan2Menu[3].value3 = 2;
 8008dae:	4b90      	ldr	r3, [pc, #576]	; (8008ff0 <MENU_Fill+0x618>)
 8008db0:	2202      	movs	r2, #2
 8008db2:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95

	fan2Menu[4].name = "Set start day";
 8008db6:	4b8e      	ldr	r3, [pc, #568]	; (8008ff0 <MENU_Fill+0x618>)
 8008db8:	4a94      	ldr	r2, [pc, #592]	; (800900c <MENU_Fill+0x634>)
 8008dba:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	fan2Menu[4].maxVal = 1;  //maxVal - соответствует номеру вентилятора
 8008dbe:	4b8c      	ldr	r3, [pc, #560]	; (8008ff0 <MENU_Fill+0x618>)
 8008dc0:	2201      	movs	r2, #1
 8008dc2:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	fan2Menu[4].function = FANS_UpdateFirstDay;
 8008dc6:	4b8a      	ldr	r3, [pc, #552]	; (8008ff0 <MENU_Fill+0x618>)
 8008dc8:	4a91      	ldr	r2, [pc, #580]	; (8009010 <MENU_Fill+0x638>)
 8008dca:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	fan2Menu[4].enter = &fan2Menu[4];
 8008dce:	4b88      	ldr	r3, [pc, #544]	; (8008ff0 <MENU_Fill+0x618>)
 8008dd0:	4a90      	ldr	r2, [pc, #576]	; (8009014 <MENU_Fill+0x63c>)
 8008dd2:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	fan2Menu[4].value3 = 2;
 8008dd6:	4b86      	ldr	r3, [pc, #536]	; (8008ff0 <MENU_Fill+0x618>)
 8008dd8:	2202      	movs	r2, #2
 8008dda:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

	fan2Menu[5].name = "ON/OFF";
 8008dde:	4b84      	ldr	r3, [pc, #528]	; (8008ff0 <MENU_Fill+0x618>)
 8008de0:	4a8d      	ldr	r2, [pc, #564]	; (8009018 <MENU_Fill+0x640>)
 8008de2:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	fan2Menu[5].function = FANS_Toggle;
 8008de6:	4b82      	ldr	r3, [pc, #520]	; (8008ff0 <MENU_Fill+0x618>)
 8008de8:	4a8c      	ldr	r2, [pc, #560]	; (800901c <MENU_Fill+0x644>)
 8008dea:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	fan2Menu[5].enter = &fan2Menu[5];
 8008dee:	4b80      	ldr	r3, [pc, #512]	; (8008ff0 <MENU_Fill+0x618>)
 8008df0:	4a8b      	ldr	r2, [pc, #556]	; (8009020 <MENU_Fill+0x648>)
 8008df2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	fan2Menu[5].value3 = 2;
 8008df6:	4b7e      	ldr	r3, [pc, #504]	; (8008ff0 <MENU_Fill+0x618>)
 8008df8:	2202      	movs	r2, #2
 8008dfa:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed

	fan2Menu[6].name = "Save and Back";
 8008dfe:	4b7c      	ldr	r3, [pc, #496]	; (8008ff0 <MENU_Fill+0x618>)
 8008e00:	4a88      	ldr	r2, [pc, #544]	; (8009024 <MENU_Fill+0x64c>)
 8008e02:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
	fan2Menu[6].function = FANS_FillProgram;
 8008e06:	4b7a      	ldr	r3, [pc, #488]	; (8008ff0 <MENU_Fill+0x618>)
 8008e08:	4a87      	ldr	r2, [pc, #540]	; (8009028 <MENU_Fill+0x650>)
 8008e0a:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
	fan2Menu[6].enter = &mainMenu[1];
 8008e0e:	4b78      	ldr	r3, [pc, #480]	; (8008ff0 <MENU_Fill+0x618>)
 8008e10:	4a86      	ldr	r2, [pc, #536]	; (800902c <MENU_Fill+0x654>)
 8008e12:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
	fan2Menu[6].value3 = 2;
 8008e16:	4b76      	ldr	r3, [pc, #472]	; (8008ff0 <MENU_Fill+0x618>)
 8008e18:	2202      	movs	r2, #2
 8008e1a:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119

	//fan3 menu
	MENU_FillSection(fan3Menu, FAN_MENU_SIZE, "Fan3  ModeN DaysC");
 8008e1e:	4a84      	ldr	r2, [pc, #528]	; (8009030 <MENU_Fill+0x658>)
 8008e20:	2107      	movs	r1, #7
 8008e22:	4884      	ldr	r0, [pc, #528]	; (8009034 <MENU_Fill+0x65c>)
 8008e24:	f001 f878 	bl	8009f18 <MENU_FillSection>

	fan3Menu[0].name = "Stage1";
 8008e28:	4b82      	ldr	r3, [pc, #520]	; (8009034 <MENU_Fill+0x65c>)
 8008e2a:	4a83      	ldr	r2, [pc, #524]	; (8009038 <MENU_Fill+0x660>)
 8008e2c:	615a      	str	r2, [r3, #20]
	fan3Menu[0].type = MENU_TYPE_TREE_COLUMN;
 8008e2e:	4b81      	ldr	r3, [pc, #516]	; (8009034 <MENU_Fill+0x65c>)
 8008e30:	2202      	movs	r2, #2
 8008e32:	705a      	strb	r2, [r3, #1]
	fan3Menu[0].value = &ProgramForFun[2].modeNumber1;
 8008e34:	4b7f      	ldr	r3, [pc, #508]	; (8009034 <MENU_Fill+0x65c>)
 8008e36:	4a81      	ldr	r2, [pc, #516]	; (800903c <MENU_Fill+0x664>)
 8008e38:	605a      	str	r2, [r3, #4]
	fan3Menu[0].maxVal = 3;
 8008e3a:	4b7e      	ldr	r3, [pc, #504]	; (8009034 <MENU_Fill+0x65c>)
 8008e3c:	2203      	movs	r2, #3
 8008e3e:	721a      	strb	r2, [r3, #8]
	fan3Menu[0].value2 = &ProgramForFun[2].numberOfDays1;
 8008e40:	4b7c      	ldr	r3, [pc, #496]	; (8009034 <MENU_Fill+0x65c>)
 8008e42:	4a7f      	ldr	r2, [pc, #508]	; (8009040 <MENU_Fill+0x668>)
 8008e44:	60da      	str	r2, [r3, #12]
	fan3Menu[0].maxVal2 = 30;
 8008e46:	4b7b      	ldr	r3, [pc, #492]	; (8009034 <MENU_Fill+0x65c>)
 8008e48:	221e      	movs	r2, #30
 8008e4a:	741a      	strb	r2, [r3, #16]
	fan3Menu[0].value3 = 3;
 8008e4c:	4b79      	ldr	r3, [pc, #484]	; (8009034 <MENU_Fill+0x65c>)
 8008e4e:	2203      	movs	r2, #3
 8008e50:	745a      	strb	r2, [r3, #17]

	fan3Menu[1].name = "Stage2";
 8008e52:	4b78      	ldr	r3, [pc, #480]	; (8009034 <MENU_Fill+0x65c>)
 8008e54:	4a7b      	ldr	r2, [pc, #492]	; (8009044 <MENU_Fill+0x66c>)
 8008e56:	641a      	str	r2, [r3, #64]	; 0x40
	fan3Menu[1].type = MENU_TYPE_TREE_COLUMN;
 8008e58:	4b76      	ldr	r3, [pc, #472]	; (8009034 <MENU_Fill+0x65c>)
 8008e5a:	2202      	movs	r2, #2
 8008e5c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	fan3Menu[1].value = &ProgramForFun[2].modeNumber2;
 8008e60:	4b74      	ldr	r3, [pc, #464]	; (8009034 <MENU_Fill+0x65c>)
 8008e62:	4a79      	ldr	r2, [pc, #484]	; (8009048 <MENU_Fill+0x670>)
 8008e64:	631a      	str	r2, [r3, #48]	; 0x30
	fan3Menu[1].maxVal = 3;
 8008e66:	4b73      	ldr	r3, [pc, #460]	; (8009034 <MENU_Fill+0x65c>)
 8008e68:	2203      	movs	r2, #3
 8008e6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	fan3Menu[1].value2 = &ProgramForFun[2].numberOfDays2;
 8008e6e:	4b71      	ldr	r3, [pc, #452]	; (8009034 <MENU_Fill+0x65c>)
 8008e70:	4a76      	ldr	r2, [pc, #472]	; (800904c <MENU_Fill+0x674>)
 8008e72:	639a      	str	r2, [r3, #56]	; 0x38
	fan3Menu[1].maxVal2 = 30;
 8008e74:	4b6f      	ldr	r3, [pc, #444]	; (8009034 <MENU_Fill+0x65c>)
 8008e76:	221e      	movs	r2, #30
 8008e78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	fan3Menu[1].value3 = 3;
 8008e7c:	4b6d      	ldr	r3, [pc, #436]	; (8009034 <MENU_Fill+0x65c>)
 8008e7e:	2203      	movs	r2, #3
 8008e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	fan3Menu[2].name = "Stage3";
 8008e84:	4b6b      	ldr	r3, [pc, #428]	; (8009034 <MENU_Fill+0x65c>)
 8008e86:	4a5b      	ldr	r2, [pc, #364]	; (8008ff4 <MENU_Fill+0x61c>)
 8008e88:	66da      	str	r2, [r3, #108]	; 0x6c
	fan3Menu[2].type = MENU_TYPE_TREE_COLUMN;
 8008e8a:	4b6a      	ldr	r3, [pc, #424]	; (8009034 <MENU_Fill+0x65c>)
 8008e8c:	2202      	movs	r2, #2
 8008e8e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	fan3Menu[2].value = &ProgramForFun[2].modeNumber3;
 8008e92:	4b68      	ldr	r3, [pc, #416]	; (8009034 <MENU_Fill+0x65c>)
 8008e94:	4a6e      	ldr	r2, [pc, #440]	; (8009050 <MENU_Fill+0x678>)
 8008e96:	65da      	str	r2, [r3, #92]	; 0x5c
	fan3Menu[2].maxVal = 3;
 8008e98:	4b66      	ldr	r3, [pc, #408]	; (8009034 <MENU_Fill+0x65c>)
 8008e9a:	2203      	movs	r2, #3
 8008e9c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	fan3Menu[2].value2 = &ProgramForFun[2].numberOfDays3;
 8008ea0:	4b64      	ldr	r3, [pc, #400]	; (8009034 <MENU_Fill+0x65c>)
 8008ea2:	4a6c      	ldr	r2, [pc, #432]	; (8009054 <MENU_Fill+0x67c>)
 8008ea4:	665a      	str	r2, [r3, #100]	; 0x64
	fan3Menu[2].maxVal2 = 30;
 8008ea6:	4b63      	ldr	r3, [pc, #396]	; (8009034 <MENU_Fill+0x65c>)
 8008ea8:	221e      	movs	r2, #30
 8008eaa:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	fan3Menu[2].value3 = 3;
 8008eae:	4b61      	ldr	r3, [pc, #388]	; (8009034 <MENU_Fill+0x65c>)
 8008eb0:	2203      	movs	r2, #3
 8008eb2:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

	fan3Menu[3].name = "Stage4";
 8008eb6:	4b5f      	ldr	r3, [pc, #380]	; (8009034 <MENU_Fill+0x65c>)
 8008eb8:	4a51      	ldr	r2, [pc, #324]	; (8009000 <MENU_Fill+0x628>)
 8008eba:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	fan3Menu[3].type = MENU_TYPE_TREE_COLUMN;
 8008ebe:	4b5d      	ldr	r3, [pc, #372]	; (8009034 <MENU_Fill+0x65c>)
 8008ec0:	2202      	movs	r2, #2
 8008ec2:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
	fan3Menu[3].value = &ProgramForFun[2].modeNumber4;
 8008ec6:	4b5b      	ldr	r3, [pc, #364]	; (8009034 <MENU_Fill+0x65c>)
 8008ec8:	4a63      	ldr	r2, [pc, #396]	; (8009058 <MENU_Fill+0x680>)
 8008eca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	fan3Menu[3].maxVal = 3;
 8008ece:	4b59      	ldr	r3, [pc, #356]	; (8009034 <MENU_Fill+0x65c>)
 8008ed0:	2203      	movs	r2, #3
 8008ed2:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
	fan3Menu[3].value2 = &ProgramForFun[2].numberOfDays4;
 8008ed6:	4b57      	ldr	r3, [pc, #348]	; (8009034 <MENU_Fill+0x65c>)
 8008ed8:	4a60      	ldr	r2, [pc, #384]	; (800905c <MENU_Fill+0x684>)
 8008eda:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	fan3Menu[3].maxVal2 = 30;
 8008ede:	4b55      	ldr	r3, [pc, #340]	; (8009034 <MENU_Fill+0x65c>)
 8008ee0:	221e      	movs	r2, #30
 8008ee2:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
	fan3Menu[3].value3 = 3;
 8008ee6:	4b53      	ldr	r3, [pc, #332]	; (8009034 <MENU_Fill+0x65c>)
 8008ee8:	2203      	movs	r2, #3
 8008eea:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95

	fan3Menu[4].name = "Set start day";
 8008eee:	4b51      	ldr	r3, [pc, #324]	; (8009034 <MENU_Fill+0x65c>)
 8008ef0:	4a46      	ldr	r2, [pc, #280]	; (800900c <MENU_Fill+0x634>)
 8008ef2:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	fan3Menu[4].maxVal = 2;  //maxVal - соответствует номеру вентилятора
 8008ef6:	4b4f      	ldr	r3, [pc, #316]	; (8009034 <MENU_Fill+0x65c>)
 8008ef8:	2202      	movs	r2, #2
 8008efa:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	fan3Menu[4].function = FANS_UpdateFirstDay;
 8008efe:	4b4d      	ldr	r3, [pc, #308]	; (8009034 <MENU_Fill+0x65c>)
 8008f00:	4a43      	ldr	r2, [pc, #268]	; (8009010 <MENU_Fill+0x638>)
 8008f02:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	fan3Menu[4].enter = &fan3Menu[4];
 8008f06:	4b4b      	ldr	r3, [pc, #300]	; (8009034 <MENU_Fill+0x65c>)
 8008f08:	4a55      	ldr	r2, [pc, #340]	; (8009060 <MENU_Fill+0x688>)
 8008f0a:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	fan3Menu[4].value3 = 3;
 8008f0e:	4b49      	ldr	r3, [pc, #292]	; (8009034 <MENU_Fill+0x65c>)
 8008f10:	2203      	movs	r2, #3
 8008f12:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

	fan3Menu[5].name = "ON/OFF";
 8008f16:	4b47      	ldr	r3, [pc, #284]	; (8009034 <MENU_Fill+0x65c>)
 8008f18:	4a3f      	ldr	r2, [pc, #252]	; (8009018 <MENU_Fill+0x640>)
 8008f1a:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	fan3Menu[5].function = FANS_Toggle;
 8008f1e:	4b45      	ldr	r3, [pc, #276]	; (8009034 <MENU_Fill+0x65c>)
 8008f20:	4a3e      	ldr	r2, [pc, #248]	; (800901c <MENU_Fill+0x644>)
 8008f22:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	fan3Menu[5].enter = &fan3Menu[5];
 8008f26:	4b43      	ldr	r3, [pc, #268]	; (8009034 <MENU_Fill+0x65c>)
 8008f28:	4a4e      	ldr	r2, [pc, #312]	; (8009064 <MENU_Fill+0x68c>)
 8008f2a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	fan3Menu[5].value3 = 3;
 8008f2e:	4b41      	ldr	r3, [pc, #260]	; (8009034 <MENU_Fill+0x65c>)
 8008f30:	2203      	movs	r2, #3
 8008f32:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed

	fan3Menu[6].name = "Save and Back";
 8008f36:	4b3f      	ldr	r3, [pc, #252]	; (8009034 <MENU_Fill+0x65c>)
 8008f38:	4a3a      	ldr	r2, [pc, #232]	; (8009024 <MENU_Fill+0x64c>)
 8008f3a:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
	fan3Menu[6].function = FANS_FillProgram;
 8008f3e:	4b3d      	ldr	r3, [pc, #244]	; (8009034 <MENU_Fill+0x65c>)
 8008f40:	4a39      	ldr	r2, [pc, #228]	; (8009028 <MENU_Fill+0x650>)
 8008f42:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
	fan3Menu[6].enter = &mainMenu[2];
 8008f46:	4b3b      	ldr	r3, [pc, #236]	; (8009034 <MENU_Fill+0x65c>)
 8008f48:	4a47      	ldr	r2, [pc, #284]	; (8009068 <MENU_Fill+0x690>)
 8008f4a:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
	fan3Menu[6].value3 = 3;
 8008f4e:	4b39      	ldr	r3, [pc, #228]	; (8009034 <MENU_Fill+0x65c>)
 8008f50:	2203      	movs	r2, #3
 8008f52:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119

	//fan4 menu
	MENU_FillSection(fan4Menu, FAN_MENU_SIZE, "Fan4  ModeN DaysC");
 8008f56:	4a45      	ldr	r2, [pc, #276]	; (800906c <MENU_Fill+0x694>)
 8008f58:	2107      	movs	r1, #7
 8008f5a:	4845      	ldr	r0, [pc, #276]	; (8009070 <MENU_Fill+0x698>)
 8008f5c:	f000 ffdc 	bl	8009f18 <MENU_FillSection>

	fan4Menu[0].name = "Stage1";
 8008f60:	4b43      	ldr	r3, [pc, #268]	; (8009070 <MENU_Fill+0x698>)
 8008f62:	4a35      	ldr	r2, [pc, #212]	; (8009038 <MENU_Fill+0x660>)
 8008f64:	615a      	str	r2, [r3, #20]
	fan4Menu[0].type = MENU_TYPE_TREE_COLUMN;
 8008f66:	4b42      	ldr	r3, [pc, #264]	; (8009070 <MENU_Fill+0x698>)
 8008f68:	2202      	movs	r2, #2
 8008f6a:	705a      	strb	r2, [r3, #1]
	fan4Menu[0].value = &ProgramForFun[3].modeNumber1;
 8008f6c:	4b40      	ldr	r3, [pc, #256]	; (8009070 <MENU_Fill+0x698>)
 8008f6e:	4a41      	ldr	r2, [pc, #260]	; (8009074 <MENU_Fill+0x69c>)
 8008f70:	605a      	str	r2, [r3, #4]
	fan4Menu[0].maxVal = 3;
 8008f72:	4b3f      	ldr	r3, [pc, #252]	; (8009070 <MENU_Fill+0x698>)
 8008f74:	2203      	movs	r2, #3
 8008f76:	721a      	strb	r2, [r3, #8]
	fan4Menu[0].value2 = &ProgramForFun[3].numberOfDays1;
 8008f78:	4b3d      	ldr	r3, [pc, #244]	; (8009070 <MENU_Fill+0x698>)
 8008f7a:	4a3f      	ldr	r2, [pc, #252]	; (8009078 <MENU_Fill+0x6a0>)
 8008f7c:	60da      	str	r2, [r3, #12]
	fan4Menu[0].maxVal2 = 30;
 8008f7e:	4b3c      	ldr	r3, [pc, #240]	; (8009070 <MENU_Fill+0x698>)
 8008f80:	221e      	movs	r2, #30
 8008f82:	741a      	strb	r2, [r3, #16]
	fan4Menu[0].value3 = 4;
 8008f84:	4b3a      	ldr	r3, [pc, #232]	; (8009070 <MENU_Fill+0x698>)
 8008f86:	2204      	movs	r2, #4
 8008f88:	745a      	strb	r2, [r3, #17]

	fan4Menu[1].name = "Stage2";
 8008f8a:	4b39      	ldr	r3, [pc, #228]	; (8009070 <MENU_Fill+0x698>)
 8008f8c:	4a2d      	ldr	r2, [pc, #180]	; (8009044 <MENU_Fill+0x66c>)
 8008f8e:	641a      	str	r2, [r3, #64]	; 0x40
	fan4Menu[1].type = MENU_TYPE_TREE_COLUMN;
 8008f90:	4b37      	ldr	r3, [pc, #220]	; (8009070 <MENU_Fill+0x698>)
 8008f92:	2202      	movs	r2, #2
 8008f94:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	fan4Menu[1].value = &ProgramForFun[3].modeNumber2;
 8008f98:	4b35      	ldr	r3, [pc, #212]	; (8009070 <MENU_Fill+0x698>)
 8008f9a:	4a38      	ldr	r2, [pc, #224]	; (800907c <MENU_Fill+0x6a4>)
 8008f9c:	631a      	str	r2, [r3, #48]	; 0x30
	fan4Menu[1].maxVal = 3;
 8008f9e:	4b34      	ldr	r3, [pc, #208]	; (8009070 <MENU_Fill+0x698>)
 8008fa0:	2203      	movs	r2, #3
 8008fa2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	fan4Menu[1].value2 = &ProgramForFun[3].numberOfDays2;
 8008fa6:	4b32      	ldr	r3, [pc, #200]	; (8009070 <MENU_Fill+0x698>)
 8008fa8:	4a35      	ldr	r2, [pc, #212]	; (8009080 <MENU_Fill+0x6a8>)
 8008faa:	639a      	str	r2, [r3, #56]	; 0x38
	fan4Menu[1].maxVal2 = 30;
 8008fac:	4b30      	ldr	r3, [pc, #192]	; (8009070 <MENU_Fill+0x698>)
 8008fae:	221e      	movs	r2, #30
 8008fb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	fan4Menu[1].value3 = 4;
 8008fb4:	4b2e      	ldr	r3, [pc, #184]	; (8009070 <MENU_Fill+0x698>)
 8008fb6:	2204      	movs	r2, #4
 8008fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	fan4Menu[2].name = "Stage3";
 8008fbc:	4b2c      	ldr	r3, [pc, #176]	; (8009070 <MENU_Fill+0x698>)
 8008fbe:	4a0d      	ldr	r2, [pc, #52]	; (8008ff4 <MENU_Fill+0x61c>)
 8008fc0:	66da      	str	r2, [r3, #108]	; 0x6c
	fan4Menu[2].type = MENU_TYPE_TREE_COLUMN;
 8008fc2:	4b2b      	ldr	r3, [pc, #172]	; (8009070 <MENU_Fill+0x698>)
 8008fc4:	2202      	movs	r2, #2
 8008fc6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	fan4Menu[2].value = &ProgramForFun[3].modeNumber3;
 8008fca:	4b29      	ldr	r3, [pc, #164]	; (8009070 <MENU_Fill+0x698>)
 8008fcc:	4a2d      	ldr	r2, [pc, #180]	; (8009084 <MENU_Fill+0x6ac>)
 8008fce:	65da      	str	r2, [r3, #92]	; 0x5c
	fan4Menu[2].maxVal = 3;
 8008fd0:	4b27      	ldr	r3, [pc, #156]	; (8009070 <MENU_Fill+0x698>)
 8008fd2:	2203      	movs	r2, #3
 8008fd4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	fan4Menu[2].value2 = &ProgramForFun[3].numberOfDays3;
 8008fd8:	4b25      	ldr	r3, [pc, #148]	; (8009070 <MENU_Fill+0x698>)
 8008fda:	4a2b      	ldr	r2, [pc, #172]	; (8009088 <MENU_Fill+0x6b0>)
 8008fdc:	665a      	str	r2, [r3, #100]	; 0x64
	fan4Menu[2].maxVal2 = 30;
 8008fde:	4b24      	ldr	r3, [pc, #144]	; (8009070 <MENU_Fill+0x698>)
 8008fe0:	221e      	movs	r2, #30
 8008fe2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	fan4Menu[2].value3 = 4;
 8008fe6:	4b22      	ldr	r3, [pc, #136]	; (8009070 <MENU_Fill+0x698>)
 8008fe8:	2204      	movs	r2, #4
 8008fea:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 8008fee:	e04d      	b.n	800908c <MENU_Fill+0x6b4>
 8008ff0:	20002d20 	.word	0x20002d20
 8008ff4:	0800ae00 	.word	0x0800ae00
 8008ff8:	20001418 	.word	0x20001418
 8008ffc:	20001419 	.word	0x20001419
 8009000:	0800ae08 	.word	0x0800ae08
 8009004:	2000141a 	.word	0x2000141a
 8009008:	2000141b 	.word	0x2000141b
 800900c:	0800ae10 	.word	0x0800ae10
 8009010:	080051b9 	.word	0x080051b9
 8009014:	20002dd0 	.word	0x20002dd0
 8009018:	0800ae20 	.word	0x0800ae20
 800901c:	08005169 	.word	0x08005169
 8009020:	20002dfc 	.word	0x20002dfc
 8009024:	0800ae28 	.word	0x0800ae28
 8009028:	08005229 	.word	0x08005229
 800902c:	20002380 	.word	0x20002380
 8009030:	0800ae4c 	.word	0x0800ae4c
 8009034:	2000219c 	.word	0x2000219c
 8009038:	0800adf0 	.word	0x0800adf0
 800903c:	2000149a 	.word	0x2000149a
 8009040:	2000149b 	.word	0x2000149b
 8009044:	0800adf8 	.word	0x0800adf8
 8009048:	2000149c 	.word	0x2000149c
 800904c:	2000149d 	.word	0x2000149d
 8009050:	2000149e 	.word	0x2000149e
 8009054:	2000149f 	.word	0x2000149f
 8009058:	200014a0 	.word	0x200014a0
 800905c:	200014a1 	.word	0x200014a1
 8009060:	2000224c 	.word	0x2000224c
 8009064:	20002278 	.word	0x20002278
 8009068:	200023ac 	.word	0x200023ac
 800906c:	0800ae60 	.word	0x0800ae60
 8009070:	20001d50 	.word	0x20001d50
 8009074:	20001520 	.word	0x20001520
 8009078:	20001521 	.word	0x20001521
 800907c:	20001522 	.word	0x20001522
 8009080:	20001523 	.word	0x20001523
 8009084:	20001524 	.word	0x20001524
 8009088:	20001525 	.word	0x20001525

	fan4Menu[3].name = "Stage4";
 800908c:	4bae      	ldr	r3, [pc, #696]	; (8009348 <MENU_Fill+0x970>)
 800908e:	4aaf      	ldr	r2, [pc, #700]	; (800934c <MENU_Fill+0x974>)
 8009090:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	fan4Menu[3].type = MENU_TYPE_TREE_COLUMN;
 8009094:	4bac      	ldr	r3, [pc, #688]	; (8009348 <MENU_Fill+0x970>)
 8009096:	2202      	movs	r2, #2
 8009098:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
	fan4Menu[3].value = &ProgramForFun[3].modeNumber4;
 800909c:	4baa      	ldr	r3, [pc, #680]	; (8009348 <MENU_Fill+0x970>)
 800909e:	4aac      	ldr	r2, [pc, #688]	; (8009350 <MENU_Fill+0x978>)
 80090a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	fan4Menu[3].maxVal = 3;
 80090a4:	4ba8      	ldr	r3, [pc, #672]	; (8009348 <MENU_Fill+0x970>)
 80090a6:	2203      	movs	r2, #3
 80090a8:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
	fan4Menu[3].value2 = &ProgramForFun[3].numberOfDays4;
 80090ac:	4ba6      	ldr	r3, [pc, #664]	; (8009348 <MENU_Fill+0x970>)
 80090ae:	4aa9      	ldr	r2, [pc, #676]	; (8009354 <MENU_Fill+0x97c>)
 80090b0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	fan4Menu[3].maxVal2 = 30;
 80090b4:	4ba4      	ldr	r3, [pc, #656]	; (8009348 <MENU_Fill+0x970>)
 80090b6:	221e      	movs	r2, #30
 80090b8:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
	fan4Menu[3].value3 = 4;
 80090bc:	4ba2      	ldr	r3, [pc, #648]	; (8009348 <MENU_Fill+0x970>)
 80090be:	2204      	movs	r2, #4
 80090c0:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95

	fan4Menu[4].name = "Set start day";
 80090c4:	4ba0      	ldr	r3, [pc, #640]	; (8009348 <MENU_Fill+0x970>)
 80090c6:	4aa4      	ldr	r2, [pc, #656]	; (8009358 <MENU_Fill+0x980>)
 80090c8:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	fan4Menu[4].maxVal = 3;  //maxVal - соответствует номеру вентилятора
 80090cc:	4b9e      	ldr	r3, [pc, #632]	; (8009348 <MENU_Fill+0x970>)
 80090ce:	2203      	movs	r2, #3
 80090d0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	fan4Menu[4].function = FANS_UpdateFirstDay;
 80090d4:	4b9c      	ldr	r3, [pc, #624]	; (8009348 <MENU_Fill+0x970>)
 80090d6:	4aa1      	ldr	r2, [pc, #644]	; (800935c <MENU_Fill+0x984>)
 80090d8:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	fan4Menu[4].enter = &fan4Menu[4];
 80090dc:	4b9a      	ldr	r3, [pc, #616]	; (8009348 <MENU_Fill+0x970>)
 80090de:	4aa0      	ldr	r2, [pc, #640]	; (8009360 <MENU_Fill+0x988>)
 80090e0:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	fan4Menu[4].value3 = 4;
 80090e4:	4b98      	ldr	r3, [pc, #608]	; (8009348 <MENU_Fill+0x970>)
 80090e6:	2204      	movs	r2, #4
 80090e8:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

	fan4Menu[5].name = "ON/OFF";
 80090ec:	4b96      	ldr	r3, [pc, #600]	; (8009348 <MENU_Fill+0x970>)
 80090ee:	4a9d      	ldr	r2, [pc, #628]	; (8009364 <MENU_Fill+0x98c>)
 80090f0:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	fan4Menu[5].function = FANS_Toggle;
 80090f4:	4b94      	ldr	r3, [pc, #592]	; (8009348 <MENU_Fill+0x970>)
 80090f6:	4a9c      	ldr	r2, [pc, #624]	; (8009368 <MENU_Fill+0x990>)
 80090f8:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	fan4Menu[5].enter = &fan4Menu[5];
 80090fc:	4b92      	ldr	r3, [pc, #584]	; (8009348 <MENU_Fill+0x970>)
 80090fe:	4a9b      	ldr	r2, [pc, #620]	; (800936c <MENU_Fill+0x994>)
 8009100:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	fan4Menu[5].value3 = 4;
 8009104:	4b90      	ldr	r3, [pc, #576]	; (8009348 <MENU_Fill+0x970>)
 8009106:	2204      	movs	r2, #4
 8009108:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed

	fan4Menu[6].name = "Save and Back";
 800910c:	4b8e      	ldr	r3, [pc, #568]	; (8009348 <MENU_Fill+0x970>)
 800910e:	4a98      	ldr	r2, [pc, #608]	; (8009370 <MENU_Fill+0x998>)
 8009110:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
	fan4Menu[6].function = FANS_FillProgram;
 8009114:	4b8c      	ldr	r3, [pc, #560]	; (8009348 <MENU_Fill+0x970>)
 8009116:	4a97      	ldr	r2, [pc, #604]	; (8009374 <MENU_Fill+0x99c>)
 8009118:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
	fan4Menu[6].enter = &mainMenu[3];
 800911c:	4b8a      	ldr	r3, [pc, #552]	; (8009348 <MENU_Fill+0x970>)
 800911e:	4a96      	ldr	r2, [pc, #600]	; (8009378 <MENU_Fill+0x9a0>)
 8009120:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
	fan4Menu[6].value3 = 4;
 8009124:	4b88      	ldr	r3, [pc, #544]	; (8009348 <MENU_Fill+0x970>)
 8009126:	2204      	movs	r2, #4
 8009128:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119

	//fan5 menu
	MENU_FillSection(fan5Menu, FAN_MENU_SIZE, "Fan5  ModeN DaysC");
 800912c:	4a93      	ldr	r2, [pc, #588]	; (800937c <MENU_Fill+0x9a4>)
 800912e:	2107      	movs	r1, #7
 8009130:	4893      	ldr	r0, [pc, #588]	; (8009380 <MENU_Fill+0x9a8>)
 8009132:	f000 fef1 	bl	8009f18 <MENU_FillSection>

	fan5Menu[0].name = "Stage1";
 8009136:	4b92      	ldr	r3, [pc, #584]	; (8009380 <MENU_Fill+0x9a8>)
 8009138:	4a92      	ldr	r2, [pc, #584]	; (8009384 <MENU_Fill+0x9ac>)
 800913a:	615a      	str	r2, [r3, #20]
	fan5Menu[0].type = MENU_TYPE_TREE_COLUMN;
 800913c:	4b90      	ldr	r3, [pc, #576]	; (8009380 <MENU_Fill+0x9a8>)
 800913e:	2202      	movs	r2, #2
 8009140:	705a      	strb	r2, [r3, #1]
	fan5Menu[0].value = &ProgramForFun[4].modeNumber1;
 8009142:	4b8f      	ldr	r3, [pc, #572]	; (8009380 <MENU_Fill+0x9a8>)
 8009144:	4a90      	ldr	r2, [pc, #576]	; (8009388 <MENU_Fill+0x9b0>)
 8009146:	605a      	str	r2, [r3, #4]
	fan5Menu[0].maxVal = 3;
 8009148:	4b8d      	ldr	r3, [pc, #564]	; (8009380 <MENU_Fill+0x9a8>)
 800914a:	2203      	movs	r2, #3
 800914c:	721a      	strb	r2, [r3, #8]
	fan5Menu[0].value2 = &ProgramForFun[4].numberOfDays1;
 800914e:	4b8c      	ldr	r3, [pc, #560]	; (8009380 <MENU_Fill+0x9a8>)
 8009150:	4a8e      	ldr	r2, [pc, #568]	; (800938c <MENU_Fill+0x9b4>)
 8009152:	60da      	str	r2, [r3, #12]
	fan5Menu[0].maxVal2 = 30;
 8009154:	4b8a      	ldr	r3, [pc, #552]	; (8009380 <MENU_Fill+0x9a8>)
 8009156:	221e      	movs	r2, #30
 8009158:	741a      	strb	r2, [r3, #16]
	fan5Menu[0].value3 = 5;
 800915a:	4b89      	ldr	r3, [pc, #548]	; (8009380 <MENU_Fill+0x9a8>)
 800915c:	2205      	movs	r2, #5
 800915e:	745a      	strb	r2, [r3, #17]

	fan5Menu[1].name = "Stage2";
 8009160:	4b87      	ldr	r3, [pc, #540]	; (8009380 <MENU_Fill+0x9a8>)
 8009162:	4a8b      	ldr	r2, [pc, #556]	; (8009390 <MENU_Fill+0x9b8>)
 8009164:	641a      	str	r2, [r3, #64]	; 0x40
	fan5Menu[1].type = MENU_TYPE_TREE_COLUMN;
 8009166:	4b86      	ldr	r3, [pc, #536]	; (8009380 <MENU_Fill+0x9a8>)
 8009168:	2202      	movs	r2, #2
 800916a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	fan5Menu[1].value = &ProgramForFun[4].modeNumber2;
 800916e:	4b84      	ldr	r3, [pc, #528]	; (8009380 <MENU_Fill+0x9a8>)
 8009170:	4a88      	ldr	r2, [pc, #544]	; (8009394 <MENU_Fill+0x9bc>)
 8009172:	631a      	str	r2, [r3, #48]	; 0x30
	fan5Menu[1].maxVal = 3;
 8009174:	4b82      	ldr	r3, [pc, #520]	; (8009380 <MENU_Fill+0x9a8>)
 8009176:	2203      	movs	r2, #3
 8009178:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	fan5Menu[1].value2 = &ProgramForFun[4].numberOfDays2;
 800917c:	4b80      	ldr	r3, [pc, #512]	; (8009380 <MENU_Fill+0x9a8>)
 800917e:	4a86      	ldr	r2, [pc, #536]	; (8009398 <MENU_Fill+0x9c0>)
 8009180:	639a      	str	r2, [r3, #56]	; 0x38
	fan5Menu[1].maxVal2 = 30;
 8009182:	4b7f      	ldr	r3, [pc, #508]	; (8009380 <MENU_Fill+0x9a8>)
 8009184:	221e      	movs	r2, #30
 8009186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	fan5Menu[1].value3 = 5;
 800918a:	4b7d      	ldr	r3, [pc, #500]	; (8009380 <MENU_Fill+0x9a8>)
 800918c:	2205      	movs	r2, #5
 800918e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	fan5Menu[2].name = "Stage3";
 8009192:	4b7b      	ldr	r3, [pc, #492]	; (8009380 <MENU_Fill+0x9a8>)
 8009194:	4a81      	ldr	r2, [pc, #516]	; (800939c <MENU_Fill+0x9c4>)
 8009196:	66da      	str	r2, [r3, #108]	; 0x6c
	fan5Menu[2].type = MENU_TYPE_TREE_COLUMN;
 8009198:	4b79      	ldr	r3, [pc, #484]	; (8009380 <MENU_Fill+0x9a8>)
 800919a:	2202      	movs	r2, #2
 800919c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	fan5Menu[2].value = &ProgramForFun[4].modeNumber3;
 80091a0:	4b77      	ldr	r3, [pc, #476]	; (8009380 <MENU_Fill+0x9a8>)
 80091a2:	4a7f      	ldr	r2, [pc, #508]	; (80093a0 <MENU_Fill+0x9c8>)
 80091a4:	65da      	str	r2, [r3, #92]	; 0x5c
	fan5Menu[2].maxVal = 3;
 80091a6:	4b76      	ldr	r3, [pc, #472]	; (8009380 <MENU_Fill+0x9a8>)
 80091a8:	2203      	movs	r2, #3
 80091aa:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	fan5Menu[2].value2 = &ProgramForFun[4].numberOfDays3;
 80091ae:	4b74      	ldr	r3, [pc, #464]	; (8009380 <MENU_Fill+0x9a8>)
 80091b0:	4a7c      	ldr	r2, [pc, #496]	; (80093a4 <MENU_Fill+0x9cc>)
 80091b2:	665a      	str	r2, [r3, #100]	; 0x64
	fan5Menu[2].maxVal2 = 30;
 80091b4:	4b72      	ldr	r3, [pc, #456]	; (8009380 <MENU_Fill+0x9a8>)
 80091b6:	221e      	movs	r2, #30
 80091b8:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	fan5Menu[2].value3 = 5;
 80091bc:	4b70      	ldr	r3, [pc, #448]	; (8009380 <MENU_Fill+0x9a8>)
 80091be:	2205      	movs	r2, #5
 80091c0:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

	fan5Menu[3].name = "Stage4";
 80091c4:	4b6e      	ldr	r3, [pc, #440]	; (8009380 <MENU_Fill+0x9a8>)
 80091c6:	4a61      	ldr	r2, [pc, #388]	; (800934c <MENU_Fill+0x974>)
 80091c8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	fan5Menu[3].type = MENU_TYPE_TREE_COLUMN;
 80091cc:	4b6c      	ldr	r3, [pc, #432]	; (8009380 <MENU_Fill+0x9a8>)
 80091ce:	2202      	movs	r2, #2
 80091d0:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
	fan5Menu[3].value = &ProgramForFun[4].modeNumber4;
 80091d4:	4b6a      	ldr	r3, [pc, #424]	; (8009380 <MENU_Fill+0x9a8>)
 80091d6:	4a74      	ldr	r2, [pc, #464]	; (80093a8 <MENU_Fill+0x9d0>)
 80091d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	fan5Menu[3].maxVal = 3;
 80091dc:	4b68      	ldr	r3, [pc, #416]	; (8009380 <MENU_Fill+0x9a8>)
 80091de:	2203      	movs	r2, #3
 80091e0:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
	fan5Menu[3].value2 = &ProgramForFun[4].numberOfDays4;
 80091e4:	4b66      	ldr	r3, [pc, #408]	; (8009380 <MENU_Fill+0x9a8>)
 80091e6:	4a71      	ldr	r2, [pc, #452]	; (80093ac <MENU_Fill+0x9d4>)
 80091e8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	fan5Menu[3].maxVal2 = 30;
 80091ec:	4b64      	ldr	r3, [pc, #400]	; (8009380 <MENU_Fill+0x9a8>)
 80091ee:	221e      	movs	r2, #30
 80091f0:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
	fan5Menu[3].value3 = 5;
 80091f4:	4b62      	ldr	r3, [pc, #392]	; (8009380 <MENU_Fill+0x9a8>)
 80091f6:	2205      	movs	r2, #5
 80091f8:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95

	fan5Menu[4].name = "Set start day";
 80091fc:	4b60      	ldr	r3, [pc, #384]	; (8009380 <MENU_Fill+0x9a8>)
 80091fe:	4a56      	ldr	r2, [pc, #344]	; (8009358 <MENU_Fill+0x980>)
 8009200:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	fan5Menu[4].maxVal = 4;  //maxVal - соответствует номеру вентилятора
 8009204:	4b5e      	ldr	r3, [pc, #376]	; (8009380 <MENU_Fill+0x9a8>)
 8009206:	2204      	movs	r2, #4
 8009208:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	fan5Menu[4].function = FANS_UpdateFirstDay;
 800920c:	4b5c      	ldr	r3, [pc, #368]	; (8009380 <MENU_Fill+0x9a8>)
 800920e:	4a53      	ldr	r2, [pc, #332]	; (800935c <MENU_Fill+0x984>)
 8009210:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	fan5Menu[4].enter = &fan5Menu[4];
 8009214:	4b5a      	ldr	r3, [pc, #360]	; (8009380 <MENU_Fill+0x9a8>)
 8009216:	4a66      	ldr	r2, [pc, #408]	; (80093b0 <MENU_Fill+0x9d8>)
 8009218:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	fan5Menu[4].value3 = 5;
 800921c:	4b58      	ldr	r3, [pc, #352]	; (8009380 <MENU_Fill+0x9a8>)
 800921e:	2205      	movs	r2, #5
 8009220:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

	fan5Menu[5].name = "ON/OFF";
 8009224:	4b56      	ldr	r3, [pc, #344]	; (8009380 <MENU_Fill+0x9a8>)
 8009226:	4a4f      	ldr	r2, [pc, #316]	; (8009364 <MENU_Fill+0x98c>)
 8009228:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	fan5Menu[5].function = FANS_Toggle;
 800922c:	4b54      	ldr	r3, [pc, #336]	; (8009380 <MENU_Fill+0x9a8>)
 800922e:	4a4e      	ldr	r2, [pc, #312]	; (8009368 <MENU_Fill+0x990>)
 8009230:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	fan5Menu[5].enter = &fan5Menu[5];
 8009234:	4b52      	ldr	r3, [pc, #328]	; (8009380 <MENU_Fill+0x9a8>)
 8009236:	4a5f      	ldr	r2, [pc, #380]	; (80093b4 <MENU_Fill+0x9dc>)
 8009238:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	fan5Menu[5].value3 = 5;
 800923c:	4b50      	ldr	r3, [pc, #320]	; (8009380 <MENU_Fill+0x9a8>)
 800923e:	2205      	movs	r2, #5
 8009240:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed

	fan5Menu[6].name = "Save and Back";
 8009244:	4b4e      	ldr	r3, [pc, #312]	; (8009380 <MENU_Fill+0x9a8>)
 8009246:	4a4a      	ldr	r2, [pc, #296]	; (8009370 <MENU_Fill+0x998>)
 8009248:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
	fan5Menu[6].function = FANS_FillProgram;
 800924c:	4b4c      	ldr	r3, [pc, #304]	; (8009380 <MENU_Fill+0x9a8>)
 800924e:	4a49      	ldr	r2, [pc, #292]	; (8009374 <MENU_Fill+0x99c>)
 8009250:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
	fan5Menu[6].enter = &mainMenu[4];
 8009254:	4b4a      	ldr	r3, [pc, #296]	; (8009380 <MENU_Fill+0x9a8>)
 8009256:	4a58      	ldr	r2, [pc, #352]	; (80093b8 <MENU_Fill+0x9e0>)
 8009258:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
	fan5Menu[6].value3 = 5;
 800925c:	4b48      	ldr	r3, [pc, #288]	; (8009380 <MENU_Fill+0x9a8>)
 800925e:	2205      	movs	r2, #5
 8009260:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119

	//fan6 menu
	MENU_FillSection(fan6Menu, FAN_MENU_SIZE, "Fan6  ModeN DaysC");
 8009264:	4a55      	ldr	r2, [pc, #340]	; (80093bc <MENU_Fill+0x9e4>)
 8009266:	2107      	movs	r1, #7
 8009268:	4855      	ldr	r0, [pc, #340]	; (80093c0 <MENU_Fill+0x9e8>)
 800926a:	f000 fe55 	bl	8009f18 <MENU_FillSection>

	fan6Menu[0].name = "Stage1";
 800926e:	4b54      	ldr	r3, [pc, #336]	; (80093c0 <MENU_Fill+0x9e8>)
 8009270:	4a44      	ldr	r2, [pc, #272]	; (8009384 <MENU_Fill+0x9ac>)
 8009272:	615a      	str	r2, [r3, #20]
	fan6Menu[0].type = MENU_TYPE_TREE_COLUMN;
 8009274:	4b52      	ldr	r3, [pc, #328]	; (80093c0 <MENU_Fill+0x9e8>)
 8009276:	2202      	movs	r2, #2
 8009278:	705a      	strb	r2, [r3, #1]
	fan6Menu[0].value = &ProgramForFun[5].modeNumber1;
 800927a:	4b51      	ldr	r3, [pc, #324]	; (80093c0 <MENU_Fill+0x9e8>)
 800927c:	4a51      	ldr	r2, [pc, #324]	; (80093c4 <MENU_Fill+0x9ec>)
 800927e:	605a      	str	r2, [r3, #4]
	fan6Menu[0].maxVal = 3;
 8009280:	4b4f      	ldr	r3, [pc, #316]	; (80093c0 <MENU_Fill+0x9e8>)
 8009282:	2203      	movs	r2, #3
 8009284:	721a      	strb	r2, [r3, #8]
	fan6Menu[0].value2 = &ProgramForFun[5].numberOfDays1;
 8009286:	4b4e      	ldr	r3, [pc, #312]	; (80093c0 <MENU_Fill+0x9e8>)
 8009288:	4a4f      	ldr	r2, [pc, #316]	; (80093c8 <MENU_Fill+0x9f0>)
 800928a:	60da      	str	r2, [r3, #12]
	fan6Menu[0].maxVal2 = 30;
 800928c:	4b4c      	ldr	r3, [pc, #304]	; (80093c0 <MENU_Fill+0x9e8>)
 800928e:	221e      	movs	r2, #30
 8009290:	741a      	strb	r2, [r3, #16]
	fan6Menu[0].value3 = 6;
 8009292:	4b4b      	ldr	r3, [pc, #300]	; (80093c0 <MENU_Fill+0x9e8>)
 8009294:	2206      	movs	r2, #6
 8009296:	745a      	strb	r2, [r3, #17]

	fan6Menu[1].name = "Stage2";
 8009298:	4b49      	ldr	r3, [pc, #292]	; (80093c0 <MENU_Fill+0x9e8>)
 800929a:	4a3d      	ldr	r2, [pc, #244]	; (8009390 <MENU_Fill+0x9b8>)
 800929c:	641a      	str	r2, [r3, #64]	; 0x40
	fan6Menu[1].type = MENU_TYPE_TREE_COLUMN;
 800929e:	4b48      	ldr	r3, [pc, #288]	; (80093c0 <MENU_Fill+0x9e8>)
 80092a0:	2202      	movs	r2, #2
 80092a2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	fan6Menu[1].value = &ProgramForFun[5].modeNumber2;
 80092a6:	4b46      	ldr	r3, [pc, #280]	; (80093c0 <MENU_Fill+0x9e8>)
 80092a8:	4a48      	ldr	r2, [pc, #288]	; (80093cc <MENU_Fill+0x9f4>)
 80092aa:	631a      	str	r2, [r3, #48]	; 0x30
	fan6Menu[1].maxVal = 3;
 80092ac:	4b44      	ldr	r3, [pc, #272]	; (80093c0 <MENU_Fill+0x9e8>)
 80092ae:	2203      	movs	r2, #3
 80092b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	fan6Menu[1].value2 = &ProgramForFun[5].numberOfDays2;
 80092b4:	4b42      	ldr	r3, [pc, #264]	; (80093c0 <MENU_Fill+0x9e8>)
 80092b6:	4a46      	ldr	r2, [pc, #280]	; (80093d0 <MENU_Fill+0x9f8>)
 80092b8:	639a      	str	r2, [r3, #56]	; 0x38
	fan6Menu[1].maxVal2 = 30;
 80092ba:	4b41      	ldr	r3, [pc, #260]	; (80093c0 <MENU_Fill+0x9e8>)
 80092bc:	221e      	movs	r2, #30
 80092be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	fan6Menu[1].value3 = 6;
 80092c2:	4b3f      	ldr	r3, [pc, #252]	; (80093c0 <MENU_Fill+0x9e8>)
 80092c4:	2206      	movs	r2, #6
 80092c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	fan6Menu[2].name = "Stage3";
 80092ca:	4b3d      	ldr	r3, [pc, #244]	; (80093c0 <MENU_Fill+0x9e8>)
 80092cc:	4a33      	ldr	r2, [pc, #204]	; (800939c <MENU_Fill+0x9c4>)
 80092ce:	66da      	str	r2, [r3, #108]	; 0x6c
	fan6Menu[2].type = MENU_TYPE_TREE_COLUMN;
 80092d0:	4b3b      	ldr	r3, [pc, #236]	; (80093c0 <MENU_Fill+0x9e8>)
 80092d2:	2202      	movs	r2, #2
 80092d4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	fan6Menu[2].value = &ProgramForFun[5].modeNumber3;
 80092d8:	4b39      	ldr	r3, [pc, #228]	; (80093c0 <MENU_Fill+0x9e8>)
 80092da:	4a3e      	ldr	r2, [pc, #248]	; (80093d4 <MENU_Fill+0x9fc>)
 80092dc:	65da      	str	r2, [r3, #92]	; 0x5c
	fan6Menu[2].maxVal = 3;
 80092de:	4b38      	ldr	r3, [pc, #224]	; (80093c0 <MENU_Fill+0x9e8>)
 80092e0:	2203      	movs	r2, #3
 80092e2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	fan6Menu[2].value2 = &ProgramForFun[5].numberOfDays3;
 80092e6:	4b36      	ldr	r3, [pc, #216]	; (80093c0 <MENU_Fill+0x9e8>)
 80092e8:	4a3b      	ldr	r2, [pc, #236]	; (80093d8 <MENU_Fill+0xa00>)
 80092ea:	665a      	str	r2, [r3, #100]	; 0x64
	fan6Menu[2].maxVal2 = 30;
 80092ec:	4b34      	ldr	r3, [pc, #208]	; (80093c0 <MENU_Fill+0x9e8>)
 80092ee:	221e      	movs	r2, #30
 80092f0:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	fan6Menu[2].value3 = 6;
 80092f4:	4b32      	ldr	r3, [pc, #200]	; (80093c0 <MENU_Fill+0x9e8>)
 80092f6:	2206      	movs	r2, #6
 80092f8:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

	fan6Menu[3].name = "Stage4";
 80092fc:	4b30      	ldr	r3, [pc, #192]	; (80093c0 <MENU_Fill+0x9e8>)
 80092fe:	4a13      	ldr	r2, [pc, #76]	; (800934c <MENU_Fill+0x974>)
 8009300:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	fan6Menu[3].type = MENU_TYPE_TREE_COLUMN;
 8009304:	4b2e      	ldr	r3, [pc, #184]	; (80093c0 <MENU_Fill+0x9e8>)
 8009306:	2202      	movs	r2, #2
 8009308:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
	fan6Menu[3].value = &ProgramForFun[5].modeNumber4;
 800930c:	4b2c      	ldr	r3, [pc, #176]	; (80093c0 <MENU_Fill+0x9e8>)
 800930e:	4a33      	ldr	r2, [pc, #204]	; (80093dc <MENU_Fill+0xa04>)
 8009310:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	fan6Menu[3].maxVal = 3;
 8009314:	4b2a      	ldr	r3, [pc, #168]	; (80093c0 <MENU_Fill+0x9e8>)
 8009316:	2203      	movs	r2, #3
 8009318:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
	fan6Menu[3].value2 = &ProgramForFun[5].numberOfDays4;
 800931c:	4b28      	ldr	r3, [pc, #160]	; (80093c0 <MENU_Fill+0x9e8>)
 800931e:	4a30      	ldr	r2, [pc, #192]	; (80093e0 <MENU_Fill+0xa08>)
 8009320:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	fan6Menu[3].maxVal2 = 30;
 8009324:	4b26      	ldr	r3, [pc, #152]	; (80093c0 <MENU_Fill+0x9e8>)
 8009326:	221e      	movs	r2, #30
 8009328:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
	fan6Menu[3].value3 = 6;
 800932c:	4b24      	ldr	r3, [pc, #144]	; (80093c0 <MENU_Fill+0x9e8>)
 800932e:	2206      	movs	r2, #6
 8009330:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95

	fan6Menu[4].name = "Set start day";
 8009334:	4b22      	ldr	r3, [pc, #136]	; (80093c0 <MENU_Fill+0x9e8>)
 8009336:	4a08      	ldr	r2, [pc, #32]	; (8009358 <MENU_Fill+0x980>)
 8009338:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	fan6Menu[4].maxVal = 5;  //maxVal - соответствует номеру вентилятора
 800933c:	4b20      	ldr	r3, [pc, #128]	; (80093c0 <MENU_Fill+0x9e8>)
 800933e:	2205      	movs	r2, #5
 8009340:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
 8009344:	e04e      	b.n	80093e4 <MENU_Fill+0xa0c>
 8009346:	bf00      	nop
 8009348:	20001d50 	.word	0x20001d50
 800934c:	0800ae08 	.word	0x0800ae08
 8009350:	20001526 	.word	0x20001526
 8009354:	20001527 	.word	0x20001527
 8009358:	0800ae10 	.word	0x0800ae10
 800935c:	080051b9 	.word	0x080051b9
 8009360:	20001e00 	.word	0x20001e00
 8009364:	0800ae20 	.word	0x0800ae20
 8009368:	08005169 	.word	0x08005169
 800936c:	20001e2c 	.word	0x20001e2c
 8009370:	0800ae28 	.word	0x0800ae28
 8009374:	08005229 	.word	0x08005229
 8009378:	200023d8 	.word	0x200023d8
 800937c:	0800ae74 	.word	0x0800ae74
 8009380:	20002b10 	.word	0x20002b10
 8009384:	0800adf0 	.word	0x0800adf0
 8009388:	200015a6 	.word	0x200015a6
 800938c:	200015a7 	.word	0x200015a7
 8009390:	0800adf8 	.word	0x0800adf8
 8009394:	200015a8 	.word	0x200015a8
 8009398:	200015a9 	.word	0x200015a9
 800939c:	0800ae00 	.word	0x0800ae00
 80093a0:	200015aa 	.word	0x200015aa
 80093a4:	200015ab 	.word	0x200015ab
 80093a8:	200015ac 	.word	0x200015ac
 80093ac:	200015ad 	.word	0x200015ad
 80093b0:	20002bc0 	.word	0x20002bc0
 80093b4:	20002bec 	.word	0x20002bec
 80093b8:	20002404 	.word	0x20002404
 80093bc:	0800ae88 	.word	0x0800ae88
 80093c0:	20001f08 	.word	0x20001f08
 80093c4:	2000162c 	.word	0x2000162c
 80093c8:	2000162d 	.word	0x2000162d
 80093cc:	2000162e 	.word	0x2000162e
 80093d0:	2000162f 	.word	0x2000162f
 80093d4:	20001630 	.word	0x20001630
 80093d8:	20001631 	.word	0x20001631
 80093dc:	20001632 	.word	0x20001632
 80093e0:	20001633 	.word	0x20001633
	fan6Menu[4].function = FANS_UpdateFirstDay;
 80093e4:	4bac      	ldr	r3, [pc, #688]	; (8009698 <MENU_Fill+0xcc0>)
 80093e6:	4aad      	ldr	r2, [pc, #692]	; (800969c <MENU_Fill+0xcc4>)
 80093e8:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	fan6Menu[4].enter = &fan6Menu[4];
 80093ec:	4baa      	ldr	r3, [pc, #680]	; (8009698 <MENU_Fill+0xcc0>)
 80093ee:	4aac      	ldr	r2, [pc, #688]	; (80096a0 <MENU_Fill+0xcc8>)
 80093f0:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	fan6Menu[4].value3 = 6;
 80093f4:	4ba8      	ldr	r3, [pc, #672]	; (8009698 <MENU_Fill+0xcc0>)
 80093f6:	2206      	movs	r2, #6
 80093f8:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

	fan6Menu[5].name = "ON/OFF";
 80093fc:	4ba6      	ldr	r3, [pc, #664]	; (8009698 <MENU_Fill+0xcc0>)
 80093fe:	4aa9      	ldr	r2, [pc, #676]	; (80096a4 <MENU_Fill+0xccc>)
 8009400:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	fan6Menu[5].function = FANS_Toggle;
 8009404:	4ba4      	ldr	r3, [pc, #656]	; (8009698 <MENU_Fill+0xcc0>)
 8009406:	4aa8      	ldr	r2, [pc, #672]	; (80096a8 <MENU_Fill+0xcd0>)
 8009408:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	fan6Menu[5].enter = &fan6Menu[5];
 800940c:	4ba2      	ldr	r3, [pc, #648]	; (8009698 <MENU_Fill+0xcc0>)
 800940e:	4aa7      	ldr	r2, [pc, #668]	; (80096ac <MENU_Fill+0xcd4>)
 8009410:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	fan6Menu[5].value3 = 6;
 8009414:	4ba0      	ldr	r3, [pc, #640]	; (8009698 <MENU_Fill+0xcc0>)
 8009416:	2206      	movs	r2, #6
 8009418:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed

	fan6Menu[6].name = "Save and Back";
 800941c:	4b9e      	ldr	r3, [pc, #632]	; (8009698 <MENU_Fill+0xcc0>)
 800941e:	4aa4      	ldr	r2, [pc, #656]	; (80096b0 <MENU_Fill+0xcd8>)
 8009420:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
	fan6Menu[6].function = FANS_FillProgram;
 8009424:	4b9c      	ldr	r3, [pc, #624]	; (8009698 <MENU_Fill+0xcc0>)
 8009426:	4aa3      	ldr	r2, [pc, #652]	; (80096b4 <MENU_Fill+0xcdc>)
 8009428:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
	fan6Menu[6].enter = &mainMenu[5];
 800942c:	4b9a      	ldr	r3, [pc, #616]	; (8009698 <MENU_Fill+0xcc0>)
 800942e:	4aa2      	ldr	r2, [pc, #648]	; (80096b8 <MENU_Fill+0xce0>)
 8009430:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
	fan6Menu[6].value3 = 6;
 8009434:	4b98      	ldr	r3, [pc, #608]	; (8009698 <MENU_Fill+0xcc0>)
 8009436:	2206      	movs	r2, #6
 8009438:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119

	//fan7 menu
	MENU_FillSection(fan7Menu, FAN_MENU_SIZE, "Fan7  ModeN DaysC");
 800943c:	4a9f      	ldr	r2, [pc, #636]	; (80096bc <MENU_Fill+0xce4>)
 800943e:	2107      	movs	r1, #7
 8009440:	489f      	ldr	r0, [pc, #636]	; (80096c0 <MENU_Fill+0xce8>)
 8009442:	f000 fd69 	bl	8009f18 <MENU_FillSection>

	fan7Menu[0].name = "Stage1";
 8009446:	4b9e      	ldr	r3, [pc, #632]	; (80096c0 <MENU_Fill+0xce8>)
 8009448:	4a9e      	ldr	r2, [pc, #632]	; (80096c4 <MENU_Fill+0xcec>)
 800944a:	615a      	str	r2, [r3, #20]
	fan7Menu[0].type = MENU_TYPE_TREE_COLUMN;
 800944c:	4b9c      	ldr	r3, [pc, #624]	; (80096c0 <MENU_Fill+0xce8>)
 800944e:	2202      	movs	r2, #2
 8009450:	705a      	strb	r2, [r3, #1]
	fan7Menu[0].value = &ProgramForFun[6].modeNumber1;
 8009452:	4b9b      	ldr	r3, [pc, #620]	; (80096c0 <MENU_Fill+0xce8>)
 8009454:	4a9c      	ldr	r2, [pc, #624]	; (80096c8 <MENU_Fill+0xcf0>)
 8009456:	605a      	str	r2, [r3, #4]
	fan7Menu[0].maxVal = 3;
 8009458:	4b99      	ldr	r3, [pc, #612]	; (80096c0 <MENU_Fill+0xce8>)
 800945a:	2203      	movs	r2, #3
 800945c:	721a      	strb	r2, [r3, #8]
	fan7Menu[0].value2 = &ProgramForFun[6].numberOfDays1;
 800945e:	4b98      	ldr	r3, [pc, #608]	; (80096c0 <MENU_Fill+0xce8>)
 8009460:	4a9a      	ldr	r2, [pc, #616]	; (80096cc <MENU_Fill+0xcf4>)
 8009462:	60da      	str	r2, [r3, #12]
	fan7Menu[0].maxVal2 = 30;
 8009464:	4b96      	ldr	r3, [pc, #600]	; (80096c0 <MENU_Fill+0xce8>)
 8009466:	221e      	movs	r2, #30
 8009468:	741a      	strb	r2, [r3, #16]
	fan7Menu[0].value3 = 7;
 800946a:	4b95      	ldr	r3, [pc, #596]	; (80096c0 <MENU_Fill+0xce8>)
 800946c:	2207      	movs	r2, #7
 800946e:	745a      	strb	r2, [r3, #17]

	fan7Menu[1].name = "Stage2";
 8009470:	4b93      	ldr	r3, [pc, #588]	; (80096c0 <MENU_Fill+0xce8>)
 8009472:	4a97      	ldr	r2, [pc, #604]	; (80096d0 <MENU_Fill+0xcf8>)
 8009474:	641a      	str	r2, [r3, #64]	; 0x40
	fan7Menu[1].type = MENU_TYPE_TREE_COLUMN;
 8009476:	4b92      	ldr	r3, [pc, #584]	; (80096c0 <MENU_Fill+0xce8>)
 8009478:	2202      	movs	r2, #2
 800947a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	fan7Menu[1].value = &ProgramForFun[6].modeNumber2;
 800947e:	4b90      	ldr	r3, [pc, #576]	; (80096c0 <MENU_Fill+0xce8>)
 8009480:	4a94      	ldr	r2, [pc, #592]	; (80096d4 <MENU_Fill+0xcfc>)
 8009482:	631a      	str	r2, [r3, #48]	; 0x30
	fan7Menu[1].maxVal = 3;
 8009484:	4b8e      	ldr	r3, [pc, #568]	; (80096c0 <MENU_Fill+0xce8>)
 8009486:	2203      	movs	r2, #3
 8009488:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	fan7Menu[1].value2 = &ProgramForFun[6].numberOfDays2;
 800948c:	4b8c      	ldr	r3, [pc, #560]	; (80096c0 <MENU_Fill+0xce8>)
 800948e:	4a92      	ldr	r2, [pc, #584]	; (80096d8 <MENU_Fill+0xd00>)
 8009490:	639a      	str	r2, [r3, #56]	; 0x38
	fan7Menu[1].maxVal2 = 30;
 8009492:	4b8b      	ldr	r3, [pc, #556]	; (80096c0 <MENU_Fill+0xce8>)
 8009494:	221e      	movs	r2, #30
 8009496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	fan7Menu[1].value3 = 7;
 800949a:	4b89      	ldr	r3, [pc, #548]	; (80096c0 <MENU_Fill+0xce8>)
 800949c:	2207      	movs	r2, #7
 800949e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	fan7Menu[2].name = "Stage3";
 80094a2:	4b87      	ldr	r3, [pc, #540]	; (80096c0 <MENU_Fill+0xce8>)
 80094a4:	4a8d      	ldr	r2, [pc, #564]	; (80096dc <MENU_Fill+0xd04>)
 80094a6:	66da      	str	r2, [r3, #108]	; 0x6c
	fan7Menu[2].type = MENU_TYPE_TREE_COLUMN;
 80094a8:	4b85      	ldr	r3, [pc, #532]	; (80096c0 <MENU_Fill+0xce8>)
 80094aa:	2202      	movs	r2, #2
 80094ac:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	fan7Menu[2].value = &ProgramForFun[6].modeNumber3;
 80094b0:	4b83      	ldr	r3, [pc, #524]	; (80096c0 <MENU_Fill+0xce8>)
 80094b2:	4a8b      	ldr	r2, [pc, #556]	; (80096e0 <MENU_Fill+0xd08>)
 80094b4:	65da      	str	r2, [r3, #92]	; 0x5c
	fan7Menu[2].maxVal = 3;
 80094b6:	4b82      	ldr	r3, [pc, #520]	; (80096c0 <MENU_Fill+0xce8>)
 80094b8:	2203      	movs	r2, #3
 80094ba:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	fan7Menu[2].value2 = &ProgramForFun[6].numberOfDays3;
 80094be:	4b80      	ldr	r3, [pc, #512]	; (80096c0 <MENU_Fill+0xce8>)
 80094c0:	4a88      	ldr	r2, [pc, #544]	; (80096e4 <MENU_Fill+0xd0c>)
 80094c2:	665a      	str	r2, [r3, #100]	; 0x64
	fan7Menu[2].maxVal2 = 30;
 80094c4:	4b7e      	ldr	r3, [pc, #504]	; (80096c0 <MENU_Fill+0xce8>)
 80094c6:	221e      	movs	r2, #30
 80094c8:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	fan7Menu[2].value3 = 7;
 80094cc:	4b7c      	ldr	r3, [pc, #496]	; (80096c0 <MENU_Fill+0xce8>)
 80094ce:	2207      	movs	r2, #7
 80094d0:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

	fan7Menu[3].name = "Stage4";
 80094d4:	4b7a      	ldr	r3, [pc, #488]	; (80096c0 <MENU_Fill+0xce8>)
 80094d6:	4a84      	ldr	r2, [pc, #528]	; (80096e8 <MENU_Fill+0xd10>)
 80094d8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	fan7Menu[3].type = MENU_TYPE_TREE_COLUMN;
 80094dc:	4b78      	ldr	r3, [pc, #480]	; (80096c0 <MENU_Fill+0xce8>)
 80094de:	2202      	movs	r2, #2
 80094e0:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
	fan7Menu[3].value = &ProgramForFun[6].modeNumber4;
 80094e4:	4b76      	ldr	r3, [pc, #472]	; (80096c0 <MENU_Fill+0xce8>)
 80094e6:	4a81      	ldr	r2, [pc, #516]	; (80096ec <MENU_Fill+0xd14>)
 80094e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	fan7Menu[3].maxVal = 3;
 80094ec:	4b74      	ldr	r3, [pc, #464]	; (80096c0 <MENU_Fill+0xce8>)
 80094ee:	2203      	movs	r2, #3
 80094f0:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
	fan7Menu[3].value2 = &ProgramForFun[6].numberOfDays4;
 80094f4:	4b72      	ldr	r3, [pc, #456]	; (80096c0 <MENU_Fill+0xce8>)
 80094f6:	4a7e      	ldr	r2, [pc, #504]	; (80096f0 <MENU_Fill+0xd18>)
 80094f8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	fan7Menu[3].maxVal2 = 30;
 80094fc:	4b70      	ldr	r3, [pc, #448]	; (80096c0 <MENU_Fill+0xce8>)
 80094fe:	221e      	movs	r2, #30
 8009500:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
	fan7Menu[3].value3 = 7;
 8009504:	4b6e      	ldr	r3, [pc, #440]	; (80096c0 <MENU_Fill+0xce8>)
 8009506:	2207      	movs	r2, #7
 8009508:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95

	fan7Menu[4].name = "Set start day";
 800950c:	4b6c      	ldr	r3, [pc, #432]	; (80096c0 <MENU_Fill+0xce8>)
 800950e:	4a79      	ldr	r2, [pc, #484]	; (80096f4 <MENU_Fill+0xd1c>)
 8009510:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	fan7Menu[4].maxVal = 6;  //maxVal - соответствует номеру вентилятора
 8009514:	4b6a      	ldr	r3, [pc, #424]	; (80096c0 <MENU_Fill+0xce8>)
 8009516:	2206      	movs	r2, #6
 8009518:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	fan7Menu[4].function = FANS_UpdateFirstDay;
 800951c:	4b68      	ldr	r3, [pc, #416]	; (80096c0 <MENU_Fill+0xce8>)
 800951e:	4a5f      	ldr	r2, [pc, #380]	; (800969c <MENU_Fill+0xcc4>)
 8009520:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	fan7Menu[4].enter = &fan7Menu[4];
 8009524:	4b66      	ldr	r3, [pc, #408]	; (80096c0 <MENU_Fill+0xce8>)
 8009526:	4a74      	ldr	r2, [pc, #464]	; (80096f8 <MENU_Fill+0xd20>)
 8009528:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	fan7Menu[4].value3 = 7;
 800952c:	4b64      	ldr	r3, [pc, #400]	; (80096c0 <MENU_Fill+0xce8>)
 800952e:	2207      	movs	r2, #7
 8009530:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

	fan7Menu[5].name = "ON/OFF";
 8009534:	4b62      	ldr	r3, [pc, #392]	; (80096c0 <MENU_Fill+0xce8>)
 8009536:	4a5b      	ldr	r2, [pc, #364]	; (80096a4 <MENU_Fill+0xccc>)
 8009538:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	fan7Menu[5].function = FANS_Toggle;
 800953c:	4b60      	ldr	r3, [pc, #384]	; (80096c0 <MENU_Fill+0xce8>)
 800953e:	4a5a      	ldr	r2, [pc, #360]	; (80096a8 <MENU_Fill+0xcd0>)
 8009540:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	fan7Menu[5].enter = &fan7Menu[5];
 8009544:	4b5e      	ldr	r3, [pc, #376]	; (80096c0 <MENU_Fill+0xce8>)
 8009546:	4a6d      	ldr	r2, [pc, #436]	; (80096fc <MENU_Fill+0xd24>)
 8009548:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	fan7Menu[5].value3 = 7;
 800954c:	4b5c      	ldr	r3, [pc, #368]	; (80096c0 <MENU_Fill+0xce8>)
 800954e:	2207      	movs	r2, #7
 8009550:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed

	fan7Menu[6].name = "Save and Back";
 8009554:	4b5a      	ldr	r3, [pc, #360]	; (80096c0 <MENU_Fill+0xce8>)
 8009556:	4a56      	ldr	r2, [pc, #344]	; (80096b0 <MENU_Fill+0xcd8>)
 8009558:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
	fan7Menu[6].function = FANS_FillProgram;
 800955c:	4b58      	ldr	r3, [pc, #352]	; (80096c0 <MENU_Fill+0xce8>)
 800955e:	4a55      	ldr	r2, [pc, #340]	; (80096b4 <MENU_Fill+0xcdc>)
 8009560:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
	fan7Menu[6].enter = &mainMenu[6];
 8009564:	4b56      	ldr	r3, [pc, #344]	; (80096c0 <MENU_Fill+0xce8>)
 8009566:	4a66      	ldr	r2, [pc, #408]	; (8009700 <MENU_Fill+0xd28>)
 8009568:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
	fan7Menu[6].value3 = 7;
 800956c:	4b54      	ldr	r3, [pc, #336]	; (80096c0 <MENU_Fill+0xce8>)
 800956e:	2207      	movs	r2, #7
 8009570:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119

	//fan8 menu
	MENU_FillSection(fan8Menu, FAN_MENU_SIZE, "Fan8  ModeN DaysC");
 8009574:	4a63      	ldr	r2, [pc, #396]	; (8009704 <MENU_Fill+0xd2c>)
 8009576:	2107      	movs	r1, #7
 8009578:	4863      	ldr	r0, [pc, #396]	; (8009708 <MENU_Fill+0xd30>)
 800957a:	f000 fccd 	bl	8009f18 <MENU_FillSection>

	fan8Menu[0].name = "Stage1";
 800957e:	4b62      	ldr	r3, [pc, #392]	; (8009708 <MENU_Fill+0xd30>)
 8009580:	4a50      	ldr	r2, [pc, #320]	; (80096c4 <MENU_Fill+0xcec>)
 8009582:	615a      	str	r2, [r3, #20]
	fan8Menu[0].type = MENU_TYPE_TREE_COLUMN;
 8009584:	4b60      	ldr	r3, [pc, #384]	; (8009708 <MENU_Fill+0xd30>)
 8009586:	2202      	movs	r2, #2
 8009588:	705a      	strb	r2, [r3, #1]
	fan8Menu[0].value = &ProgramForFun[7].modeNumber1;
 800958a:	4b5f      	ldr	r3, [pc, #380]	; (8009708 <MENU_Fill+0xd30>)
 800958c:	4a5f      	ldr	r2, [pc, #380]	; (800970c <MENU_Fill+0xd34>)
 800958e:	605a      	str	r2, [r3, #4]
	fan8Menu[0].maxVal = 3;
 8009590:	4b5d      	ldr	r3, [pc, #372]	; (8009708 <MENU_Fill+0xd30>)
 8009592:	2203      	movs	r2, #3
 8009594:	721a      	strb	r2, [r3, #8]
	fan8Menu[0].value2 = &ProgramForFun[7].numberOfDays1;
 8009596:	4b5c      	ldr	r3, [pc, #368]	; (8009708 <MENU_Fill+0xd30>)
 8009598:	4a5d      	ldr	r2, [pc, #372]	; (8009710 <MENU_Fill+0xd38>)
 800959a:	60da      	str	r2, [r3, #12]
	fan8Menu[0].maxVal2 = 30;
 800959c:	4b5a      	ldr	r3, [pc, #360]	; (8009708 <MENU_Fill+0xd30>)
 800959e:	221e      	movs	r2, #30
 80095a0:	741a      	strb	r2, [r3, #16]
	fan8Menu[0].value3 = 8;
 80095a2:	4b59      	ldr	r3, [pc, #356]	; (8009708 <MENU_Fill+0xd30>)
 80095a4:	2208      	movs	r2, #8
 80095a6:	745a      	strb	r2, [r3, #17]

	fan8Menu[1].name = "Stage2";
 80095a8:	4b57      	ldr	r3, [pc, #348]	; (8009708 <MENU_Fill+0xd30>)
 80095aa:	4a49      	ldr	r2, [pc, #292]	; (80096d0 <MENU_Fill+0xcf8>)
 80095ac:	641a      	str	r2, [r3, #64]	; 0x40
	fan8Menu[1].type = MENU_TYPE_TREE_COLUMN;
 80095ae:	4b56      	ldr	r3, [pc, #344]	; (8009708 <MENU_Fill+0xd30>)
 80095b0:	2202      	movs	r2, #2
 80095b2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	fan8Menu[1].value = &ProgramForFun[7].modeNumber2;
 80095b6:	4b54      	ldr	r3, [pc, #336]	; (8009708 <MENU_Fill+0xd30>)
 80095b8:	4a56      	ldr	r2, [pc, #344]	; (8009714 <MENU_Fill+0xd3c>)
 80095ba:	631a      	str	r2, [r3, #48]	; 0x30
	fan8Menu[1].maxVal = 3;
 80095bc:	4b52      	ldr	r3, [pc, #328]	; (8009708 <MENU_Fill+0xd30>)
 80095be:	2203      	movs	r2, #3
 80095c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	fan8Menu[1].value2 = &ProgramForFun[7].numberOfDays2;
 80095c4:	4b50      	ldr	r3, [pc, #320]	; (8009708 <MENU_Fill+0xd30>)
 80095c6:	4a54      	ldr	r2, [pc, #336]	; (8009718 <MENU_Fill+0xd40>)
 80095c8:	639a      	str	r2, [r3, #56]	; 0x38
	fan8Menu[1].maxVal2 = 30;
 80095ca:	4b4f      	ldr	r3, [pc, #316]	; (8009708 <MENU_Fill+0xd30>)
 80095cc:	221e      	movs	r2, #30
 80095ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	fan8Menu[1].value3 = 8;
 80095d2:	4b4d      	ldr	r3, [pc, #308]	; (8009708 <MENU_Fill+0xd30>)
 80095d4:	2208      	movs	r2, #8
 80095d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	fan8Menu[2].name = "Stage3";
 80095da:	4b4b      	ldr	r3, [pc, #300]	; (8009708 <MENU_Fill+0xd30>)
 80095dc:	4a3f      	ldr	r2, [pc, #252]	; (80096dc <MENU_Fill+0xd04>)
 80095de:	66da      	str	r2, [r3, #108]	; 0x6c
	fan8Menu[2].type = MENU_TYPE_TREE_COLUMN;
 80095e0:	4b49      	ldr	r3, [pc, #292]	; (8009708 <MENU_Fill+0xd30>)
 80095e2:	2202      	movs	r2, #2
 80095e4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	fan8Menu[2].value = &ProgramForFun[7].modeNumber3;
 80095e8:	4b47      	ldr	r3, [pc, #284]	; (8009708 <MENU_Fill+0xd30>)
 80095ea:	4a4c      	ldr	r2, [pc, #304]	; (800971c <MENU_Fill+0xd44>)
 80095ec:	65da      	str	r2, [r3, #92]	; 0x5c
	fan8Menu[2].maxVal = 3;
 80095ee:	4b46      	ldr	r3, [pc, #280]	; (8009708 <MENU_Fill+0xd30>)
 80095f0:	2203      	movs	r2, #3
 80095f2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	fan8Menu[2].value2 = &ProgramForFun[7].numberOfDays3;
 80095f6:	4b44      	ldr	r3, [pc, #272]	; (8009708 <MENU_Fill+0xd30>)
 80095f8:	4a49      	ldr	r2, [pc, #292]	; (8009720 <MENU_Fill+0xd48>)
 80095fa:	665a      	str	r2, [r3, #100]	; 0x64
	fan8Menu[2].maxVal2 = 30;
 80095fc:	4b42      	ldr	r3, [pc, #264]	; (8009708 <MENU_Fill+0xd30>)
 80095fe:	221e      	movs	r2, #30
 8009600:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	fan8Menu[2].value3 = 8;
 8009604:	4b40      	ldr	r3, [pc, #256]	; (8009708 <MENU_Fill+0xd30>)
 8009606:	2208      	movs	r2, #8
 8009608:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

	fan8Menu[3].name = "Stage4";
 800960c:	4b3e      	ldr	r3, [pc, #248]	; (8009708 <MENU_Fill+0xd30>)
 800960e:	4a36      	ldr	r2, [pc, #216]	; (80096e8 <MENU_Fill+0xd10>)
 8009610:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	fan8Menu[3].type = MENU_TYPE_TREE_COLUMN;
 8009614:	4b3c      	ldr	r3, [pc, #240]	; (8009708 <MENU_Fill+0xd30>)
 8009616:	2202      	movs	r2, #2
 8009618:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
	fan8Menu[3].value = &ProgramForFun[7].modeNumber4;
 800961c:	4b3a      	ldr	r3, [pc, #232]	; (8009708 <MENU_Fill+0xd30>)
 800961e:	4a41      	ldr	r2, [pc, #260]	; (8009724 <MENU_Fill+0xd4c>)
 8009620:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	fan8Menu[3].maxVal = 3;
 8009624:	4b38      	ldr	r3, [pc, #224]	; (8009708 <MENU_Fill+0xd30>)
 8009626:	2203      	movs	r2, #3
 8009628:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
	fan8Menu[3].value2 = &ProgramForFun[7].numberOfDays4;
 800962c:	4b36      	ldr	r3, [pc, #216]	; (8009708 <MENU_Fill+0xd30>)
 800962e:	4a3e      	ldr	r2, [pc, #248]	; (8009728 <MENU_Fill+0xd50>)
 8009630:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	fan8Menu[3].maxVal2 = 30;
 8009634:	4b34      	ldr	r3, [pc, #208]	; (8009708 <MENU_Fill+0xd30>)
 8009636:	221e      	movs	r2, #30
 8009638:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
	fan8Menu[3].value3 = 8;
 800963c:	4b32      	ldr	r3, [pc, #200]	; (8009708 <MENU_Fill+0xd30>)
 800963e:	2208      	movs	r2, #8
 8009640:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95

	fan8Menu[4].name = "Set start day";
 8009644:	4b30      	ldr	r3, [pc, #192]	; (8009708 <MENU_Fill+0xd30>)
 8009646:	4a2b      	ldr	r2, [pc, #172]	; (80096f4 <MENU_Fill+0xd1c>)
 8009648:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	fan8Menu[4].maxVal = 7;  //maxVal - соответствует номеру вентилятора
 800964c:	4b2e      	ldr	r3, [pc, #184]	; (8009708 <MENU_Fill+0xd30>)
 800964e:	2207      	movs	r2, #7
 8009650:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	fan8Menu[4].function = FANS_UpdateFirstDay;
 8009654:	4b2c      	ldr	r3, [pc, #176]	; (8009708 <MENU_Fill+0xd30>)
 8009656:	4a11      	ldr	r2, [pc, #68]	; (800969c <MENU_Fill+0xcc4>)
 8009658:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	fan8Menu[4].enter = &fan8Menu[4];
 800965c:	4b2a      	ldr	r3, [pc, #168]	; (8009708 <MENU_Fill+0xd30>)
 800965e:	4a33      	ldr	r2, [pc, #204]	; (800972c <MENU_Fill+0xd54>)
 8009660:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	fan8Menu[4].value3 = 8;
 8009664:	4b28      	ldr	r3, [pc, #160]	; (8009708 <MENU_Fill+0xd30>)
 8009666:	2208      	movs	r2, #8
 8009668:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

	fan8Menu[5].name = "ON/OFF";
 800966c:	4b26      	ldr	r3, [pc, #152]	; (8009708 <MENU_Fill+0xd30>)
 800966e:	4a0d      	ldr	r2, [pc, #52]	; (80096a4 <MENU_Fill+0xccc>)
 8009670:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	fan8Menu[5].function = FANS_Toggle;
 8009674:	4b24      	ldr	r3, [pc, #144]	; (8009708 <MENU_Fill+0xd30>)
 8009676:	4a0c      	ldr	r2, [pc, #48]	; (80096a8 <MENU_Fill+0xcd0>)
 8009678:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	fan8Menu[5].enter = &fan8Menu[5];
 800967c:	4b22      	ldr	r3, [pc, #136]	; (8009708 <MENU_Fill+0xd30>)
 800967e:	4a2c      	ldr	r2, [pc, #176]	; (8009730 <MENU_Fill+0xd58>)
 8009680:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	fan8Menu[5].value3 = 8;
 8009684:	4b20      	ldr	r3, [pc, #128]	; (8009708 <MENU_Fill+0xd30>)
 8009686:	2208      	movs	r2, #8
 8009688:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed

	fan8Menu[6].name = "Save and Back";
 800968c:	4b1e      	ldr	r3, [pc, #120]	; (8009708 <MENU_Fill+0xd30>)
 800968e:	4a08      	ldr	r2, [pc, #32]	; (80096b0 <MENU_Fill+0xcd8>)
 8009690:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
	fan8Menu[6].function = FANS_FillProgram;
 8009694:	4b1c      	ldr	r3, [pc, #112]	; (8009708 <MENU_Fill+0xd30>)
 8009696:	e04d      	b.n	8009734 <MENU_Fill+0xd5c>
 8009698:	20001f08 	.word	0x20001f08
 800969c:	080051b9 	.word	0x080051b9
 80096a0:	20001fb8 	.word	0x20001fb8
 80096a4:	0800ae20 	.word	0x0800ae20
 80096a8:	08005169 	.word	0x08005169
 80096ac:	20001fe4 	.word	0x20001fe4
 80096b0:	0800ae28 	.word	0x0800ae28
 80096b4:	08005229 	.word	0x08005229
 80096b8:	20002430 	.word	0x20002430
 80096bc:	0800ae9c 	.word	0x0800ae9c
 80096c0:	20001b6c 	.word	0x20001b6c
 80096c4:	0800adf0 	.word	0x0800adf0
 80096c8:	200016b2 	.word	0x200016b2
 80096cc:	200016b3 	.word	0x200016b3
 80096d0:	0800adf8 	.word	0x0800adf8
 80096d4:	200016b4 	.word	0x200016b4
 80096d8:	200016b5 	.word	0x200016b5
 80096dc:	0800ae00 	.word	0x0800ae00
 80096e0:	200016b6 	.word	0x200016b6
 80096e4:	200016b7 	.word	0x200016b7
 80096e8:	0800ae08 	.word	0x0800ae08
 80096ec:	200016b8 	.word	0x200016b8
 80096f0:	200016b9 	.word	0x200016b9
 80096f4:	0800ae10 	.word	0x0800ae10
 80096f8:	20001c1c 	.word	0x20001c1c
 80096fc:	20001c48 	.word	0x20001c48
 8009700:	2000245c 	.word	0x2000245c
 8009704:	0800aeb0 	.word	0x0800aeb0
 8009708:	20002774 	.word	0x20002774
 800970c:	20001738 	.word	0x20001738
 8009710:	20001739 	.word	0x20001739
 8009714:	2000173a 	.word	0x2000173a
 8009718:	2000173b 	.word	0x2000173b
 800971c:	2000173c 	.word	0x2000173c
 8009720:	2000173d 	.word	0x2000173d
 8009724:	2000173e 	.word	0x2000173e
 8009728:	2000173f 	.word	0x2000173f
 800972c:	20002824 	.word	0x20002824
 8009730:	20002850 	.word	0x20002850
 8009734:	4a99      	ldr	r2, [pc, #612]	; (800999c <MENU_Fill+0xfc4>)
 8009736:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
	fan8Menu[6].enter = &mainMenu[7];
 800973a:	4b99      	ldr	r3, [pc, #612]	; (80099a0 <MENU_Fill+0xfc8>)
 800973c:	4a99      	ldr	r2, [pc, #612]	; (80099a4 <MENU_Fill+0xfcc>)
 800973e:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
	fan8Menu[6].value3 = 8;
 8009742:	4b97      	ldr	r3, [pc, #604]	; (80099a0 <MENU_Fill+0xfc8>)
 8009744:	2208      	movs	r2, #8
 8009746:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119

	//Setting
	MENU_FillSection(setting, SETTING_MENU_SIZE, "Setting");
 800974a:	4a97      	ldr	r2, [pc, #604]	; (80099a8 <MENU_Fill+0xfd0>)
 800974c:	2108      	movs	r1, #8
 800974e:	4897      	ldr	r0, [pc, #604]	; (80099ac <MENU_Fill+0xfd4>)
 8009750:	f000 fbe2 	bl	8009f18 <MENU_FillSection>

	setting[0].name = "Time";
 8009754:	4b95      	ldr	r3, [pc, #596]	; (80099ac <MENU_Fill+0xfd4>)
 8009756:	4a96      	ldr	r2, [pc, #600]	; (80099b0 <MENU_Fill+0xfd8>)
 8009758:	615a      	str	r2, [r3, #20]
	setting[0].enter = &time[0];
 800975a:	4b94      	ldr	r3, [pc, #592]	; (80099ac <MENU_Fill+0xfd4>)
 800975c:	4a95      	ldr	r2, [pc, #596]	; (80099b4 <MENU_Fill+0xfdc>)
 800975e:	625a      	str	r2, [r3, #36]	; 0x24
	setting[0].function = DISPLAY_GoesToAndFillTime;
 8009760:	4b92      	ldr	r3, [pc, #584]	; (80099ac <MENU_Fill+0xfd4>)
 8009762:	4a95      	ldr	r2, [pc, #596]	; (80099b8 <MENU_Fill+0xfe0>)
 8009764:	629a      	str	r2, [r3, #40]	; 0x28

	setting[1].name = "Date";
 8009766:	4b91      	ldr	r3, [pc, #580]	; (80099ac <MENU_Fill+0xfd4>)
 8009768:	4a94      	ldr	r2, [pc, #592]	; (80099bc <MENU_Fill+0xfe4>)
 800976a:	641a      	str	r2, [r3, #64]	; 0x40
	setting[1].enter = &date[0];
 800976c:	4b8f      	ldr	r3, [pc, #572]	; (80099ac <MENU_Fill+0xfd4>)
 800976e:	4a94      	ldr	r2, [pc, #592]	; (80099c0 <MENU_Fill+0xfe8>)
 8009770:	651a      	str	r2, [r3, #80]	; 0x50
	setting[1].function = DISPLAY_GoesToAndFillDate;
 8009772:	4b8e      	ldr	r3, [pc, #568]	; (80099ac <MENU_Fill+0xfd4>)
 8009774:	4a93      	ldr	r2, [pc, #588]	; (80099c4 <MENU_Fill+0xfec>)
 8009776:	655a      	str	r2, [r3, #84]	; 0x54

	setting[2].name = "Start day time";
 8009778:	4b8c      	ldr	r3, [pc, #560]	; (80099ac <MENU_Fill+0xfd4>)
 800977a:	4a93      	ldr	r2, [pc, #588]	; (80099c8 <MENU_Fill+0xff0>)
 800977c:	66da      	str	r2, [r3, #108]	; 0x6c
	setting[2].enter = &startDay[0];
 800977e:	4b8b      	ldr	r3, [pc, #556]	; (80099ac <MENU_Fill+0xfd4>)
 8009780:	4a92      	ldr	r2, [pc, #584]	; (80099cc <MENU_Fill+0xff4>)
 8009782:	67da      	str	r2, [r3, #124]	; 0x7c
	setting[2].function = DISPLAY_GoesToAndFillStartDay;
 8009784:	4b89      	ldr	r3, [pc, #548]	; (80099ac <MENU_Fill+0xfd4>)
 8009786:	4a92      	ldr	r2, [pc, #584]	; (80099d0 <MENU_Fill+0xff8>)
 8009788:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

	setting[3].name = "End day time";
 800978c:	4b87      	ldr	r3, [pc, #540]	; (80099ac <MENU_Fill+0xfd4>)
 800978e:	4a91      	ldr	r2, [pc, #580]	; (80099d4 <MENU_Fill+0xffc>)
 8009790:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	setting[3].enter = &endDay[0];
 8009794:	4b85      	ldr	r3, [pc, #532]	; (80099ac <MENU_Fill+0xfd4>)
 8009796:	4a90      	ldr	r2, [pc, #576]	; (80099d8 <MENU_Fill+0x1000>)
 8009798:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	setting[3].function = DISPLAY_GoesToAndFillEndDay;
 800979c:	4b83      	ldr	r3, [pc, #524]	; (80099ac <MENU_Fill+0xfd4>)
 800979e:	4a8f      	ldr	r2, [pc, #572]	; (80099dc <MENU_Fill+0x1004>)
 80097a0:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

	setting[4].name = "Switching period";
 80097a4:	4b81      	ldr	r3, [pc, #516]	; (80099ac <MENU_Fill+0xfd4>)
 80097a6:	4a8e      	ldr	r2, [pc, #568]	; (80099e0 <MENU_Fill+0x1008>)
 80097a8:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	setting[4].function = DISPLAY_GoesTo;
 80097ac:	4b7f      	ldr	r3, [pc, #508]	; (80099ac <MENU_Fill+0xfd4>)
 80097ae:	4a8d      	ldr	r2, [pc, #564]	; (80099e4 <MENU_Fill+0x100c>)
 80097b0:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	setting[4].enter = &periodT[0];
 80097b4:	4b7d      	ldr	r3, [pc, #500]	; (80099ac <MENU_Fill+0xfd4>)
 80097b6:	4a8c      	ldr	r2, [pc, #560]	; (80099e8 <MENU_Fill+0x1010>)
 80097b8:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	setting[5].name = "Modes";
 80097bc:	4b7b      	ldr	r3, [pc, #492]	; (80099ac <MENU_Fill+0xfd4>)
 80097be:	4a8b      	ldr	r2, [pc, #556]	; (80099ec <MENU_Fill+0x1014>)
 80097c0:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	setting[5].enter = &modeDay[0];
 80097c4:	4b79      	ldr	r3, [pc, #484]	; (80099ac <MENU_Fill+0xfd4>)
 80097c6:	4a8a      	ldr	r2, [pc, #552]	; (80099f0 <MENU_Fill+0x1018>)
 80097c8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	setting[5].function = DISPLAY_GoesTo;
 80097cc:	4b77      	ldr	r3, [pc, #476]	; (80099ac <MENU_Fill+0xfd4>)
 80097ce:	4a85      	ldr	r2, [pc, #532]	; (80099e4 <MENU_Fill+0x100c>)
 80097d0:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

	setting[6].name = "Reset all data";
 80097d4:	4b75      	ldr	r3, [pc, #468]	; (80099ac <MENU_Fill+0xfd4>)
 80097d6:	4a87      	ldr	r2, [pc, #540]	; (80099f4 <MENU_Fill+0x101c>)
 80097d8:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
	setting[6].enter = &areYouSure[0];
 80097dc:	4b73      	ldr	r3, [pc, #460]	; (80099ac <MENU_Fill+0xfd4>)
 80097de:	4a86      	ldr	r2, [pc, #536]	; (80099f8 <MENU_Fill+0x1020>)
 80097e0:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
	setting[6].function = DISPLAY_GoesTo;
 80097e4:	4b71      	ldr	r3, [pc, #452]	; (80099ac <MENU_Fill+0xfd4>)
 80097e6:	4a7f      	ldr	r2, [pc, #508]	; (80099e4 <MENU_Fill+0x100c>)
 80097e8:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130

	setting[7].name = "Back";
 80097ec:	4b6f      	ldr	r3, [pc, #444]	; (80099ac <MENU_Fill+0xfd4>)
 80097ee:	4a83      	ldr	r2, [pc, #524]	; (80099fc <MENU_Fill+0x1024>)
 80097f0:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
	setting[7].function = DISPLAY_GoesTo;
 80097f4:	4b6d      	ldr	r3, [pc, #436]	; (80099ac <MENU_Fill+0xfd4>)
 80097f6:	4a7b      	ldr	r2, [pc, #492]	; (80099e4 <MENU_Fill+0x100c>)
 80097f8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
	setting[7].enter = &mainMenu[8];
 80097fc:	4b6b      	ldr	r3, [pc, #428]	; (80099ac <MENU_Fill+0xfd4>)
 80097fe:	4a80      	ldr	r2, [pc, #512]	; (8009a00 <MENU_Fill+0x1028>)
 8009800:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

	MENU_FillSection(areYouSure, CONFIRMATION_MENU_SIZE, "Are you sure?");
 8009804:	4a7f      	ldr	r2, [pc, #508]	; (8009a04 <MENU_Fill+0x102c>)
 8009806:	2103      	movs	r1, #3
 8009808:	487b      	ldr	r0, [pc, #492]	; (80099f8 <MENU_Fill+0x1020>)
 800980a:	f000 fb85 	bl	8009f18 <MENU_FillSection>

	areYouSure[0].name = "Yes and back";
 800980e:	4b7a      	ldr	r3, [pc, #488]	; (80099f8 <MENU_Fill+0x1020>)
 8009810:	4a7d      	ldr	r2, [pc, #500]	; (8009a08 <MENU_Fill+0x1030>)
 8009812:	615a      	str	r2, [r3, #20]
	areYouSure[0].function = FANS_ResetSettings;
 8009814:	4b78      	ldr	r3, [pc, #480]	; (80099f8 <MENU_Fill+0x1020>)
 8009816:	4a7d      	ldr	r2, [pc, #500]	; (8009a0c <MENU_Fill+0x1034>)
 8009818:	629a      	str	r2, [r3, #40]	; 0x28
	areYouSure[0].enter = &setting[6];
 800981a:	4b77      	ldr	r3, [pc, #476]	; (80099f8 <MENU_Fill+0x1020>)
 800981c:	4a7c      	ldr	r2, [pc, #496]	; (8009a10 <MENU_Fill+0x1038>)
 800981e:	625a      	str	r2, [r3, #36]	; 0x24

	areYouSure[1].name = "No and back";
 8009820:	4b75      	ldr	r3, [pc, #468]	; (80099f8 <MENU_Fill+0x1020>)
 8009822:	4a7c      	ldr	r2, [pc, #496]	; (8009a14 <MENU_Fill+0x103c>)
 8009824:	641a      	str	r2, [r3, #64]	; 0x40
	areYouSure[1].function = DISPLAY_GoesTo;
 8009826:	4b74      	ldr	r3, [pc, #464]	; (80099f8 <MENU_Fill+0x1020>)
 8009828:	4a6e      	ldr	r2, [pc, #440]	; (80099e4 <MENU_Fill+0x100c>)
 800982a:	655a      	str	r2, [r3, #84]	; 0x54
	areYouSure[1].enter = &setting[6];
 800982c:	4b72      	ldr	r3, [pc, #456]	; (80099f8 <MENU_Fill+0x1020>)
 800982e:	4a78      	ldr	r2, [pc, #480]	; (8009a10 <MENU_Fill+0x1038>)
 8009830:	651a      	str	r2, [r3, #80]	; 0x50

	areYouSure[2].name = "";
 8009832:	4b71      	ldr	r3, [pc, #452]	; (80099f8 <MENU_Fill+0x1020>)
 8009834:	4a78      	ldr	r2, [pc, #480]	; (8009a18 <MENU_Fill+0x1040>)
 8009836:	66da      	str	r2, [r3, #108]	; 0x6c
	areYouSure[2].function = DISPLAY_GoesTo;
 8009838:	4b6f      	ldr	r3, [pc, #444]	; (80099f8 <MENU_Fill+0x1020>)
 800983a:	4a6a      	ldr	r2, [pc, #424]	; (80099e4 <MENU_Fill+0x100c>)
 800983c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	areYouSure[2].enter = &areYouSure[1];
 8009840:	4b6d      	ldr	r3, [pc, #436]	; (80099f8 <MENU_Fill+0x1020>)
 8009842:	4a76      	ldr	r2, [pc, #472]	; (8009a1c <MENU_Fill+0x1044>)
 8009844:	67da      	str	r2, [r3, #124]	; 0x7c

	MENU_FillSection(periodT, PERIOD_MENU_SIZE, "Switching period"); //number of second to switch speed fan between lowDay and HighDay
 8009846:	4a66      	ldr	r2, [pc, #408]	; (80099e0 <MENU_Fill+0x1008>)
 8009848:	2103      	movs	r1, #3
 800984a:	4867      	ldr	r0, [pc, #412]	; (80099e8 <MENU_Fill+0x1010>)
 800984c:	f000 fb64 	bl	8009f18 <MENU_FillSection>

	periodT[0].name = "Sec";
 8009850:	4b65      	ldr	r3, [pc, #404]	; (80099e8 <MENU_Fill+0x1010>)
 8009852:	4a73      	ldr	r2, [pc, #460]	; (8009a20 <MENU_Fill+0x1048>)
 8009854:	615a      	str	r2, [r3, #20]
	periodT[0].value = &g_switchingPeriod;
 8009856:	4b64      	ldr	r3, [pc, #400]	; (80099e8 <MENU_Fill+0x1010>)
 8009858:	4a72      	ldr	r2, [pc, #456]	; (8009a24 <MENU_Fill+0x104c>)
 800985a:	605a      	str	r2, [r3, #4]
	periodT[0].maxVal = 60;
 800985c:	4b62      	ldr	r3, [pc, #392]	; (80099e8 <MENU_Fill+0x1010>)
 800985e:	223c      	movs	r2, #60	; 0x3c
 8009860:	721a      	strb	r2, [r3, #8]
	periodT[0].minVal = 1;
 8009862:	4b61      	ldr	r3, [pc, #388]	; (80099e8 <MENU_Fill+0x1010>)
 8009864:	2201      	movs	r2, #1
 8009866:	725a      	strb	r2, [r3, #9]
	periodT[0].type = MENU_TYPE_TWO_COLUMN;
 8009868:	4b5f      	ldr	r3, [pc, #380]	; (80099e8 <MENU_Fill+0x1010>)
 800986a:	2201      	movs	r2, #1
 800986c:	705a      	strb	r2, [r3, #1]

	periodT[1].name = "Save";
 800986e:	4b5e      	ldr	r3, [pc, #376]	; (80099e8 <MENU_Fill+0x1010>)
 8009870:	4a6d      	ldr	r2, [pc, #436]	; (8009a28 <MENU_Fill+0x1050>)
 8009872:	641a      	str	r2, [r3, #64]	; 0x40
	periodT[1].function = FANS_SetPeriod;
 8009874:	4b5c      	ldr	r3, [pc, #368]	; (80099e8 <MENU_Fill+0x1010>)
 8009876:	4a6d      	ldr	r2, [pc, #436]	; (8009a2c <MENU_Fill+0x1054>)
 8009878:	655a      	str	r2, [r3, #84]	; 0x54
	periodT[1].enter = &periodT[2];
 800987a:	4b5b      	ldr	r3, [pc, #364]	; (80099e8 <MENU_Fill+0x1010>)
 800987c:	4a6c      	ldr	r2, [pc, #432]	; (8009a30 <MENU_Fill+0x1058>)
 800987e:	651a      	str	r2, [r3, #80]	; 0x50

	periodT[2].name = "Back";
 8009880:	4b59      	ldr	r3, [pc, #356]	; (80099e8 <MENU_Fill+0x1010>)
 8009882:	4a5e      	ldr	r2, [pc, #376]	; (80099fc <MENU_Fill+0x1024>)
 8009884:	66da      	str	r2, [r3, #108]	; 0x6c
	periodT[2].function = DISPLAY_GoesTo;
 8009886:	4b58      	ldr	r3, [pc, #352]	; (80099e8 <MENU_Fill+0x1010>)
 8009888:	4a56      	ldr	r2, [pc, #344]	; (80099e4 <MENU_Fill+0x100c>)
 800988a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	periodT[2].enter = &setting[4];
 800988e:	4b56      	ldr	r3, [pc, #344]	; (80099e8 <MENU_Fill+0x1010>)
 8009890:	4a68      	ldr	r2, [pc, #416]	; (8009a34 <MENU_Fill+0x105c>)
 8009892:	67da      	str	r2, [r3, #124]	; 0x7c

	MENU_FillSection(modeDay, MODE_DAY_MENU_SIZE, "Modes day");
 8009894:	4a68      	ldr	r2, [pc, #416]	; (8009a38 <MENU_Fill+0x1060>)
 8009896:	2105      	movs	r1, #5
 8009898:	4855      	ldr	r0, [pc, #340]	; (80099f0 <MENU_Fill+0x1018>)
 800989a:	f000 fb3d 	bl	8009f18 <MENU_FillSection>

	modeDay[0].name = "mode 0";
 800989e:	4b54      	ldr	r3, [pc, #336]	; (80099f0 <MENU_Fill+0x1018>)
 80098a0:	4a66      	ldr	r2, [pc, #408]	; (8009a3c <MENU_Fill+0x1064>)
 80098a2:	615a      	str	r2, [r3, #20]
	modeDay[0].function = DISPLAY_GoesTo;
 80098a4:	4b52      	ldr	r3, [pc, #328]	; (80099f0 <MENU_Fill+0x1018>)
 80098a6:	4a4f      	ldr	r2, [pc, #316]	; (80099e4 <MENU_Fill+0x100c>)
 80098a8:	629a      	str	r2, [r3, #40]	; 0x28
	modeDay[0].enter = &mode0[0];
 80098aa:	4b51      	ldr	r3, [pc, #324]	; (80099f0 <MENU_Fill+0x1018>)
 80098ac:	4a64      	ldr	r2, [pc, #400]	; (8009a40 <MENU_Fill+0x1068>)
 80098ae:	625a      	str	r2, [r3, #36]	; 0x24

	modeDay[1].name = "mode 1";
 80098b0:	4b4f      	ldr	r3, [pc, #316]	; (80099f0 <MENU_Fill+0x1018>)
 80098b2:	4a64      	ldr	r2, [pc, #400]	; (8009a44 <MENU_Fill+0x106c>)
 80098b4:	641a      	str	r2, [r3, #64]	; 0x40
	modeDay[1].function = DISPLAY_GoesTo;
 80098b6:	4b4e      	ldr	r3, [pc, #312]	; (80099f0 <MENU_Fill+0x1018>)
 80098b8:	4a4a      	ldr	r2, [pc, #296]	; (80099e4 <MENU_Fill+0x100c>)
 80098ba:	655a      	str	r2, [r3, #84]	; 0x54
	modeDay[1].enter = &mode1[0];
 80098bc:	4b4c      	ldr	r3, [pc, #304]	; (80099f0 <MENU_Fill+0x1018>)
 80098be:	4a62      	ldr	r2, [pc, #392]	; (8009a48 <MENU_Fill+0x1070>)
 80098c0:	651a      	str	r2, [r3, #80]	; 0x50

	modeDay[2].name = "mode 2";
 80098c2:	4b4b      	ldr	r3, [pc, #300]	; (80099f0 <MENU_Fill+0x1018>)
 80098c4:	4a61      	ldr	r2, [pc, #388]	; (8009a4c <MENU_Fill+0x1074>)
 80098c6:	66da      	str	r2, [r3, #108]	; 0x6c
	modeDay[2].function = DISPLAY_GoesTo;
 80098c8:	4b49      	ldr	r3, [pc, #292]	; (80099f0 <MENU_Fill+0x1018>)
 80098ca:	4a46      	ldr	r2, [pc, #280]	; (80099e4 <MENU_Fill+0x100c>)
 80098cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	modeDay[2].enter = &mode2[0];
 80098d0:	4b47      	ldr	r3, [pc, #284]	; (80099f0 <MENU_Fill+0x1018>)
 80098d2:	4a5f      	ldr	r2, [pc, #380]	; (8009a50 <MENU_Fill+0x1078>)
 80098d4:	67da      	str	r2, [r3, #124]	; 0x7c

	modeDay[3].name = "mode 3";
 80098d6:	4b46      	ldr	r3, [pc, #280]	; (80099f0 <MENU_Fill+0x1018>)
 80098d8:	4a5e      	ldr	r2, [pc, #376]	; (8009a54 <MENU_Fill+0x107c>)
 80098da:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	modeDay[3].function = DISPLAY_GoesTo;
 80098de:	4b44      	ldr	r3, [pc, #272]	; (80099f0 <MENU_Fill+0x1018>)
 80098e0:	4a40      	ldr	r2, [pc, #256]	; (80099e4 <MENU_Fill+0x100c>)
 80098e2:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	modeDay[3].enter = &mode3[0];
 80098e6:	4b42      	ldr	r3, [pc, #264]	; (80099f0 <MENU_Fill+0x1018>)
 80098e8:	4a5b      	ldr	r2, [pc, #364]	; (8009a58 <MENU_Fill+0x1080>)
 80098ea:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

	modeDay[4].name = "Back";
 80098ee:	4b40      	ldr	r3, [pc, #256]	; (80099f0 <MENU_Fill+0x1018>)
 80098f0:	4a42      	ldr	r2, [pc, #264]	; (80099fc <MENU_Fill+0x1024>)
 80098f2:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	modeDay[4].function = DISPLAY_GoesTo;
 80098f6:	4b3e      	ldr	r3, [pc, #248]	; (80099f0 <MENU_Fill+0x1018>)
 80098f8:	4a3a      	ldr	r2, [pc, #232]	; (80099e4 <MENU_Fill+0x100c>)
 80098fa:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	modeDay[4].enter = &setting[5];
 80098fe:	4b3c      	ldr	r3, [pc, #240]	; (80099f0 <MENU_Fill+0x1018>)
 8009900:	4a56      	ldr	r2, [pc, #344]	; (8009a5c <MENU_Fill+0x1084>)
 8009902:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	MENU_FillSection(mode0, MODE_MENU_SIZE, "mode 0");
 8009906:	4a4d      	ldr	r2, [pc, #308]	; (8009a3c <MENU_Fill+0x1064>)
 8009908:	2104      	movs	r1, #4
 800990a:	484d      	ldr	r0, [pc, #308]	; (8009a40 <MENU_Fill+0x1068>)
 800990c:	f000 fb04 	bl	8009f18 <MENU_FillSection>

	mode0[0].type = MENU_TYPE_TWO_COLUMN;
 8009910:	4b4b      	ldr	r3, [pc, #300]	; (8009a40 <MENU_Fill+0x1068>)
 8009912:	2201      	movs	r2, #1
 8009914:	705a      	strb	r2, [r3, #1]
	mode0[0].value = &dlRouteM[0].night;
 8009916:	4b4a      	ldr	r3, [pc, #296]	; (8009a40 <MENU_Fill+0x1068>)
 8009918:	4a51      	ldr	r2, [pc, #324]	; (8009a60 <MENU_Fill+0x1088>)
 800991a:	605a      	str	r2, [r3, #4]
	mode0[0].maxVal = 10;
 800991c:	4b48      	ldr	r3, [pc, #288]	; (8009a40 <MENU_Fill+0x1068>)
 800991e:	220a      	movs	r2, #10
 8009920:	721a      	strb	r2, [r3, #8]
	mode0[0].name = "Night";
 8009922:	4b47      	ldr	r3, [pc, #284]	; (8009a40 <MENU_Fill+0x1068>)
 8009924:	4a4f      	ldr	r2, [pc, #316]	; (8009a64 <MENU_Fill+0x108c>)
 8009926:	615a      	str	r2, [r3, #20]

	mode0[1].type = MENU_TYPE_TWO_COLUMN;
 8009928:	4b45      	ldr	r3, [pc, #276]	; (8009a40 <MENU_Fill+0x1068>)
 800992a:	2201      	movs	r2, #1
 800992c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	mode0[1].value = &dlRouteM[0].dayHight;
 8009930:	4b43      	ldr	r3, [pc, #268]	; (8009a40 <MENU_Fill+0x1068>)
 8009932:	4a4d      	ldr	r2, [pc, #308]	; (8009a68 <MENU_Fill+0x1090>)
 8009934:	631a      	str	r2, [r3, #48]	; 0x30
	mode0[1].maxVal = 10;
 8009936:	4b42      	ldr	r3, [pc, #264]	; (8009a40 <MENU_Fill+0x1068>)
 8009938:	220a      	movs	r2, #10
 800993a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	mode0[1].name = "Day H";
 800993e:	4b40      	ldr	r3, [pc, #256]	; (8009a40 <MENU_Fill+0x1068>)
 8009940:	4a4a      	ldr	r2, [pc, #296]	; (8009a6c <MENU_Fill+0x1094>)
 8009942:	641a      	str	r2, [r3, #64]	; 0x40

	mode0[2].type = MENU_TYPE_TWO_COLUMN;
 8009944:	4b3e      	ldr	r3, [pc, #248]	; (8009a40 <MENU_Fill+0x1068>)
 8009946:	2201      	movs	r2, #1
 8009948:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	mode0[2].value = &dlRouteM[0].dayLow;
 800994c:	4b3c      	ldr	r3, [pc, #240]	; (8009a40 <MENU_Fill+0x1068>)
 800994e:	4a48      	ldr	r2, [pc, #288]	; (8009a70 <MENU_Fill+0x1098>)
 8009950:	65da      	str	r2, [r3, #92]	; 0x5c
	mode0[2].maxVal = 10;
 8009952:	4b3b      	ldr	r3, [pc, #236]	; (8009a40 <MENU_Fill+0x1068>)
 8009954:	220a      	movs	r2, #10
 8009956:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	mode0[2].name = "Day L";
 800995a:	4b39      	ldr	r3, [pc, #228]	; (8009a40 <MENU_Fill+0x1068>)
 800995c:	4a45      	ldr	r2, [pc, #276]	; (8009a74 <MENU_Fill+0x109c>)
 800995e:	66da      	str	r2, [r3, #108]	; 0x6c

	mode0[3].name = "Save and back";
 8009960:	4b37      	ldr	r3, [pc, #220]	; (8009a40 <MENU_Fill+0x1068>)
 8009962:	4a45      	ldr	r2, [pc, #276]	; (8009a78 <MENU_Fill+0x10a0>)
 8009964:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	mode0[3].function = DISPLAY_GoesTo;
 8009968:	4b35      	ldr	r3, [pc, #212]	; (8009a40 <MENU_Fill+0x1068>)
 800996a:	4a1e      	ldr	r2, [pc, #120]	; (80099e4 <MENU_Fill+0x100c>)
 800996c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	mode0[3].enter = &modeDay[0];
 8009970:	4b33      	ldr	r3, [pc, #204]	; (8009a40 <MENU_Fill+0x1068>)
 8009972:	4a1f      	ldr	r2, [pc, #124]	; (80099f0 <MENU_Fill+0x1018>)
 8009974:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

	MENU_FillSection(mode1, MODE_MENU_SIZE, "mode 1");
 8009978:	4a32      	ldr	r2, [pc, #200]	; (8009a44 <MENU_Fill+0x106c>)
 800997a:	2104      	movs	r1, #4
 800997c:	4832      	ldr	r0, [pc, #200]	; (8009a48 <MENU_Fill+0x1070>)
 800997e:	f000 facb 	bl	8009f18 <MENU_FillSection>
	mode1[0].type = MENU_TYPE_TWO_COLUMN;
 8009982:	4b31      	ldr	r3, [pc, #196]	; (8009a48 <MENU_Fill+0x1070>)
 8009984:	2201      	movs	r2, #1
 8009986:	705a      	strb	r2, [r3, #1]
	mode1[0].value = &dlRouteM[1].night;
 8009988:	4b2f      	ldr	r3, [pc, #188]	; (8009a48 <MENU_Fill+0x1070>)
 800998a:	4a3c      	ldr	r2, [pc, #240]	; (8009a7c <MENU_Fill+0x10a4>)
 800998c:	605a      	str	r2, [r3, #4]
	mode1[0].maxVal = 10;
 800998e:	4b2e      	ldr	r3, [pc, #184]	; (8009a48 <MENU_Fill+0x1070>)
 8009990:	220a      	movs	r2, #10
 8009992:	721a      	strb	r2, [r3, #8]
	mode1[0].name = "Night";
 8009994:	4b2c      	ldr	r3, [pc, #176]	; (8009a48 <MENU_Fill+0x1070>)
 8009996:	4a33      	ldr	r2, [pc, #204]	; (8009a64 <MENU_Fill+0x108c>)
 8009998:	615a      	str	r2, [r3, #20]
 800999a:	e071      	b.n	8009a80 <MENU_Fill+0x10a8>
 800999c:	08005229 	.word	0x08005229
 80099a0:	20002774 	.word	0x20002774
 80099a4:	20002488 	.word	0x20002488
 80099a8:	0800add4 	.word	0x0800add4
 80099ac:	200024e0 	.word	0x200024e0
 80099b0:	0800aec4 	.word	0x0800aec4
 80099b4:	200028a8 	.word	0x200028a8
 80099b8:	08000915 	.word	0x08000915
 80099bc:	0800aecc 	.word	0x0800aecc
 80099c0:	20002c44 	.word	0x20002c44
 80099c4:	08000955 	.word	0x08000955
 80099c8:	0800aed4 	.word	0x0800aed4
 80099cc:	20002984 	.word	0x20002984
 80099d0:	0800098d 	.word	0x0800098d
 80099d4:	0800aee4 	.word	0x0800aee4
 80099d8:	20001a90 	.word	0x20001a90
 80099dc:	080009c5 	.word	0x080009c5
 80099e0:	0800aef4 	.word	0x0800aef4
 80099e4:	080008c7 	.word	0x080008c7
 80099e8:	200022d0 	.word	0x200022d0
 80099ec:	0800af08 	.word	0x0800af08
 80099f0:	200019b4 	.word	0x200019b4
 80099f4:	0800af10 	.word	0x0800af10
 80099f8:	20001e84 	.word	0x20001e84
 80099fc:	0800af20 	.word	0x0800af20
 8009a00:	200024b4 	.word	0x200024b4
 8009a04:	0800af28 	.word	0x0800af28
 8009a08:	0800af38 	.word	0x0800af38
 8009a0c:	080053a9 	.word	0x080053a9
 8009a10:	200025e8 	.word	0x200025e8
 8009a14:	0800af48 	.word	0x0800af48
 8009a18:	0800af54 	.word	0x0800af54
 8009a1c:	20001eb0 	.word	0x20001eb0
 8009a20:	0800af58 	.word	0x0800af58
 8009a24:	200000b2 	.word	0x200000b2
 8009a28:	0800af5c 	.word	0x0800af5c
 8009a2c:	080057d9 	.word	0x080057d9
 8009a30:	20002328 	.word	0x20002328
 8009a34:	20002590 	.word	0x20002590
 8009a38:	0800af64 	.word	0x0800af64
 8009a3c:	0800af70 	.word	0x0800af70
 8009a40:	20002a60 	.word	0x20002a60
 8009a44:	0800af78 	.word	0x0800af78
 8009a48:	200020ec 	.word	0x200020ec
 8009a4c:	0800af80 	.word	0x0800af80
 8009a50:	20001ca0 	.word	0x20001ca0
 8009a54:	0800af88 	.word	0x0800af88
 8009a58:	2000203c 	.word	0x2000203c
 8009a5c:	200025bc 	.word	0x200025bc
 8009a60:	20001300 	.word	0x20001300
 8009a64:	0800af90 	.word	0x0800af90
 8009a68:	20001301 	.word	0x20001301
 8009a6c:	0800af98 	.word	0x0800af98
 8009a70:	20001302 	.word	0x20001302
 8009a74:	0800afa0 	.word	0x0800afa0
 8009a78:	0800afa8 	.word	0x0800afa8
 8009a7c:	20001303 	.word	0x20001303

	mode1[1].type = MENU_TYPE_TWO_COLUMN;
 8009a80:	4ba3      	ldr	r3, [pc, #652]	; (8009d10 <MENU_Fill+0x1338>)
 8009a82:	2201      	movs	r2, #1
 8009a84:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	mode1[1].value = &dlRouteM[1].dayHight;
 8009a88:	4ba1      	ldr	r3, [pc, #644]	; (8009d10 <MENU_Fill+0x1338>)
 8009a8a:	4aa2      	ldr	r2, [pc, #648]	; (8009d14 <MENU_Fill+0x133c>)
 8009a8c:	631a      	str	r2, [r3, #48]	; 0x30
	mode1[1].maxVal = 10;
 8009a8e:	4ba0      	ldr	r3, [pc, #640]	; (8009d10 <MENU_Fill+0x1338>)
 8009a90:	220a      	movs	r2, #10
 8009a92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	mode1[1].name = "Day H";
 8009a96:	4b9e      	ldr	r3, [pc, #632]	; (8009d10 <MENU_Fill+0x1338>)
 8009a98:	4a9f      	ldr	r2, [pc, #636]	; (8009d18 <MENU_Fill+0x1340>)
 8009a9a:	641a      	str	r2, [r3, #64]	; 0x40

	mode1[2].type = MENU_TYPE_TWO_COLUMN;
 8009a9c:	4b9c      	ldr	r3, [pc, #624]	; (8009d10 <MENU_Fill+0x1338>)
 8009a9e:	2201      	movs	r2, #1
 8009aa0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	mode1[2].value = &dlRouteM[1].dayLow;
 8009aa4:	4b9a      	ldr	r3, [pc, #616]	; (8009d10 <MENU_Fill+0x1338>)
 8009aa6:	4a9d      	ldr	r2, [pc, #628]	; (8009d1c <MENU_Fill+0x1344>)
 8009aa8:	65da      	str	r2, [r3, #92]	; 0x5c
	mode1[2].maxVal = 10;
 8009aaa:	4b99      	ldr	r3, [pc, #612]	; (8009d10 <MENU_Fill+0x1338>)
 8009aac:	220a      	movs	r2, #10
 8009aae:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	mode1[2].name = "Day L";
 8009ab2:	4b97      	ldr	r3, [pc, #604]	; (8009d10 <MENU_Fill+0x1338>)
 8009ab4:	4a9a      	ldr	r2, [pc, #616]	; (8009d20 <MENU_Fill+0x1348>)
 8009ab6:	66da      	str	r2, [r3, #108]	; 0x6c

	mode1[3].name = "Save and back";
 8009ab8:	4b95      	ldr	r3, [pc, #596]	; (8009d10 <MENU_Fill+0x1338>)
 8009aba:	4a9a      	ldr	r2, [pc, #616]	; (8009d24 <MENU_Fill+0x134c>)
 8009abc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	mode1[3].function = DISPLAY_GoesTo;
 8009ac0:	4b93      	ldr	r3, [pc, #588]	; (8009d10 <MENU_Fill+0x1338>)
 8009ac2:	4a99      	ldr	r2, [pc, #612]	; (8009d28 <MENU_Fill+0x1350>)
 8009ac4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	mode1[3].enter = &modeDay[1];
 8009ac8:	4b91      	ldr	r3, [pc, #580]	; (8009d10 <MENU_Fill+0x1338>)
 8009aca:	4a98      	ldr	r2, [pc, #608]	; (8009d2c <MENU_Fill+0x1354>)
 8009acc:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

	MENU_FillSection(mode2, MODE_MENU_SIZE, "mode 2");
 8009ad0:	4a97      	ldr	r2, [pc, #604]	; (8009d30 <MENU_Fill+0x1358>)
 8009ad2:	2104      	movs	r1, #4
 8009ad4:	4897      	ldr	r0, [pc, #604]	; (8009d34 <MENU_Fill+0x135c>)
 8009ad6:	f000 fa1f 	bl	8009f18 <MENU_FillSection>

	mode2[0].type = MENU_TYPE_TWO_COLUMN;
 8009ada:	4b96      	ldr	r3, [pc, #600]	; (8009d34 <MENU_Fill+0x135c>)
 8009adc:	2201      	movs	r2, #1
 8009ade:	705a      	strb	r2, [r3, #1]
	mode2[0].value = &dlRouteM[2].night;
 8009ae0:	4b94      	ldr	r3, [pc, #592]	; (8009d34 <MENU_Fill+0x135c>)
 8009ae2:	4a95      	ldr	r2, [pc, #596]	; (8009d38 <MENU_Fill+0x1360>)
 8009ae4:	605a      	str	r2, [r3, #4]
	mode2[0].maxVal = 10;
 8009ae6:	4b93      	ldr	r3, [pc, #588]	; (8009d34 <MENU_Fill+0x135c>)
 8009ae8:	220a      	movs	r2, #10
 8009aea:	721a      	strb	r2, [r3, #8]
	mode2[0].name = "Night";
 8009aec:	4b91      	ldr	r3, [pc, #580]	; (8009d34 <MENU_Fill+0x135c>)
 8009aee:	4a93      	ldr	r2, [pc, #588]	; (8009d3c <MENU_Fill+0x1364>)
 8009af0:	615a      	str	r2, [r3, #20]

	mode2[1].type = MENU_TYPE_TWO_COLUMN;
 8009af2:	4b90      	ldr	r3, [pc, #576]	; (8009d34 <MENU_Fill+0x135c>)
 8009af4:	2201      	movs	r2, #1
 8009af6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	mode2[1].value = &dlRouteM[2].dayHight;
 8009afa:	4b8e      	ldr	r3, [pc, #568]	; (8009d34 <MENU_Fill+0x135c>)
 8009afc:	4a90      	ldr	r2, [pc, #576]	; (8009d40 <MENU_Fill+0x1368>)
 8009afe:	631a      	str	r2, [r3, #48]	; 0x30
	mode2[1].maxVal = 10;
 8009b00:	4b8c      	ldr	r3, [pc, #560]	; (8009d34 <MENU_Fill+0x135c>)
 8009b02:	220a      	movs	r2, #10
 8009b04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	mode2[1].name = "Day H";
 8009b08:	4b8a      	ldr	r3, [pc, #552]	; (8009d34 <MENU_Fill+0x135c>)
 8009b0a:	4a83      	ldr	r2, [pc, #524]	; (8009d18 <MENU_Fill+0x1340>)
 8009b0c:	641a      	str	r2, [r3, #64]	; 0x40

	mode2[2].type = MENU_TYPE_TWO_COLUMN;
 8009b0e:	4b89      	ldr	r3, [pc, #548]	; (8009d34 <MENU_Fill+0x135c>)
 8009b10:	2201      	movs	r2, #1
 8009b12:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	mode2[2].value = &dlRouteM[2].dayLow;
 8009b16:	4b87      	ldr	r3, [pc, #540]	; (8009d34 <MENU_Fill+0x135c>)
 8009b18:	4a8a      	ldr	r2, [pc, #552]	; (8009d44 <MENU_Fill+0x136c>)
 8009b1a:	65da      	str	r2, [r3, #92]	; 0x5c
	mode2[2].maxVal = 10;
 8009b1c:	4b85      	ldr	r3, [pc, #532]	; (8009d34 <MENU_Fill+0x135c>)
 8009b1e:	220a      	movs	r2, #10
 8009b20:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	mode2[2].name = "Day L";
 8009b24:	4b83      	ldr	r3, [pc, #524]	; (8009d34 <MENU_Fill+0x135c>)
 8009b26:	4a7e      	ldr	r2, [pc, #504]	; (8009d20 <MENU_Fill+0x1348>)
 8009b28:	66da      	str	r2, [r3, #108]	; 0x6c

	mode2[3].name = "Save and back";
 8009b2a:	4b82      	ldr	r3, [pc, #520]	; (8009d34 <MENU_Fill+0x135c>)
 8009b2c:	4a7d      	ldr	r2, [pc, #500]	; (8009d24 <MENU_Fill+0x134c>)
 8009b2e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	mode2[3].function = DISPLAY_GoesTo;
 8009b32:	4b80      	ldr	r3, [pc, #512]	; (8009d34 <MENU_Fill+0x135c>)
 8009b34:	4a7c      	ldr	r2, [pc, #496]	; (8009d28 <MENU_Fill+0x1350>)
 8009b36:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	mode2[3].enter = &modeDay[2];
 8009b3a:	4b7e      	ldr	r3, [pc, #504]	; (8009d34 <MENU_Fill+0x135c>)
 8009b3c:	4a82      	ldr	r2, [pc, #520]	; (8009d48 <MENU_Fill+0x1370>)
 8009b3e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

	MENU_FillSection(mode3, MODE_MENU_SIZE, "mode 3");
 8009b42:	4a82      	ldr	r2, [pc, #520]	; (8009d4c <MENU_Fill+0x1374>)
 8009b44:	2104      	movs	r1, #4
 8009b46:	4882      	ldr	r0, [pc, #520]	; (8009d50 <MENU_Fill+0x1378>)
 8009b48:	f000 f9e6 	bl	8009f18 <MENU_FillSection>

	mode3[0].type = MENU_TYPE_TWO_COLUMN;
 8009b4c:	4b80      	ldr	r3, [pc, #512]	; (8009d50 <MENU_Fill+0x1378>)
 8009b4e:	2201      	movs	r2, #1
 8009b50:	705a      	strb	r2, [r3, #1]
	mode3[0].value = &dlRouteM[3].night;
 8009b52:	4b7f      	ldr	r3, [pc, #508]	; (8009d50 <MENU_Fill+0x1378>)
 8009b54:	4a7f      	ldr	r2, [pc, #508]	; (8009d54 <MENU_Fill+0x137c>)
 8009b56:	605a      	str	r2, [r3, #4]
	mode3[0].maxVal = 10;
 8009b58:	4b7d      	ldr	r3, [pc, #500]	; (8009d50 <MENU_Fill+0x1378>)
 8009b5a:	220a      	movs	r2, #10
 8009b5c:	721a      	strb	r2, [r3, #8]
	mode3[0].name = "Night";
 8009b5e:	4b7c      	ldr	r3, [pc, #496]	; (8009d50 <MENU_Fill+0x1378>)
 8009b60:	4a76      	ldr	r2, [pc, #472]	; (8009d3c <MENU_Fill+0x1364>)
 8009b62:	615a      	str	r2, [r3, #20]

	mode3[1].type = MENU_TYPE_TWO_COLUMN;
 8009b64:	4b7a      	ldr	r3, [pc, #488]	; (8009d50 <MENU_Fill+0x1378>)
 8009b66:	2201      	movs	r2, #1
 8009b68:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	mode3[1].value = &dlRouteM[3].dayHight;
 8009b6c:	4b78      	ldr	r3, [pc, #480]	; (8009d50 <MENU_Fill+0x1378>)
 8009b6e:	4a7a      	ldr	r2, [pc, #488]	; (8009d58 <MENU_Fill+0x1380>)
 8009b70:	631a      	str	r2, [r3, #48]	; 0x30
	mode3[1].maxVal = 10;
 8009b72:	4b77      	ldr	r3, [pc, #476]	; (8009d50 <MENU_Fill+0x1378>)
 8009b74:	220a      	movs	r2, #10
 8009b76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	mode3[1].name = "Day H";
 8009b7a:	4b75      	ldr	r3, [pc, #468]	; (8009d50 <MENU_Fill+0x1378>)
 8009b7c:	4a66      	ldr	r2, [pc, #408]	; (8009d18 <MENU_Fill+0x1340>)
 8009b7e:	641a      	str	r2, [r3, #64]	; 0x40

	mode3[2].type = MENU_TYPE_TWO_COLUMN;
 8009b80:	4b73      	ldr	r3, [pc, #460]	; (8009d50 <MENU_Fill+0x1378>)
 8009b82:	2201      	movs	r2, #1
 8009b84:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	mode3[2].value = &dlRouteM[3].dayLow;
 8009b88:	4b71      	ldr	r3, [pc, #452]	; (8009d50 <MENU_Fill+0x1378>)
 8009b8a:	4a74      	ldr	r2, [pc, #464]	; (8009d5c <MENU_Fill+0x1384>)
 8009b8c:	65da      	str	r2, [r3, #92]	; 0x5c
	mode3[2].maxVal = 10;
 8009b8e:	4b70      	ldr	r3, [pc, #448]	; (8009d50 <MENU_Fill+0x1378>)
 8009b90:	220a      	movs	r2, #10
 8009b92:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	mode3[2].name = "Day L";
 8009b96:	4b6e      	ldr	r3, [pc, #440]	; (8009d50 <MENU_Fill+0x1378>)
 8009b98:	4a61      	ldr	r2, [pc, #388]	; (8009d20 <MENU_Fill+0x1348>)
 8009b9a:	66da      	str	r2, [r3, #108]	; 0x6c

	mode3[3].name = "Save and back";
 8009b9c:	4b6c      	ldr	r3, [pc, #432]	; (8009d50 <MENU_Fill+0x1378>)
 8009b9e:	4a61      	ldr	r2, [pc, #388]	; (8009d24 <MENU_Fill+0x134c>)
 8009ba0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	mode3[3].value = NULL;
 8009ba4:	4b6a      	ldr	r3, [pc, #424]	; (8009d50 <MENU_Fill+0x1378>)
 8009ba6:	2200      	movs	r2, #0
 8009ba8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	mode3[3].function = DISPLAY_GoesTo;
 8009bac:	4b68      	ldr	r3, [pc, #416]	; (8009d50 <MENU_Fill+0x1378>)
 8009bae:	4a5e      	ldr	r2, [pc, #376]	; (8009d28 <MENU_Fill+0x1350>)
 8009bb0:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	mode3[3].enter = &modeDay[3];
 8009bb4:	4b66      	ldr	r3, [pc, #408]	; (8009d50 <MENU_Fill+0x1378>)
 8009bb6:	4a6a      	ldr	r2, [pc, #424]	; (8009d60 <MENU_Fill+0x1388>)
 8009bb8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

	MENU_FillSection(time, TIME_MENU_SIZE, "Time");
 8009bbc:	4a69      	ldr	r2, [pc, #420]	; (8009d64 <MENU_Fill+0x138c>)
 8009bbe:	2105      	movs	r1, #5
 8009bc0:	4869      	ldr	r0, [pc, #420]	; (8009d68 <MENU_Fill+0x1390>)
 8009bc2:	f000 f9a9 	bl	8009f18 <MENU_FillSection>

	time[0].name = "Hours";
 8009bc6:	4b68      	ldr	r3, [pc, #416]	; (8009d68 <MENU_Fill+0x1390>)
 8009bc8:	4a68      	ldr	r2, [pc, #416]	; (8009d6c <MENU_Fill+0x1394>)
 8009bca:	615a      	str	r2, [r3, #20]
	time[0].type = MENU_TYPE_TWO_COLUMN;
 8009bcc:	4b66      	ldr	r3, [pc, #408]	; (8009d68 <MENU_Fill+0x1390>)
 8009bce:	2201      	movs	r2, #1
 8009bd0:	705a      	strb	r2, [r3, #1]
	time[0].value = &userTime.Hours;
 8009bd2:	4b65      	ldr	r3, [pc, #404]	; (8009d68 <MENU_Fill+0x1390>)
 8009bd4:	4a66      	ldr	r2, [pc, #408]	; (8009d70 <MENU_Fill+0x1398>)
 8009bd6:	605a      	str	r2, [r3, #4]
	time[0].maxVal = 23;
 8009bd8:	4b63      	ldr	r3, [pc, #396]	; (8009d68 <MENU_Fill+0x1390>)
 8009bda:	2217      	movs	r2, #23
 8009bdc:	721a      	strb	r2, [r3, #8]

	time[1].name = "Minutes";
 8009bde:	4b62      	ldr	r3, [pc, #392]	; (8009d68 <MENU_Fill+0x1390>)
 8009be0:	4a64      	ldr	r2, [pc, #400]	; (8009d74 <MENU_Fill+0x139c>)
 8009be2:	641a      	str	r2, [r3, #64]	; 0x40
	time[1].type = MENU_TYPE_TWO_COLUMN;
 8009be4:	4b60      	ldr	r3, [pc, #384]	; (8009d68 <MENU_Fill+0x1390>)
 8009be6:	2201      	movs	r2, #1
 8009be8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	time[1].value = &userTime.Minutes;
 8009bec:	4b5e      	ldr	r3, [pc, #376]	; (8009d68 <MENU_Fill+0x1390>)
 8009bee:	4a62      	ldr	r2, [pc, #392]	; (8009d78 <MENU_Fill+0x13a0>)
 8009bf0:	631a      	str	r2, [r3, #48]	; 0x30
	time[1].maxVal = 59;
 8009bf2:	4b5d      	ldr	r3, [pc, #372]	; (8009d68 <MENU_Fill+0x1390>)
 8009bf4:	223b      	movs	r2, #59	; 0x3b
 8009bf6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

	time[2].name = "Seconds";
 8009bfa:	4b5b      	ldr	r3, [pc, #364]	; (8009d68 <MENU_Fill+0x1390>)
 8009bfc:	4a5f      	ldr	r2, [pc, #380]	; (8009d7c <MENU_Fill+0x13a4>)
 8009bfe:	66da      	str	r2, [r3, #108]	; 0x6c
	time[2].type = MENU_TYPE_TWO_COLUMN;
 8009c00:	4b59      	ldr	r3, [pc, #356]	; (8009d68 <MENU_Fill+0x1390>)
 8009c02:	2201      	movs	r2, #1
 8009c04:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	time[2].value = &userTime.Seconds;
 8009c08:	4b57      	ldr	r3, [pc, #348]	; (8009d68 <MENU_Fill+0x1390>)
 8009c0a:	4a5d      	ldr	r2, [pc, #372]	; (8009d80 <MENU_Fill+0x13a8>)
 8009c0c:	65da      	str	r2, [r3, #92]	; 0x5c
	time[2].maxVal = 59;
 8009c0e:	4b56      	ldr	r3, [pc, #344]	; (8009d68 <MENU_Fill+0x1390>)
 8009c10:	223b      	movs	r2, #59	; 0x3b
 8009c12:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

	time[3].name = "Save";
 8009c16:	4b54      	ldr	r3, [pc, #336]	; (8009d68 <MENU_Fill+0x1390>)
 8009c18:	4a5a      	ldr	r2, [pc, #360]	; (8009d84 <MENU_Fill+0x13ac>)
 8009c1a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	time[3].function = FANS_SetTime;
 8009c1e:	4b52      	ldr	r3, [pc, #328]	; (8009d68 <MENU_Fill+0x1390>)
 8009c20:	4a59      	ldr	r2, [pc, #356]	; (8009d88 <MENU_Fill+0x13b0>)
 8009c22:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	time[3].enter = &time[4];
 8009c26:	4b50      	ldr	r3, [pc, #320]	; (8009d68 <MENU_Fill+0x1390>)
 8009c28:	4a58      	ldr	r2, [pc, #352]	; (8009d8c <MENU_Fill+0x13b4>)
 8009c2a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

	time[4].name = "Back";
 8009c2e:	4b4e      	ldr	r3, [pc, #312]	; (8009d68 <MENU_Fill+0x1390>)
 8009c30:	4a57      	ldr	r2, [pc, #348]	; (8009d90 <MENU_Fill+0x13b8>)
 8009c32:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	time[4].function = DISPLAY_GoesToAndNotShowTime;
 8009c36:	4b4c      	ldr	r3, [pc, #304]	; (8009d68 <MENU_Fill+0x1390>)
 8009c38:	4a56      	ldr	r2, [pc, #344]	; (8009d94 <MENU_Fill+0x13bc>)
 8009c3a:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	time[4].enter = &setting[0];
 8009c3e:	4b4a      	ldr	r3, [pc, #296]	; (8009d68 <MENU_Fill+0x1390>)
 8009c40:	4a55      	ldr	r2, [pc, #340]	; (8009d98 <MENU_Fill+0x13c0>)
 8009c42:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	MENU_FillSection(date, DATE_MENU_SIZE, "Date");
 8009c46:	4a55      	ldr	r2, [pc, #340]	; (8009d9c <MENU_Fill+0x13c4>)
 8009c48:	2105      	movs	r1, #5
 8009c4a:	4855      	ldr	r0, [pc, #340]	; (8009da0 <MENU_Fill+0x13c8>)
 8009c4c:	f000 f964 	bl	8009f18 <MENU_FillSection>

	date[0].name = "Year";
 8009c50:	4b53      	ldr	r3, [pc, #332]	; (8009da0 <MENU_Fill+0x13c8>)
 8009c52:	4a54      	ldr	r2, [pc, #336]	; (8009da4 <MENU_Fill+0x13cc>)
 8009c54:	615a      	str	r2, [r3, #20]
	date[0].value = &userDate.Year;
 8009c56:	4b52      	ldr	r3, [pc, #328]	; (8009da0 <MENU_Fill+0x13c8>)
 8009c58:	4a53      	ldr	r2, [pc, #332]	; (8009da8 <MENU_Fill+0x13d0>)
 8009c5a:	605a      	str	r2, [r3, #4]
	date[0].maxVal = 99;
 8009c5c:	4b50      	ldr	r3, [pc, #320]	; (8009da0 <MENU_Fill+0x13c8>)
 8009c5e:	2263      	movs	r2, #99	; 0x63
 8009c60:	721a      	strb	r2, [r3, #8]
	date[0].type = MENU_TYPE_TWO_COLUMN;
 8009c62:	4b4f      	ldr	r3, [pc, #316]	; (8009da0 <MENU_Fill+0x13c8>)
 8009c64:	2201      	movs	r2, #1
 8009c66:	705a      	strb	r2, [r3, #1]

	date[1].name = "Month";
 8009c68:	4b4d      	ldr	r3, [pc, #308]	; (8009da0 <MENU_Fill+0x13c8>)
 8009c6a:	4a50      	ldr	r2, [pc, #320]	; (8009dac <MENU_Fill+0x13d4>)
 8009c6c:	641a      	str	r2, [r3, #64]	; 0x40
	date[1].value = &userDate.Month;
 8009c6e:	4b4c      	ldr	r3, [pc, #304]	; (8009da0 <MENU_Fill+0x13c8>)
 8009c70:	4a4f      	ldr	r2, [pc, #316]	; (8009db0 <MENU_Fill+0x13d8>)
 8009c72:	631a      	str	r2, [r3, #48]	; 0x30
	date[1].maxVal = 12;
 8009c74:	4b4a      	ldr	r3, [pc, #296]	; (8009da0 <MENU_Fill+0x13c8>)
 8009c76:	220c      	movs	r2, #12
 8009c78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	date[1].minVal = 1;
 8009c7c:	4b48      	ldr	r3, [pc, #288]	; (8009da0 <MENU_Fill+0x13c8>)
 8009c7e:	2201      	movs	r2, #1
 8009c80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	date[1].type = MENU_TYPE_TWO_COLUMN;
 8009c84:	4b46      	ldr	r3, [pc, #280]	; (8009da0 <MENU_Fill+0x13c8>)
 8009c86:	2201      	movs	r2, #1
 8009c88:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

	date[2].name = "Day";
 8009c8c:	4b44      	ldr	r3, [pc, #272]	; (8009da0 <MENU_Fill+0x13c8>)
 8009c8e:	4a49      	ldr	r2, [pc, #292]	; (8009db4 <MENU_Fill+0x13dc>)
 8009c90:	66da      	str	r2, [r3, #108]	; 0x6c
	date[2].value = &userDate.Date;
 8009c92:	4b43      	ldr	r3, [pc, #268]	; (8009da0 <MENU_Fill+0x13c8>)
 8009c94:	4a48      	ldr	r2, [pc, #288]	; (8009db8 <MENU_Fill+0x13e0>)
 8009c96:	65da      	str	r2, [r3, #92]	; 0x5c
	date[2].maxVal = 31;
 8009c98:	4b41      	ldr	r3, [pc, #260]	; (8009da0 <MENU_Fill+0x13c8>)
 8009c9a:	221f      	movs	r2, #31
 8009c9c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	date[2].minVal = 1;
 8009ca0:	4b3f      	ldr	r3, [pc, #252]	; (8009da0 <MENU_Fill+0x13c8>)
 8009ca2:	2201      	movs	r2, #1
 8009ca4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
	date[2].type = MENU_TYPE_TWO_COLUMN;
 8009ca8:	4b3d      	ldr	r3, [pc, #244]	; (8009da0 <MENU_Fill+0x13c8>)
 8009caa:	2201      	movs	r2, #1
 8009cac:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

	date[3].name = "Save";
 8009cb0:	4b3b      	ldr	r3, [pc, #236]	; (8009da0 <MENU_Fill+0x13c8>)
 8009cb2:	4a34      	ldr	r2, [pc, #208]	; (8009d84 <MENU_Fill+0x13ac>)
 8009cb4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	date[3].function = FANS_SetDate;
 8009cb8:	4b39      	ldr	r3, [pc, #228]	; (8009da0 <MENU_Fill+0x13c8>)
 8009cba:	4a40      	ldr	r2, [pc, #256]	; (8009dbc <MENU_Fill+0x13e4>)
 8009cbc:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	date[3].enter = &date[4];
 8009cc0:	4b37      	ldr	r3, [pc, #220]	; (8009da0 <MENU_Fill+0x13c8>)
 8009cc2:	4a3f      	ldr	r2, [pc, #252]	; (8009dc0 <MENU_Fill+0x13e8>)
 8009cc4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

	date[4].name = "Back";
 8009cc8:	4b35      	ldr	r3, [pc, #212]	; (8009da0 <MENU_Fill+0x13c8>)
 8009cca:	4a31      	ldr	r2, [pc, #196]	; (8009d90 <MENU_Fill+0x13b8>)
 8009ccc:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	date[4].function = DISPLAY_GoesToAndNotShowTime;
 8009cd0:	4b33      	ldr	r3, [pc, #204]	; (8009da0 <MENU_Fill+0x13c8>)
 8009cd2:	4a30      	ldr	r2, [pc, #192]	; (8009d94 <MENU_Fill+0x13bc>)
 8009cd4:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	date[4].enter = &setting[1];
 8009cd8:	4b31      	ldr	r3, [pc, #196]	; (8009da0 <MENU_Fill+0x13c8>)
 8009cda:	4a3a      	ldr	r2, [pc, #232]	; (8009dc4 <MENU_Fill+0x13ec>)
 8009cdc:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	MENU_FillSection(startDay, TIME_MENU_SIZE, "Start day time");
 8009ce0:	4a39      	ldr	r2, [pc, #228]	; (8009dc8 <MENU_Fill+0x13f0>)
 8009ce2:	2105      	movs	r1, #5
 8009ce4:	4839      	ldr	r0, [pc, #228]	; (8009dcc <MENU_Fill+0x13f4>)
 8009ce6:	f000 f917 	bl	8009f18 <MENU_FillSection>

	startDay[0].name = "Hours";
 8009cea:	4b38      	ldr	r3, [pc, #224]	; (8009dcc <MENU_Fill+0x13f4>)
 8009cec:	4a1f      	ldr	r2, [pc, #124]	; (8009d6c <MENU_Fill+0x1394>)
 8009cee:	615a      	str	r2, [r3, #20]
	startDay[0].value = &userTime.Hours;
 8009cf0:	4b36      	ldr	r3, [pc, #216]	; (8009dcc <MENU_Fill+0x13f4>)
 8009cf2:	4a1f      	ldr	r2, [pc, #124]	; (8009d70 <MENU_Fill+0x1398>)
 8009cf4:	605a      	str	r2, [r3, #4]
	startDay[0].maxVal = 23;
 8009cf6:	4b35      	ldr	r3, [pc, #212]	; (8009dcc <MENU_Fill+0x13f4>)
 8009cf8:	2217      	movs	r2, #23
 8009cfa:	721a      	strb	r2, [r3, #8]
	startDay[0].type = MENU_TYPE_TWO_COLUMN;
 8009cfc:	4b33      	ldr	r3, [pc, #204]	; (8009dcc <MENU_Fill+0x13f4>)
 8009cfe:	2201      	movs	r2, #1
 8009d00:	705a      	strb	r2, [r3, #1]

	startDay[1].name = "Minutes";
 8009d02:	4b32      	ldr	r3, [pc, #200]	; (8009dcc <MENU_Fill+0x13f4>)
 8009d04:	4a1b      	ldr	r2, [pc, #108]	; (8009d74 <MENU_Fill+0x139c>)
 8009d06:	641a      	str	r2, [r3, #64]	; 0x40
	startDay[1].value = &userTime.Minutes;
 8009d08:	4b30      	ldr	r3, [pc, #192]	; (8009dcc <MENU_Fill+0x13f4>)
 8009d0a:	4a1b      	ldr	r2, [pc, #108]	; (8009d78 <MENU_Fill+0x13a0>)
 8009d0c:	631a      	str	r2, [r3, #48]	; 0x30
 8009d0e:	e05f      	b.n	8009dd0 <MENU_Fill+0x13f8>
 8009d10:	200020ec 	.word	0x200020ec
 8009d14:	20001304 	.word	0x20001304
 8009d18:	0800af98 	.word	0x0800af98
 8009d1c:	20001305 	.word	0x20001305
 8009d20:	0800afa0 	.word	0x0800afa0
 8009d24:	0800afa8 	.word	0x0800afa8
 8009d28:	080008c7 	.word	0x080008c7
 8009d2c:	200019e0 	.word	0x200019e0
 8009d30:	0800af80 	.word	0x0800af80
 8009d34:	20001ca0 	.word	0x20001ca0
 8009d38:	20001306 	.word	0x20001306
 8009d3c:	0800af90 	.word	0x0800af90
 8009d40:	20001307 	.word	0x20001307
 8009d44:	20001308 	.word	0x20001308
 8009d48:	20001a0c 	.word	0x20001a0c
 8009d4c:	0800af88 	.word	0x0800af88
 8009d50:	2000203c 	.word	0x2000203c
 8009d54:	20001309 	.word	0x20001309
 8009d58:	2000130a 	.word	0x2000130a
 8009d5c:	2000130b 	.word	0x2000130b
 8009d60:	20001a38 	.word	0x20001a38
 8009d64:	0800aec4 	.word	0x0800aec4
 8009d68:	200028a8 	.word	0x200028a8
 8009d6c:	0800afb8 	.word	0x0800afb8
 8009d70:	20000e74 	.word	0x20000e74
 8009d74:	0800afc0 	.word	0x0800afc0
 8009d78:	20000e75 	.word	0x20000e75
 8009d7c:	0800afc8 	.word	0x0800afc8
 8009d80:	20000e76 	.word	0x20000e76
 8009d84:	0800af5c 	.word	0x0800af5c
 8009d88:	08005549 	.word	0x08005549
 8009d8c:	20002958 	.word	0x20002958
 8009d90:	0800af20 	.word	0x0800af20
 8009d94:	080008f5 	.word	0x080008f5
 8009d98:	200024e0 	.word	0x200024e0
 8009d9c:	0800aecc 	.word	0x0800aecc
 8009da0:	20002c44 	.word	0x20002c44
 8009da4:	0800afd0 	.word	0x0800afd0
 8009da8:	20000ec3 	.word	0x20000ec3
 8009dac:	0800afd8 	.word	0x0800afd8
 8009db0:	20000ec1 	.word	0x20000ec1
 8009db4:	0800afe0 	.word	0x0800afe0
 8009db8:	20000ec2 	.word	0x20000ec2
 8009dbc:	08005579 	.word	0x08005579
 8009dc0:	20002cf4 	.word	0x20002cf4
 8009dc4:	2000250c 	.word	0x2000250c
 8009dc8:	0800aed4 	.word	0x0800aed4
 8009dcc:	20002984 	.word	0x20002984
	startDay[1].maxVal = 59;
 8009dd0:	4b3f      	ldr	r3, [pc, #252]	; (8009ed0 <MENU_Fill+0x14f8>)
 8009dd2:	223b      	movs	r2, #59	; 0x3b
 8009dd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	startDay[1].type = MENU_TYPE_TWO_COLUMN;
 8009dd8:	4b3d      	ldr	r3, [pc, #244]	; (8009ed0 <MENU_Fill+0x14f8>)
 8009dda:	2201      	movs	r2, #1
 8009ddc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

	startDay[2].name = "Seconds";
 8009de0:	4b3b      	ldr	r3, [pc, #236]	; (8009ed0 <MENU_Fill+0x14f8>)
 8009de2:	4a3c      	ldr	r2, [pc, #240]	; (8009ed4 <MENU_Fill+0x14fc>)
 8009de4:	66da      	str	r2, [r3, #108]	; 0x6c
	startDay[2].value = &userTime.Seconds;
 8009de6:	4b3a      	ldr	r3, [pc, #232]	; (8009ed0 <MENU_Fill+0x14f8>)
 8009de8:	4a3b      	ldr	r2, [pc, #236]	; (8009ed8 <MENU_Fill+0x1500>)
 8009dea:	65da      	str	r2, [r3, #92]	; 0x5c
	startDay[2].maxVal = 59;
 8009dec:	4b38      	ldr	r3, [pc, #224]	; (8009ed0 <MENU_Fill+0x14f8>)
 8009dee:	223b      	movs	r2, #59	; 0x3b
 8009df0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	startDay[2].type = MENU_TYPE_TWO_COLUMN;
 8009df4:	4b36      	ldr	r3, [pc, #216]	; (8009ed0 <MENU_Fill+0x14f8>)
 8009df6:	2201      	movs	r2, #1
 8009df8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

	startDay[3].name = "Save";
 8009dfc:	4b34      	ldr	r3, [pc, #208]	; (8009ed0 <MENU_Fill+0x14f8>)
 8009dfe:	4a37      	ldr	r2, [pc, #220]	; (8009edc <MENU_Fill+0x1504>)
 8009e00:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	startDay[3].function = FANS_SetStartDayTime;
 8009e04:	4b32      	ldr	r3, [pc, #200]	; (8009ed0 <MENU_Fill+0x14f8>)
 8009e06:	4a36      	ldr	r2, [pc, #216]	; (8009ee0 <MENU_Fill+0x1508>)
 8009e08:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	startDay[3].enter = &startDay[4];
 8009e0c:	4b30      	ldr	r3, [pc, #192]	; (8009ed0 <MENU_Fill+0x14f8>)
 8009e0e:	4a35      	ldr	r2, [pc, #212]	; (8009ee4 <MENU_Fill+0x150c>)
 8009e10:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

	startDay[4].name = "Back";
 8009e14:	4b2e      	ldr	r3, [pc, #184]	; (8009ed0 <MENU_Fill+0x14f8>)
 8009e16:	4a34      	ldr	r2, [pc, #208]	; (8009ee8 <MENU_Fill+0x1510>)
 8009e18:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	startDay[4].function = DISPLAY_GoesTo;
 8009e1c:	4b2c      	ldr	r3, [pc, #176]	; (8009ed0 <MENU_Fill+0x14f8>)
 8009e1e:	4a33      	ldr	r2, [pc, #204]	; (8009eec <MENU_Fill+0x1514>)
 8009e20:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	startDay[4].enter = &setting[2];
 8009e24:	4b2a      	ldr	r3, [pc, #168]	; (8009ed0 <MENU_Fill+0x14f8>)
 8009e26:	4a32      	ldr	r2, [pc, #200]	; (8009ef0 <MENU_Fill+0x1518>)
 8009e28:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	MENU_FillSection(endDay, TIME_MENU_SIZE, "End day time");
 8009e2c:	4a31      	ldr	r2, [pc, #196]	; (8009ef4 <MENU_Fill+0x151c>)
 8009e2e:	2105      	movs	r1, #5
 8009e30:	4831      	ldr	r0, [pc, #196]	; (8009ef8 <MENU_Fill+0x1520>)
 8009e32:	f000 f871 	bl	8009f18 <MENU_FillSection>

	endDay[0].name = "Hours";
 8009e36:	4b30      	ldr	r3, [pc, #192]	; (8009ef8 <MENU_Fill+0x1520>)
 8009e38:	4a30      	ldr	r2, [pc, #192]	; (8009efc <MENU_Fill+0x1524>)
 8009e3a:	615a      	str	r2, [r3, #20]
	endDay[0].value = &userTime.Hours;
 8009e3c:	4b2e      	ldr	r3, [pc, #184]	; (8009ef8 <MENU_Fill+0x1520>)
 8009e3e:	4a30      	ldr	r2, [pc, #192]	; (8009f00 <MENU_Fill+0x1528>)
 8009e40:	605a      	str	r2, [r3, #4]
	endDay[0].maxVal = 23;
 8009e42:	4b2d      	ldr	r3, [pc, #180]	; (8009ef8 <MENU_Fill+0x1520>)
 8009e44:	2217      	movs	r2, #23
 8009e46:	721a      	strb	r2, [r3, #8]
	endDay[0].type = MENU_TYPE_TWO_COLUMN;
 8009e48:	4b2b      	ldr	r3, [pc, #172]	; (8009ef8 <MENU_Fill+0x1520>)
 8009e4a:	2201      	movs	r2, #1
 8009e4c:	705a      	strb	r2, [r3, #1]
	endDay[0].function = DISPLAY_GoesTo;
 8009e4e:	4b2a      	ldr	r3, [pc, #168]	; (8009ef8 <MENU_Fill+0x1520>)
 8009e50:	4a26      	ldr	r2, [pc, #152]	; (8009eec <MENU_Fill+0x1514>)
 8009e52:	629a      	str	r2, [r3, #40]	; 0x28

	endDay[1].name = "Minutes";
 8009e54:	4b28      	ldr	r3, [pc, #160]	; (8009ef8 <MENU_Fill+0x1520>)
 8009e56:	4a2b      	ldr	r2, [pc, #172]	; (8009f04 <MENU_Fill+0x152c>)
 8009e58:	641a      	str	r2, [r3, #64]	; 0x40
	endDay[1].value = &userTime.Minutes;
 8009e5a:	4b27      	ldr	r3, [pc, #156]	; (8009ef8 <MENU_Fill+0x1520>)
 8009e5c:	4a2a      	ldr	r2, [pc, #168]	; (8009f08 <MENU_Fill+0x1530>)
 8009e5e:	631a      	str	r2, [r3, #48]	; 0x30
	endDay[1].maxVal = 59;
 8009e60:	4b25      	ldr	r3, [pc, #148]	; (8009ef8 <MENU_Fill+0x1520>)
 8009e62:	223b      	movs	r2, #59	; 0x3b
 8009e64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	endDay[1].type = MENU_TYPE_TWO_COLUMN;
 8009e68:	4b23      	ldr	r3, [pc, #140]	; (8009ef8 <MENU_Fill+0x1520>)
 8009e6a:	2201      	movs	r2, #1
 8009e6c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	endDay[1].function = DISPLAY_GoesTo;
 8009e70:	4b21      	ldr	r3, [pc, #132]	; (8009ef8 <MENU_Fill+0x1520>)
 8009e72:	4a1e      	ldr	r2, [pc, #120]	; (8009eec <MENU_Fill+0x1514>)
 8009e74:	655a      	str	r2, [r3, #84]	; 0x54

	endDay[2].name = "Seconds";
 8009e76:	4b20      	ldr	r3, [pc, #128]	; (8009ef8 <MENU_Fill+0x1520>)
 8009e78:	4a16      	ldr	r2, [pc, #88]	; (8009ed4 <MENU_Fill+0x14fc>)
 8009e7a:	66da      	str	r2, [r3, #108]	; 0x6c
	endDay[2].value = &userTime.Seconds;
 8009e7c:	4b1e      	ldr	r3, [pc, #120]	; (8009ef8 <MENU_Fill+0x1520>)
 8009e7e:	4a16      	ldr	r2, [pc, #88]	; (8009ed8 <MENU_Fill+0x1500>)
 8009e80:	65da      	str	r2, [r3, #92]	; 0x5c
	endDay[2].maxVal = 59;
 8009e82:	4b1d      	ldr	r3, [pc, #116]	; (8009ef8 <MENU_Fill+0x1520>)
 8009e84:	223b      	movs	r2, #59	; 0x3b
 8009e86:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	endDay[2].type = MENU_TYPE_TWO_COLUMN;
 8009e8a:	4b1b      	ldr	r3, [pc, #108]	; (8009ef8 <MENU_Fill+0x1520>)
 8009e8c:	2201      	movs	r2, #1
 8009e8e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	endDay[2].function = DISPLAY_GoesTo;
 8009e92:	4b19      	ldr	r3, [pc, #100]	; (8009ef8 <MENU_Fill+0x1520>)
 8009e94:	4a15      	ldr	r2, [pc, #84]	; (8009eec <MENU_Fill+0x1514>)
 8009e96:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

	endDay[3].name = "Save";
 8009e9a:	4b17      	ldr	r3, [pc, #92]	; (8009ef8 <MENU_Fill+0x1520>)
 8009e9c:	4a0f      	ldr	r2, [pc, #60]	; (8009edc <MENU_Fill+0x1504>)
 8009e9e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	endDay[3].function = FANS_SetEndDayTime;
 8009ea2:	4b15      	ldr	r3, [pc, #84]	; (8009ef8 <MENU_Fill+0x1520>)
 8009ea4:	4a19      	ldr	r2, [pc, #100]	; (8009f0c <MENU_Fill+0x1534>)
 8009ea6:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	endDay[3].enter = &endDay[4];
 8009eaa:	4b13      	ldr	r3, [pc, #76]	; (8009ef8 <MENU_Fill+0x1520>)
 8009eac:	4a18      	ldr	r2, [pc, #96]	; (8009f10 <MENU_Fill+0x1538>)
 8009eae:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

	endDay[4].name = "Back";
 8009eb2:	4b11      	ldr	r3, [pc, #68]	; (8009ef8 <MENU_Fill+0x1520>)
 8009eb4:	4a0c      	ldr	r2, [pc, #48]	; (8009ee8 <MENU_Fill+0x1510>)
 8009eb6:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	endDay[4].function = DISPLAY_GoesTo;
 8009eba:	4b0f      	ldr	r3, [pc, #60]	; (8009ef8 <MENU_Fill+0x1520>)
 8009ebc:	4a0b      	ldr	r2, [pc, #44]	; (8009eec <MENU_Fill+0x1514>)
 8009ebe:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	endDay[4].enter = &setting[3];
 8009ec2:	4b0d      	ldr	r3, [pc, #52]	; (8009ef8 <MENU_Fill+0x1520>)
 8009ec4:	4a13      	ldr	r2, [pc, #76]	; (8009f14 <MENU_Fill+0x153c>)
 8009ec6:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
}
 8009eca:	bf00      	nop
 8009ecc:	bd80      	pop	{r7, pc}
 8009ece:	bf00      	nop
 8009ed0:	20002984 	.word	0x20002984
 8009ed4:	0800afc8 	.word	0x0800afc8
 8009ed8:	20000e76 	.word	0x20000e76
 8009edc:	0800af5c 	.word	0x0800af5c
 8009ee0:	08005719 	.word	0x08005719
 8009ee4:	20002a34 	.word	0x20002a34
 8009ee8:	0800af20 	.word	0x0800af20
 8009eec:	080008c7 	.word	0x080008c7
 8009ef0:	20002538 	.word	0x20002538
 8009ef4:	0800aee4 	.word	0x0800aee4
 8009ef8:	20001a90 	.word	0x20001a90
 8009efc:	0800afb8 	.word	0x0800afb8
 8009f00:	20000e74 	.word	0x20000e74
 8009f04:	0800afc0 	.word	0x0800afc0
 8009f08:	20000e75 	.word	0x20000e75
 8009f0c:	08005779 	.word	0x08005779
 8009f10:	20001b40 	.word	0x20001b40
 8009f14:	20002564 	.word	0x20002564

08009f18 <MENU_FillSection>:
//
//-------------------------------------------------------------
//
//Automatic fill: id, sectionName, up, down
static void MENU_FillSection(MenuItemStruct *section, uint8_t numItemInSection, char *sectionName) {
 8009f18:	b480      	push	{r7}
 8009f1a:	b087      	sub	sp, #28
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	60f8      	str	r0, [r7, #12]
 8009f20:	460b      	mov	r3, r1
 8009f22:	607a      	str	r2, [r7, #4]
 8009f24:	72fb      	strb	r3, [r7, #11]

	for (int i = 0; i < numItemInSection; i++) {
 8009f26:	2300      	movs	r3, #0
 8009f28:	617b      	str	r3, [r7, #20]
 8009f2a:	e04a      	b.n	8009fc2 <MENU_FillSection+0xaa>
		section[i].id = i;
 8009f2c:	697b      	ldr	r3, [r7, #20]
 8009f2e:	222c      	movs	r2, #44	; 0x2c
 8009f30:	fb02 f303 	mul.w	r3, r2, r3
 8009f34:	68fa      	ldr	r2, [r7, #12]
 8009f36:	4413      	add	r3, r2
 8009f38:	697a      	ldr	r2, [r7, #20]
 8009f3a:	b2d2      	uxtb	r2, r2
 8009f3c:	701a      	strb	r2, [r3, #0]

		section[i].sectionName = sectionName;
 8009f3e:	697b      	ldr	r3, [r7, #20]
 8009f40:	222c      	movs	r2, #44	; 0x2c
 8009f42:	fb02 f303 	mul.w	r3, r2, r3
 8009f46:	68fa      	ldr	r2, [r7, #12]
 8009f48:	4413      	add	r3, r2
 8009f4a:	687a      	ldr	r2, [r7, #4]
 8009f4c:	619a      	str	r2, [r3, #24]
		if (i == (numItemInSection - 1)) {
 8009f4e:	7afb      	ldrb	r3, [r7, #11]
 8009f50:	3b01      	subs	r3, #1
 8009f52:	697a      	ldr	r2, [r7, #20]
 8009f54:	429a      	cmp	r2, r3
 8009f56:	d108      	bne.n	8009f6a <MENU_FillSection+0x52>
			section[i].down = NULL;
 8009f58:	697b      	ldr	r3, [r7, #20]
 8009f5a:	222c      	movs	r2, #44	; 0x2c
 8009f5c:	fb02 f303 	mul.w	r3, r2, r3
 8009f60:	68fa      	ldr	r2, [r7, #12]
 8009f62:	4413      	add	r3, r2
 8009f64:	2200      	movs	r2, #0
 8009f66:	621a      	str	r2, [r3, #32]
 8009f68:	e00d      	b.n	8009f86 <MENU_FillSection+0x6e>
		} else {
			section[i].down = &section[i + 1];
 8009f6a:	697b      	ldr	r3, [r7, #20]
 8009f6c:	3301      	adds	r3, #1
 8009f6e:	222c      	movs	r2, #44	; 0x2c
 8009f70:	fb02 f203 	mul.w	r2, r2, r3
 8009f74:	697b      	ldr	r3, [r7, #20]
 8009f76:	212c      	movs	r1, #44	; 0x2c
 8009f78:	fb01 f303 	mul.w	r3, r1, r3
 8009f7c:	68f9      	ldr	r1, [r7, #12]
 8009f7e:	440b      	add	r3, r1
 8009f80:	68f9      	ldr	r1, [r7, #12]
 8009f82:	440a      	add	r2, r1
 8009f84:	621a      	str	r2, [r3, #32]
		}

		if (i == 0) {
 8009f86:	697b      	ldr	r3, [r7, #20]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d108      	bne.n	8009f9e <MENU_FillSection+0x86>
			section[i].up = NULL;
 8009f8c:	697b      	ldr	r3, [r7, #20]
 8009f8e:	222c      	movs	r2, #44	; 0x2c
 8009f90:	fb02 f303 	mul.w	r3, r2, r3
 8009f94:	68fa      	ldr	r2, [r7, #12]
 8009f96:	4413      	add	r3, r2
 8009f98:	2200      	movs	r2, #0
 8009f9a:	61da      	str	r2, [r3, #28]
 8009f9c:	e00e      	b.n	8009fbc <MENU_FillSection+0xa4>
		} else {
			section[i].up = &section[i - 1];
 8009f9e:	697b      	ldr	r3, [r7, #20]
 8009fa0:	222c      	movs	r2, #44	; 0x2c
 8009fa2:	fb02 f303 	mul.w	r3, r2, r3
 8009fa6:	f1a3 022c 	sub.w	r2, r3, #44	; 0x2c
 8009faa:	697b      	ldr	r3, [r7, #20]
 8009fac:	212c      	movs	r1, #44	; 0x2c
 8009fae:	fb01 f303 	mul.w	r3, r1, r3
 8009fb2:	68f9      	ldr	r1, [r7, #12]
 8009fb4:	440b      	add	r3, r1
 8009fb6:	68f9      	ldr	r1, [r7, #12]
 8009fb8:	440a      	add	r2, r1
 8009fba:	61da      	str	r2, [r3, #28]
	for (int i = 0; i < numItemInSection; i++) {
 8009fbc:	697b      	ldr	r3, [r7, #20]
 8009fbe:	3301      	adds	r3, #1
 8009fc0:	617b      	str	r3, [r7, #20]
 8009fc2:	7afb      	ldrb	r3, [r7, #11]
 8009fc4:	697a      	ldr	r2, [r7, #20]
 8009fc6:	429a      	cmp	r2, r3
 8009fc8:	dbb0      	blt.n	8009f2c <MENU_FillSection+0x14>
		}
	}
}
 8009fca:	bf00      	nop
 8009fcc:	bf00      	nop
 8009fce:	371c      	adds	r7, #28
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd6:	4770      	bx	lr

08009fd8 <ssd1306_WriteCommand>:
static SSD1306_t SSD1306;
//
//  Send a byte to the command register
//
static void ssd1306_WriteCommand(uint8_t command)
{
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	b086      	sub	sp, #24
 8009fdc:	af04      	add	r7, sp, #16
 8009fde:	4603      	mov	r3, r0
 8009fe0:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR,0x00,1,&command,1,10);
 8009fe2:	230a      	movs	r3, #10
 8009fe4:	9302      	str	r3, [sp, #8]
 8009fe6:	2301      	movs	r3, #1
 8009fe8:	9301      	str	r3, [sp, #4]
 8009fea:	1dfb      	adds	r3, r7, #7
 8009fec:	9300      	str	r3, [sp, #0]
 8009fee:	2301      	movs	r3, #1
 8009ff0:	2200      	movs	r2, #0
 8009ff2:	2178      	movs	r1, #120	; 0x78
 8009ff4:	4803      	ldr	r0, [pc, #12]	; (800a004 <ssd1306_WriteCommand+0x2c>)
 8009ff6:	f7f7 fa81 	bl	80014fc <HAL_I2C_Mem_Write>
}
 8009ffa:	bf00      	nop
 8009ffc:	3708      	adds	r7, #8
 8009ffe:	46bd      	mov	sp, r7
 800a000:	bd80      	pop	{r7, pc}
 800a002:	bf00      	nop
 800a004:	20001748 	.word	0x20001748

0800a008 <ssd1306_Init>:

//
//	Initialize the oled screen
//
uint8_t ssd1306_Init(void)
{	
 800a008:	b580      	push	{r7, lr}
 800a00a:	af00      	add	r7, sp, #0
	// Wait for the screen to boot
	HAL_Delay(100);
 800a00c:	2064      	movs	r0, #100	; 0x64
 800a00e:	f7f6 fd2b 	bl	8000a68 <HAL_Delay>
	
	/* Init LCD */
	ssd1306_WriteCommand(0xAE); //display off
 800a012:	20ae      	movs	r0, #174	; 0xae
 800a014:	f7ff ffe0 	bl	8009fd8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode   
 800a018:	2020      	movs	r0, #32
 800a01a:	f7ff ffdd 	bl	8009fd8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800a01e:	2010      	movs	r0, #16
 800a020:	f7ff ffda 	bl	8009fd8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800a024:	20b0      	movs	r0, #176	; 0xb0
 800a026:	f7ff ffd7 	bl	8009fd8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800a02a:	20c8      	movs	r0, #200	; 0xc8
 800a02c:	f7ff ffd4 	bl	8009fd8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //---set low column address
 800a030:	2000      	movs	r0, #0
 800a032:	f7ff ffd1 	bl	8009fd8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //---set high column address
 800a036:	2010      	movs	r0, #16
 800a038:	f7ff ffce 	bl	8009fd8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x40); //--set start line address
 800a03c:	2040      	movs	r0, #64	; 0x40
 800a03e:	f7ff ffcb 	bl	8009fd8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x81); //--set contrast control register
 800a042:	2081      	movs	r0, #129	; 0x81
 800a044:	f7ff ffc8 	bl	8009fd8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xFF);
 800a048:	20ff      	movs	r0, #255	; 0xff
 800a04a:	f7ff ffc5 	bl	8009fd8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127
 800a04e:	20a1      	movs	r0, #161	; 0xa1
 800a050:	f7ff ffc2 	bl	8009fd8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA6); //--set normal display
 800a054:	20a6      	movs	r0, #166	; 0xa6
 800a056:	f7ff ffbf 	bl	8009fd8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64)
 800a05a:	20a8      	movs	r0, #168	; 0xa8
 800a05c:	f7ff ffbc 	bl	8009fd8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x3F); //
 800a060:	203f      	movs	r0, #63	; 0x3f
 800a062:	f7ff ffb9 	bl	8009fd8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800a066:	20a4      	movs	r0, #164	; 0xa4
 800a068:	f7ff ffb6 	bl	8009fd8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD3); //-set display offset
 800a06c:	20d3      	movs	r0, #211	; 0xd3
 800a06e:	f7ff ffb3 	bl	8009fd8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //-not offset
 800a072:	2000      	movs	r0, #0
 800a074:	f7ff ffb0 	bl	8009fd8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800a078:	20d5      	movs	r0, #213	; 0xd5
 800a07a:	f7ff ffad 	bl	8009fd8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xF0); //--set divide ratio
 800a07e:	20f0      	movs	r0, #240	; 0xf0
 800a080:	f7ff ffaa 	bl	8009fd8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800a084:	20d9      	movs	r0, #217	; 0xd9
 800a086:	f7ff ffa7 	bl	8009fd8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x22); //
 800a08a:	2022      	movs	r0, #34	; 0x22
 800a08c:	f7ff ffa4 	bl	8009fd8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration
 800a090:	20da      	movs	r0, #218	; 0xda
 800a092:	f7ff ffa1 	bl	8009fd8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x12);
 800a096:	2012      	movs	r0, #18
 800a098:	f7ff ff9e 	bl	8009fd8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDB); //--set vcomh
 800a09c:	20db      	movs	r0, #219	; 0xdb
 800a09e:	f7ff ff9b 	bl	8009fd8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 800a0a2:	2020      	movs	r0, #32
 800a0a4:	f7ff ff98 	bl	8009fd8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800a0a8:	208d      	movs	r0, #141	; 0x8d
 800a0aa:	f7ff ff95 	bl	8009fd8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x14); //
 800a0ae:	2014      	movs	r0, #20
 800a0b0:	f7ff ff92 	bl	8009fd8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 800a0b4:	20af      	movs	r0, #175	; 0xaf
 800a0b6:	f7ff ff8f 	bl	8009fd8 <ssd1306_WriteCommand>
	
	// Clear screen
	ssd1306_Fill(Black);
 800a0ba:	2000      	movs	r0, #0
 800a0bc:	f000 f838 	bl	800a130 <ssd1306_Fill>
	
	// Flush buffer to screen
	ssd1306_UpdateScreen();
 800a0c0:	f000 f85a 	bl	800a178 <ssd1306_UpdateScreen>
	
	// Set default values for screen object
	SSD1306.CurrentX = 0;
 800a0c4:	4b05      	ldr	r3, [pc, #20]	; (800a0dc <ssd1306_Init+0xd4>)
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 800a0ca:	4b04      	ldr	r3, [pc, #16]	; (800a0dc <ssd1306_Init+0xd4>)
 800a0cc:	2200      	movs	r2, #0
 800a0ce:	805a      	strh	r2, [r3, #2]
	
	SSD1306.Initialized = 1;
 800a0d0:	4b02      	ldr	r3, [pc, #8]	; (800a0dc <ssd1306_Init+0xd4>)
 800a0d2:	2201      	movs	r2, #1
 800a0d4:	715a      	strb	r2, [r3, #5]
	
	return 1;
 800a0d6:	2301      	movs	r3, #1
}
 800a0d8:	4618      	mov	r0, r3
 800a0da:	bd80      	pop	{r7, pc}
 800a0dc:	200012cc 	.word	0x200012cc

0800a0e0 <ssd1306_on>:

void ssd1306_on(void)
	{
 800a0e0:	b580      	push	{r7, lr}
 800a0e2:	af00      	add	r7, sp, #0
ssd1306_WriteCommand(0xAF);
 800a0e4:	20af      	movs	r0, #175	; 0xaf
 800a0e6:	f7ff ff77 	bl	8009fd8 <ssd1306_WriteCommand>
displayStatus =SSD1306_ON;
 800a0ea:	4b02      	ldr	r3, [pc, #8]	; (800a0f4 <ssd1306_on+0x14>)
 800a0ec:	2201      	movs	r2, #1
 800a0ee:	701a      	strb	r2, [r3, #0]
}
 800a0f0:	bf00      	nop
 800a0f2:	bd80      	pop	{r7, pc}
 800a0f4:	20000ec8 	.word	0x20000ec8

0800a0f8 <ssd1306_off>:
	
void ssd1306_off(void)
	{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	af00      	add	r7, sp, #0
ssd1306_WriteCommand(0xAE); 
 800a0fc:	20ae      	movs	r0, #174	; 0xae
 800a0fe:	f7ff ff6b 	bl	8009fd8 <ssd1306_WriteCommand>
displayStatus =SSD1306_OFF;
 800a102:	4b02      	ldr	r3, [pc, #8]	; (800a10c <ssd1306_off+0x14>)
 800a104:	2200      	movs	r2, #0
 800a106:	701a      	strb	r2, [r3, #0]
}
 800a108:	bf00      	nop
 800a10a:	bd80      	pop	{r7, pc}
 800a10c:	20000ec8 	.word	0x20000ec8

0800a110 <ssd1306_CheckDisplayStatus>:

SSD1306_STATUS ssd1306_CheckDisplayStatus(void){
 800a110:	b480      	push	{r7}
 800a112:	af00      	add	r7, sp, #0
	return (displayStatus ? SSD1306_ON: SSD1306_OFF);
 800a114:	4b05      	ldr	r3, [pc, #20]	; (800a12c <ssd1306_CheckDisplayStatus+0x1c>)
 800a116:	781b      	ldrb	r3, [r3, #0]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	bf14      	ite	ne
 800a11c:	2301      	movne	r3, #1
 800a11e:	2300      	moveq	r3, #0
 800a120:	b2db      	uxtb	r3, r3
}
 800a122:	4618      	mov	r0, r3
 800a124:	46bd      	mov	sp, r7
 800a126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12a:	4770      	bx	lr
 800a12c:	20000ec8 	.word	0x20000ec8

0800a130 <ssd1306_Fill>:

//
//  Fill the whole screen with the given color
//
void ssd1306_Fill(SSD1306_COLOR color) 
{
 800a130:	b480      	push	{r7}
 800a132:	b085      	sub	sp, #20
 800a134:	af00      	add	r7, sp, #0
 800a136:	4603      	mov	r3, r0
 800a138:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	uint32_t i;

	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 800a13a:	2300      	movs	r3, #0
 800a13c:	60fb      	str	r3, [r7, #12]
 800a13e:	e00d      	b.n	800a15c <ssd1306_Fill+0x2c>
	{
		SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 800a140:	79fb      	ldrb	r3, [r7, #7]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d101      	bne.n	800a14a <ssd1306_Fill+0x1a>
 800a146:	2100      	movs	r1, #0
 800a148:	e000      	b.n	800a14c <ssd1306_Fill+0x1c>
 800a14a:	21ff      	movs	r1, #255	; 0xff
 800a14c:	4a09      	ldr	r2, [pc, #36]	; (800a174 <ssd1306_Fill+0x44>)
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	4413      	add	r3, r2
 800a152:	460a      	mov	r2, r1
 800a154:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	3301      	adds	r3, #1
 800a15a:	60fb      	str	r3, [r7, #12]
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a162:	d3ed      	bcc.n	800a140 <ssd1306_Fill+0x10>
	}
}
 800a164:	bf00      	nop
 800a166:	bf00      	nop
 800a168:	3714      	adds	r7, #20
 800a16a:	46bd      	mov	sp, r7
 800a16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a170:	4770      	bx	lr
 800a172:	bf00      	nop
 800a174:	20000ecc 	.word	0x20000ecc

0800a178 <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(void) 
{
 800a178:	b580      	push	{r7, lr}
 800a17a:	b086      	sub	sp, #24
 800a17c:	af04      	add	r7, sp, #16
	uint8_t i;
	
	for (i = 0; i < 8; i++) {
 800a17e:	2300      	movs	r3, #0
 800a180:	71fb      	strb	r3, [r7, #7]
 800a182:	e01d      	b.n	800a1c0 <ssd1306_UpdateScreen+0x48>
		ssd1306_WriteCommand(0xB0 + i);
 800a184:	79fb      	ldrb	r3, [r7, #7]
 800a186:	3b50      	subs	r3, #80	; 0x50
 800a188:	b2db      	uxtb	r3, r3
 800a18a:	4618      	mov	r0, r3
 800a18c:	f7ff ff24 	bl	8009fd8 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x00);
 800a190:	2000      	movs	r0, #0
 800a192:	f7ff ff21 	bl	8009fd8 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x10);
 800a196:	2010      	movs	r0, #16
 800a198:	f7ff ff1e 	bl	8009fd8 <ssd1306_WriteCommand>

		HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100);
 800a19c:	79fb      	ldrb	r3, [r7, #7]
 800a19e:	01db      	lsls	r3, r3, #7
 800a1a0:	4a0b      	ldr	r2, [pc, #44]	; (800a1d0 <ssd1306_UpdateScreen+0x58>)
 800a1a2:	4413      	add	r3, r2
 800a1a4:	2264      	movs	r2, #100	; 0x64
 800a1a6:	9202      	str	r2, [sp, #8]
 800a1a8:	2280      	movs	r2, #128	; 0x80
 800a1aa:	9201      	str	r2, [sp, #4]
 800a1ac:	9300      	str	r3, [sp, #0]
 800a1ae:	2301      	movs	r3, #1
 800a1b0:	2240      	movs	r2, #64	; 0x40
 800a1b2:	2178      	movs	r1, #120	; 0x78
 800a1b4:	4807      	ldr	r0, [pc, #28]	; (800a1d4 <ssd1306_UpdateScreen+0x5c>)
 800a1b6:	f7f7 f9a1 	bl	80014fc <HAL_I2C_Mem_Write>
	for (i = 0; i < 8; i++) {
 800a1ba:	79fb      	ldrb	r3, [r7, #7]
 800a1bc:	3301      	adds	r3, #1
 800a1be:	71fb      	strb	r3, [r7, #7]
 800a1c0:	79fb      	ldrb	r3, [r7, #7]
 800a1c2:	2b07      	cmp	r3, #7
 800a1c4:	d9de      	bls.n	800a184 <ssd1306_UpdateScreen+0xc>
	}
}
 800a1c6:	bf00      	nop
 800a1c8:	bf00      	nop
 800a1ca:	3708      	adds	r7, #8
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	bd80      	pop	{r7, pc}
 800a1d0:	20000ecc 	.word	0x20000ecc
 800a1d4:	20001748 	.word	0x20001748

0800a1d8 <ssd1306_DrawPixel>:
//	X => X Coordinate
//	Y => Y Coordinate
//	color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 800a1d8:	b480      	push	{r7}
 800a1da:	b083      	sub	sp, #12
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	4603      	mov	r3, r0
 800a1e0:	71fb      	strb	r3, [r7, #7]
 800a1e2:	460b      	mov	r3, r1
 800a1e4:	71bb      	strb	r3, [r7, #6]
 800a1e6:	4613      	mov	r3, r2
 800a1e8:	717b      	strb	r3, [r7, #5]
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) 
 800a1ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	db48      	blt.n	800a284 <ssd1306_DrawPixel+0xac>
 800a1f2:	79bb      	ldrb	r3, [r7, #6]
 800a1f4:	2b3f      	cmp	r3, #63	; 0x3f
 800a1f6:	d845      	bhi.n	800a284 <ssd1306_DrawPixel+0xac>
		// Don't write outside the buffer
		return;
	}
	
	// Check if pixel should be inverted
	if (SSD1306.Inverted) 
 800a1f8:	4b25      	ldr	r3, [pc, #148]	; (800a290 <ssd1306_DrawPixel+0xb8>)
 800a1fa:	791b      	ldrb	r3, [r3, #4]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d006      	beq.n	800a20e <ssd1306_DrawPixel+0x36>
	{
		color = (SSD1306_COLOR)!color;
 800a200:	797b      	ldrb	r3, [r7, #5]
 800a202:	2b00      	cmp	r3, #0
 800a204:	bf0c      	ite	eq
 800a206:	2301      	moveq	r3, #1
 800a208:	2300      	movne	r3, #0
 800a20a:	b2db      	uxtb	r3, r3
 800a20c:	717b      	strb	r3, [r7, #5]
	}
	
	// Draw in the right color
	if (color == White)
 800a20e:	797b      	ldrb	r3, [r7, #5]
 800a210:	2b01      	cmp	r3, #1
 800a212:	d11a      	bne.n	800a24a <ssd1306_DrawPixel+0x72>
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800a214:	79fa      	ldrb	r2, [r7, #7]
 800a216:	79bb      	ldrb	r3, [r7, #6]
 800a218:	08db      	lsrs	r3, r3, #3
 800a21a:	b2d8      	uxtb	r0, r3
 800a21c:	4603      	mov	r3, r0
 800a21e:	01db      	lsls	r3, r3, #7
 800a220:	4413      	add	r3, r2
 800a222:	4a1c      	ldr	r2, [pc, #112]	; (800a294 <ssd1306_DrawPixel+0xbc>)
 800a224:	5cd3      	ldrb	r3, [r2, r3]
 800a226:	b25a      	sxtb	r2, r3
 800a228:	79bb      	ldrb	r3, [r7, #6]
 800a22a:	f003 0307 	and.w	r3, r3, #7
 800a22e:	2101      	movs	r1, #1
 800a230:	fa01 f303 	lsl.w	r3, r1, r3
 800a234:	b25b      	sxtb	r3, r3
 800a236:	4313      	orrs	r3, r2
 800a238:	b259      	sxtb	r1, r3
 800a23a:	79fa      	ldrb	r2, [r7, #7]
 800a23c:	4603      	mov	r3, r0
 800a23e:	01db      	lsls	r3, r3, #7
 800a240:	4413      	add	r3, r2
 800a242:	b2c9      	uxtb	r1, r1
 800a244:	4a13      	ldr	r2, [pc, #76]	; (800a294 <ssd1306_DrawPixel+0xbc>)
 800a246:	54d1      	strb	r1, [r2, r3]
 800a248:	e01d      	b.n	800a286 <ssd1306_DrawPixel+0xae>
	} 
	else 
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800a24a:	79fa      	ldrb	r2, [r7, #7]
 800a24c:	79bb      	ldrb	r3, [r7, #6]
 800a24e:	08db      	lsrs	r3, r3, #3
 800a250:	b2d8      	uxtb	r0, r3
 800a252:	4603      	mov	r3, r0
 800a254:	01db      	lsls	r3, r3, #7
 800a256:	4413      	add	r3, r2
 800a258:	4a0e      	ldr	r2, [pc, #56]	; (800a294 <ssd1306_DrawPixel+0xbc>)
 800a25a:	5cd3      	ldrb	r3, [r2, r3]
 800a25c:	b25a      	sxtb	r2, r3
 800a25e:	79bb      	ldrb	r3, [r7, #6]
 800a260:	f003 0307 	and.w	r3, r3, #7
 800a264:	2101      	movs	r1, #1
 800a266:	fa01 f303 	lsl.w	r3, r1, r3
 800a26a:	b25b      	sxtb	r3, r3
 800a26c:	43db      	mvns	r3, r3
 800a26e:	b25b      	sxtb	r3, r3
 800a270:	4013      	ands	r3, r2
 800a272:	b259      	sxtb	r1, r3
 800a274:	79fa      	ldrb	r2, [r7, #7]
 800a276:	4603      	mov	r3, r0
 800a278:	01db      	lsls	r3, r3, #7
 800a27a:	4413      	add	r3, r2
 800a27c:	b2c9      	uxtb	r1, r1
 800a27e:	4a05      	ldr	r2, [pc, #20]	; (800a294 <ssd1306_DrawPixel+0xbc>)
 800a280:	54d1      	strb	r1, [r2, r3]
 800a282:	e000      	b.n	800a286 <ssd1306_DrawPixel+0xae>
		return;
 800a284:	bf00      	nop
	}
}
 800a286:	370c      	adds	r7, #12
 800a288:	46bd      	mov	sp, r7
 800a28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28e:	4770      	bx	lr
 800a290:	200012cc 	.word	0x200012cc
 800a294:	20000ecc 	.word	0x20000ecc

0800a298 <ssd1306_WriteChar>:
//	ch 		=> char om weg te schrijven
//	Font 	=> Font waarmee we gaan schrijven
//	color 	=> Black or White
//
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 800a298:	b590      	push	{r4, r7, lr}
 800a29a:	b089      	sub	sp, #36	; 0x24
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	4604      	mov	r4, r0
 800a2a0:	1d38      	adds	r0, r7, #4
 800a2a2:	e880 0006 	stmia.w	r0, {r1, r2}
 800a2a6:	461a      	mov	r2, r3
 800a2a8:	4623      	mov	r3, r4
 800a2aa:	73fb      	strb	r3, [r7, #15]
 800a2ac:	4613      	mov	r3, r2
 800a2ae:	73bb      	strb	r3, [r7, #14]
	uint32_t i, b, j;
	
	// Check remaining space on current line
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 800a2b0:	4b38      	ldr	r3, [pc, #224]	; (800a394 <ssd1306_WriteChar+0xfc>)
 800a2b2:	881b      	ldrh	r3, [r3, #0]
 800a2b4:	461a      	mov	r2, r3
 800a2b6:	793b      	ldrb	r3, [r7, #4]
 800a2b8:	4413      	add	r3, r2
 800a2ba:	2b7f      	cmp	r3, #127	; 0x7f
 800a2bc:	d806      	bhi.n	800a2cc <ssd1306_WriteChar+0x34>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 800a2be:	4b35      	ldr	r3, [pc, #212]	; (800a394 <ssd1306_WriteChar+0xfc>)
 800a2c0:	885b      	ldrh	r3, [r3, #2]
 800a2c2:	461a      	mov	r2, r3
 800a2c4:	797b      	ldrb	r3, [r7, #5]
 800a2c6:	4413      	add	r3, r2
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 800a2c8:	2b3f      	cmp	r3, #63	; 0x3f
 800a2ca:	d901      	bls.n	800a2d0 <ssd1306_WriteChar+0x38>
	{
		// Not enough space on current line
		return 0;
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	e05d      	b.n	800a38c <ssd1306_WriteChar+0xf4>
	}
	
	// Use the font to write
	for (i = 0; i < Font.FontHeight; i++)
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	61fb      	str	r3, [r7, #28]
 800a2d4:	e04c      	b.n	800a370 <ssd1306_WriteChar+0xd8>
	{
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 800a2d6:	68ba      	ldr	r2, [r7, #8]
 800a2d8:	7bfb      	ldrb	r3, [r7, #15]
 800a2da:	3b20      	subs	r3, #32
 800a2dc:	7979      	ldrb	r1, [r7, #5]
 800a2de:	fb01 f303 	mul.w	r3, r1, r3
 800a2e2:	4619      	mov	r1, r3
 800a2e4:	69fb      	ldr	r3, [r7, #28]
 800a2e6:	440b      	add	r3, r1
 800a2e8:	005b      	lsls	r3, r3, #1
 800a2ea:	4413      	add	r3, r2
 800a2ec:	881b      	ldrh	r3, [r3, #0]
 800a2ee:	617b      	str	r3, [r7, #20]
		for (j = 0; j < Font.FontWidth; j++)
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	61bb      	str	r3, [r7, #24]
 800a2f4:	e034      	b.n	800a360 <ssd1306_WriteChar+0xc8>
		{
			if ((b << j) & 0x8000) 
 800a2f6:	697a      	ldr	r2, [r7, #20]
 800a2f8:	69bb      	ldr	r3, [r7, #24]
 800a2fa:	fa02 f303 	lsl.w	r3, r2, r3
 800a2fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a302:	2b00      	cmp	r3, #0
 800a304:	d012      	beq.n	800a32c <ssd1306_WriteChar+0x94>
			{
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800a306:	4b23      	ldr	r3, [pc, #140]	; (800a394 <ssd1306_WriteChar+0xfc>)
 800a308:	881b      	ldrh	r3, [r3, #0]
 800a30a:	b2da      	uxtb	r2, r3
 800a30c:	69bb      	ldr	r3, [r7, #24]
 800a30e:	b2db      	uxtb	r3, r3
 800a310:	4413      	add	r3, r2
 800a312:	b2d8      	uxtb	r0, r3
 800a314:	4b1f      	ldr	r3, [pc, #124]	; (800a394 <ssd1306_WriteChar+0xfc>)
 800a316:	885b      	ldrh	r3, [r3, #2]
 800a318:	b2da      	uxtb	r2, r3
 800a31a:	69fb      	ldr	r3, [r7, #28]
 800a31c:	b2db      	uxtb	r3, r3
 800a31e:	4413      	add	r3, r2
 800a320:	b2db      	uxtb	r3, r3
 800a322:	7bba      	ldrb	r2, [r7, #14]
 800a324:	4619      	mov	r1, r3
 800a326:	f7ff ff57 	bl	800a1d8 <ssd1306_DrawPixel>
 800a32a:	e016      	b.n	800a35a <ssd1306_WriteChar+0xc2>
			} 
			else 
			{
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 800a32c:	4b19      	ldr	r3, [pc, #100]	; (800a394 <ssd1306_WriteChar+0xfc>)
 800a32e:	881b      	ldrh	r3, [r3, #0]
 800a330:	b2da      	uxtb	r2, r3
 800a332:	69bb      	ldr	r3, [r7, #24]
 800a334:	b2db      	uxtb	r3, r3
 800a336:	4413      	add	r3, r2
 800a338:	b2d8      	uxtb	r0, r3
 800a33a:	4b16      	ldr	r3, [pc, #88]	; (800a394 <ssd1306_WriteChar+0xfc>)
 800a33c:	885b      	ldrh	r3, [r3, #2]
 800a33e:	b2da      	uxtb	r2, r3
 800a340:	69fb      	ldr	r3, [r7, #28]
 800a342:	b2db      	uxtb	r3, r3
 800a344:	4413      	add	r3, r2
 800a346:	b2d9      	uxtb	r1, r3
 800a348:	7bbb      	ldrb	r3, [r7, #14]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	bf0c      	ite	eq
 800a34e:	2301      	moveq	r3, #1
 800a350:	2300      	movne	r3, #0
 800a352:	b2db      	uxtb	r3, r3
 800a354:	461a      	mov	r2, r3
 800a356:	f7ff ff3f 	bl	800a1d8 <ssd1306_DrawPixel>
		for (j = 0; j < Font.FontWidth; j++)
 800a35a:	69bb      	ldr	r3, [r7, #24]
 800a35c:	3301      	adds	r3, #1
 800a35e:	61bb      	str	r3, [r7, #24]
 800a360:	793b      	ldrb	r3, [r7, #4]
 800a362:	461a      	mov	r2, r3
 800a364:	69bb      	ldr	r3, [r7, #24]
 800a366:	4293      	cmp	r3, r2
 800a368:	d3c5      	bcc.n	800a2f6 <ssd1306_WriteChar+0x5e>
	for (i = 0; i < Font.FontHeight; i++)
 800a36a:	69fb      	ldr	r3, [r7, #28]
 800a36c:	3301      	adds	r3, #1
 800a36e:	61fb      	str	r3, [r7, #28]
 800a370:	797b      	ldrb	r3, [r7, #5]
 800a372:	461a      	mov	r2, r3
 800a374:	69fb      	ldr	r3, [r7, #28]
 800a376:	4293      	cmp	r3, r2
 800a378:	d3ad      	bcc.n	800a2d6 <ssd1306_WriteChar+0x3e>
			}
		}
	}
	
	// The current space is now taken
	SSD1306.CurrentX += Font.FontWidth;
 800a37a:	4b06      	ldr	r3, [pc, #24]	; (800a394 <ssd1306_WriteChar+0xfc>)
 800a37c:	881a      	ldrh	r2, [r3, #0]
 800a37e:	793b      	ldrb	r3, [r7, #4]
 800a380:	b29b      	uxth	r3, r3
 800a382:	4413      	add	r3, r2
 800a384:	b29a      	uxth	r2, r3
 800a386:	4b03      	ldr	r3, [pc, #12]	; (800a394 <ssd1306_WriteChar+0xfc>)
 800a388:	801a      	strh	r2, [r3, #0]
	
	// Return written char for validation
	return ch;
 800a38a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a38c:	4618      	mov	r0, r3
 800a38e:	3724      	adds	r7, #36	; 0x24
 800a390:	46bd      	mov	sp, r7
 800a392:	bd90      	pop	{r4, r7, pc}
 800a394:	200012cc 	.word	0x200012cc

0800a398 <ssd1306_WriteString>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color)
{
 800a398:	b580      	push	{r7, lr}
 800a39a:	b084      	sub	sp, #16
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	60f8      	str	r0, [r7, #12]
 800a3a0:	1d38      	adds	r0, r7, #4
 800a3a2:	e880 0006 	stmia.w	r0, {r1, r2}
 800a3a6:	70fb      	strb	r3, [r7, #3]
	// Write until null-byte
	while (*str) 
 800a3a8:	e012      	b.n	800a3d0 <ssd1306_WriteString+0x38>
	{
		if (ssd1306_WriteChar(*str, Font, color) != *str)
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	7818      	ldrb	r0, [r3, #0]
 800a3ae:	78fb      	ldrb	r3, [r7, #3]
 800a3b0:	1d3a      	adds	r2, r7, #4
 800a3b2:	ca06      	ldmia	r2, {r1, r2}
 800a3b4:	f7ff ff70 	bl	800a298 <ssd1306_WriteChar>
 800a3b8:	4603      	mov	r3, r0
 800a3ba:	461a      	mov	r2, r3
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	781b      	ldrb	r3, [r3, #0]
 800a3c0:	429a      	cmp	r2, r3
 800a3c2:	d002      	beq.n	800a3ca <ssd1306_WriteString+0x32>
		{
			// Char could not be written
			return *str;
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	781b      	ldrb	r3, [r3, #0]
 800a3c8:	e008      	b.n	800a3dc <ssd1306_WriteString+0x44>
		}
		
		// Next char
		str++;
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	3301      	adds	r3, #1
 800a3ce:	60fb      	str	r3, [r7, #12]
	while (*str) 
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	781b      	ldrb	r3, [r3, #0]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d1e8      	bne.n	800a3aa <ssd1306_WriteString+0x12>
	}
	
	// Everything ok
	return *str;
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	781b      	ldrb	r3, [r3, #0]
}
 800a3dc:	4618      	mov	r0, r3
 800a3de:	3710      	adds	r7, #16
 800a3e0:	46bd      	mov	sp, r7
 800a3e2:	bd80      	pop	{r7, pc}

0800a3e4 <ssd1306_SetCursor>:

//
//	Position the cursor
//
void ssd1306_SetCursor(uint8_t x, uint8_t y) 
{
 800a3e4:	b480      	push	{r7}
 800a3e6:	b083      	sub	sp, #12
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	4603      	mov	r3, r0
 800a3ec:	460a      	mov	r2, r1
 800a3ee:	71fb      	strb	r3, [r7, #7]
 800a3f0:	4613      	mov	r3, r2
 800a3f2:	71bb      	strb	r3, [r7, #6]
	SSD1306.CurrentX = x;
 800a3f4:	79fb      	ldrb	r3, [r7, #7]
 800a3f6:	b29a      	uxth	r2, r3
 800a3f8:	4b05      	ldr	r3, [pc, #20]	; (800a410 <ssd1306_SetCursor+0x2c>)
 800a3fa:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = y;
 800a3fc:	79bb      	ldrb	r3, [r7, #6]
 800a3fe:	b29a      	uxth	r2, r3
 800a400:	4b03      	ldr	r3, [pc, #12]	; (800a410 <ssd1306_SetCursor+0x2c>)
 800a402:	805a      	strh	r2, [r3, #2]
}
 800a404:	bf00      	nop
 800a406:	370c      	adds	r7, #12
 800a408:	46bd      	mov	sp, r7
 800a40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a40e:	4770      	bx	lr
 800a410:	200012cc 	.word	0x200012cc

0800a414 <__errno>:
 800a414:	4b01      	ldr	r3, [pc, #4]	; (800a41c <__errno+0x8>)
 800a416:	6818      	ldr	r0, [r3, #0]
 800a418:	4770      	bx	lr
 800a41a:	bf00      	nop
 800a41c:	20000028 	.word	0x20000028

0800a420 <__libc_init_array>:
 800a420:	b570      	push	{r4, r5, r6, lr}
 800a422:	4d0d      	ldr	r5, [pc, #52]	; (800a458 <__libc_init_array+0x38>)
 800a424:	4c0d      	ldr	r4, [pc, #52]	; (800a45c <__libc_init_array+0x3c>)
 800a426:	1b64      	subs	r4, r4, r5
 800a428:	10a4      	asrs	r4, r4, #2
 800a42a:	2600      	movs	r6, #0
 800a42c:	42a6      	cmp	r6, r4
 800a42e:	d109      	bne.n	800a444 <__libc_init_array+0x24>
 800a430:	4d0b      	ldr	r5, [pc, #44]	; (800a460 <__libc_init_array+0x40>)
 800a432:	4c0c      	ldr	r4, [pc, #48]	; (800a464 <__libc_init_array+0x44>)
 800a434:	f000 fc4e 	bl	800acd4 <_init>
 800a438:	1b64      	subs	r4, r4, r5
 800a43a:	10a4      	asrs	r4, r4, #2
 800a43c:	2600      	movs	r6, #0
 800a43e:	42a6      	cmp	r6, r4
 800a440:	d105      	bne.n	800a44e <__libc_init_array+0x2e>
 800a442:	bd70      	pop	{r4, r5, r6, pc}
 800a444:	f855 3b04 	ldr.w	r3, [r5], #4
 800a448:	4798      	blx	r3
 800a44a:	3601      	adds	r6, #1
 800a44c:	e7ee      	b.n	800a42c <__libc_init_array+0xc>
 800a44e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a452:	4798      	blx	r3
 800a454:	3601      	adds	r6, #1
 800a456:	e7f2      	b.n	800a43e <__libc_init_array+0x1e>
 800a458:	0800b848 	.word	0x0800b848
 800a45c:	0800b848 	.word	0x0800b848
 800a460:	0800b848 	.word	0x0800b848
 800a464:	0800b84c 	.word	0x0800b84c

0800a468 <memcpy>:
 800a468:	440a      	add	r2, r1
 800a46a:	4291      	cmp	r1, r2
 800a46c:	f100 33ff 	add.w	r3, r0, #4294967295
 800a470:	d100      	bne.n	800a474 <memcpy+0xc>
 800a472:	4770      	bx	lr
 800a474:	b510      	push	{r4, lr}
 800a476:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a47a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a47e:	4291      	cmp	r1, r2
 800a480:	d1f9      	bne.n	800a476 <memcpy+0xe>
 800a482:	bd10      	pop	{r4, pc}

0800a484 <memset>:
 800a484:	4402      	add	r2, r0
 800a486:	4603      	mov	r3, r0
 800a488:	4293      	cmp	r3, r2
 800a48a:	d100      	bne.n	800a48e <memset+0xa>
 800a48c:	4770      	bx	lr
 800a48e:	f803 1b01 	strb.w	r1, [r3], #1
 800a492:	e7f9      	b.n	800a488 <memset+0x4>

0800a494 <siprintf>:
 800a494:	b40e      	push	{r1, r2, r3}
 800a496:	b500      	push	{lr}
 800a498:	b09c      	sub	sp, #112	; 0x70
 800a49a:	ab1d      	add	r3, sp, #116	; 0x74
 800a49c:	9002      	str	r0, [sp, #8]
 800a49e:	9006      	str	r0, [sp, #24]
 800a4a0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a4a4:	4809      	ldr	r0, [pc, #36]	; (800a4cc <siprintf+0x38>)
 800a4a6:	9107      	str	r1, [sp, #28]
 800a4a8:	9104      	str	r1, [sp, #16]
 800a4aa:	4909      	ldr	r1, [pc, #36]	; (800a4d0 <siprintf+0x3c>)
 800a4ac:	f853 2b04 	ldr.w	r2, [r3], #4
 800a4b0:	9105      	str	r1, [sp, #20]
 800a4b2:	6800      	ldr	r0, [r0, #0]
 800a4b4:	9301      	str	r3, [sp, #4]
 800a4b6:	a902      	add	r1, sp, #8
 800a4b8:	f000 f868 	bl	800a58c <_svfiprintf_r>
 800a4bc:	9b02      	ldr	r3, [sp, #8]
 800a4be:	2200      	movs	r2, #0
 800a4c0:	701a      	strb	r2, [r3, #0]
 800a4c2:	b01c      	add	sp, #112	; 0x70
 800a4c4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a4c8:	b003      	add	sp, #12
 800a4ca:	4770      	bx	lr
 800a4cc:	20000028 	.word	0x20000028
 800a4d0:	ffff0208 	.word	0xffff0208

0800a4d4 <__ssputs_r>:
 800a4d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a4d8:	688e      	ldr	r6, [r1, #8]
 800a4da:	429e      	cmp	r6, r3
 800a4dc:	4682      	mov	sl, r0
 800a4de:	460c      	mov	r4, r1
 800a4e0:	4690      	mov	r8, r2
 800a4e2:	461f      	mov	r7, r3
 800a4e4:	d838      	bhi.n	800a558 <__ssputs_r+0x84>
 800a4e6:	898a      	ldrh	r2, [r1, #12]
 800a4e8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a4ec:	d032      	beq.n	800a554 <__ssputs_r+0x80>
 800a4ee:	6825      	ldr	r5, [r4, #0]
 800a4f0:	6909      	ldr	r1, [r1, #16]
 800a4f2:	eba5 0901 	sub.w	r9, r5, r1
 800a4f6:	6965      	ldr	r5, [r4, #20]
 800a4f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a4fc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a500:	3301      	adds	r3, #1
 800a502:	444b      	add	r3, r9
 800a504:	106d      	asrs	r5, r5, #1
 800a506:	429d      	cmp	r5, r3
 800a508:	bf38      	it	cc
 800a50a:	461d      	movcc	r5, r3
 800a50c:	0553      	lsls	r3, r2, #21
 800a50e:	d531      	bpl.n	800a574 <__ssputs_r+0xa0>
 800a510:	4629      	mov	r1, r5
 800a512:	f000 fb39 	bl	800ab88 <_malloc_r>
 800a516:	4606      	mov	r6, r0
 800a518:	b950      	cbnz	r0, 800a530 <__ssputs_r+0x5c>
 800a51a:	230c      	movs	r3, #12
 800a51c:	f8ca 3000 	str.w	r3, [sl]
 800a520:	89a3      	ldrh	r3, [r4, #12]
 800a522:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a526:	81a3      	strh	r3, [r4, #12]
 800a528:	f04f 30ff 	mov.w	r0, #4294967295
 800a52c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a530:	6921      	ldr	r1, [r4, #16]
 800a532:	464a      	mov	r2, r9
 800a534:	f7ff ff98 	bl	800a468 <memcpy>
 800a538:	89a3      	ldrh	r3, [r4, #12]
 800a53a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a53e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a542:	81a3      	strh	r3, [r4, #12]
 800a544:	6126      	str	r6, [r4, #16]
 800a546:	6165      	str	r5, [r4, #20]
 800a548:	444e      	add	r6, r9
 800a54a:	eba5 0509 	sub.w	r5, r5, r9
 800a54e:	6026      	str	r6, [r4, #0]
 800a550:	60a5      	str	r5, [r4, #8]
 800a552:	463e      	mov	r6, r7
 800a554:	42be      	cmp	r6, r7
 800a556:	d900      	bls.n	800a55a <__ssputs_r+0x86>
 800a558:	463e      	mov	r6, r7
 800a55a:	4632      	mov	r2, r6
 800a55c:	6820      	ldr	r0, [r4, #0]
 800a55e:	4641      	mov	r1, r8
 800a560:	f000 faa8 	bl	800aab4 <memmove>
 800a564:	68a3      	ldr	r3, [r4, #8]
 800a566:	6822      	ldr	r2, [r4, #0]
 800a568:	1b9b      	subs	r3, r3, r6
 800a56a:	4432      	add	r2, r6
 800a56c:	60a3      	str	r3, [r4, #8]
 800a56e:	6022      	str	r2, [r4, #0]
 800a570:	2000      	movs	r0, #0
 800a572:	e7db      	b.n	800a52c <__ssputs_r+0x58>
 800a574:	462a      	mov	r2, r5
 800a576:	f000 fb61 	bl	800ac3c <_realloc_r>
 800a57a:	4606      	mov	r6, r0
 800a57c:	2800      	cmp	r0, #0
 800a57e:	d1e1      	bne.n	800a544 <__ssputs_r+0x70>
 800a580:	6921      	ldr	r1, [r4, #16]
 800a582:	4650      	mov	r0, sl
 800a584:	f000 fab0 	bl	800aae8 <_free_r>
 800a588:	e7c7      	b.n	800a51a <__ssputs_r+0x46>
	...

0800a58c <_svfiprintf_r>:
 800a58c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a590:	4698      	mov	r8, r3
 800a592:	898b      	ldrh	r3, [r1, #12]
 800a594:	061b      	lsls	r3, r3, #24
 800a596:	b09d      	sub	sp, #116	; 0x74
 800a598:	4607      	mov	r7, r0
 800a59a:	460d      	mov	r5, r1
 800a59c:	4614      	mov	r4, r2
 800a59e:	d50e      	bpl.n	800a5be <_svfiprintf_r+0x32>
 800a5a0:	690b      	ldr	r3, [r1, #16]
 800a5a2:	b963      	cbnz	r3, 800a5be <_svfiprintf_r+0x32>
 800a5a4:	2140      	movs	r1, #64	; 0x40
 800a5a6:	f000 faef 	bl	800ab88 <_malloc_r>
 800a5aa:	6028      	str	r0, [r5, #0]
 800a5ac:	6128      	str	r0, [r5, #16]
 800a5ae:	b920      	cbnz	r0, 800a5ba <_svfiprintf_r+0x2e>
 800a5b0:	230c      	movs	r3, #12
 800a5b2:	603b      	str	r3, [r7, #0]
 800a5b4:	f04f 30ff 	mov.w	r0, #4294967295
 800a5b8:	e0d1      	b.n	800a75e <_svfiprintf_r+0x1d2>
 800a5ba:	2340      	movs	r3, #64	; 0x40
 800a5bc:	616b      	str	r3, [r5, #20]
 800a5be:	2300      	movs	r3, #0
 800a5c0:	9309      	str	r3, [sp, #36]	; 0x24
 800a5c2:	2320      	movs	r3, #32
 800a5c4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a5c8:	f8cd 800c 	str.w	r8, [sp, #12]
 800a5cc:	2330      	movs	r3, #48	; 0x30
 800a5ce:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a778 <_svfiprintf_r+0x1ec>
 800a5d2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a5d6:	f04f 0901 	mov.w	r9, #1
 800a5da:	4623      	mov	r3, r4
 800a5dc:	469a      	mov	sl, r3
 800a5de:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a5e2:	b10a      	cbz	r2, 800a5e8 <_svfiprintf_r+0x5c>
 800a5e4:	2a25      	cmp	r2, #37	; 0x25
 800a5e6:	d1f9      	bne.n	800a5dc <_svfiprintf_r+0x50>
 800a5e8:	ebba 0b04 	subs.w	fp, sl, r4
 800a5ec:	d00b      	beq.n	800a606 <_svfiprintf_r+0x7a>
 800a5ee:	465b      	mov	r3, fp
 800a5f0:	4622      	mov	r2, r4
 800a5f2:	4629      	mov	r1, r5
 800a5f4:	4638      	mov	r0, r7
 800a5f6:	f7ff ff6d 	bl	800a4d4 <__ssputs_r>
 800a5fa:	3001      	adds	r0, #1
 800a5fc:	f000 80aa 	beq.w	800a754 <_svfiprintf_r+0x1c8>
 800a600:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a602:	445a      	add	r2, fp
 800a604:	9209      	str	r2, [sp, #36]	; 0x24
 800a606:	f89a 3000 	ldrb.w	r3, [sl]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	f000 80a2 	beq.w	800a754 <_svfiprintf_r+0x1c8>
 800a610:	2300      	movs	r3, #0
 800a612:	f04f 32ff 	mov.w	r2, #4294967295
 800a616:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a61a:	f10a 0a01 	add.w	sl, sl, #1
 800a61e:	9304      	str	r3, [sp, #16]
 800a620:	9307      	str	r3, [sp, #28]
 800a622:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a626:	931a      	str	r3, [sp, #104]	; 0x68
 800a628:	4654      	mov	r4, sl
 800a62a:	2205      	movs	r2, #5
 800a62c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a630:	4851      	ldr	r0, [pc, #324]	; (800a778 <_svfiprintf_r+0x1ec>)
 800a632:	f7f5 fdcd 	bl	80001d0 <memchr>
 800a636:	9a04      	ldr	r2, [sp, #16]
 800a638:	b9d8      	cbnz	r0, 800a672 <_svfiprintf_r+0xe6>
 800a63a:	06d0      	lsls	r0, r2, #27
 800a63c:	bf44      	itt	mi
 800a63e:	2320      	movmi	r3, #32
 800a640:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a644:	0711      	lsls	r1, r2, #28
 800a646:	bf44      	itt	mi
 800a648:	232b      	movmi	r3, #43	; 0x2b
 800a64a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a64e:	f89a 3000 	ldrb.w	r3, [sl]
 800a652:	2b2a      	cmp	r3, #42	; 0x2a
 800a654:	d015      	beq.n	800a682 <_svfiprintf_r+0xf6>
 800a656:	9a07      	ldr	r2, [sp, #28]
 800a658:	4654      	mov	r4, sl
 800a65a:	2000      	movs	r0, #0
 800a65c:	f04f 0c0a 	mov.w	ip, #10
 800a660:	4621      	mov	r1, r4
 800a662:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a666:	3b30      	subs	r3, #48	; 0x30
 800a668:	2b09      	cmp	r3, #9
 800a66a:	d94e      	bls.n	800a70a <_svfiprintf_r+0x17e>
 800a66c:	b1b0      	cbz	r0, 800a69c <_svfiprintf_r+0x110>
 800a66e:	9207      	str	r2, [sp, #28]
 800a670:	e014      	b.n	800a69c <_svfiprintf_r+0x110>
 800a672:	eba0 0308 	sub.w	r3, r0, r8
 800a676:	fa09 f303 	lsl.w	r3, r9, r3
 800a67a:	4313      	orrs	r3, r2
 800a67c:	9304      	str	r3, [sp, #16]
 800a67e:	46a2      	mov	sl, r4
 800a680:	e7d2      	b.n	800a628 <_svfiprintf_r+0x9c>
 800a682:	9b03      	ldr	r3, [sp, #12]
 800a684:	1d19      	adds	r1, r3, #4
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	9103      	str	r1, [sp, #12]
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	bfbb      	ittet	lt
 800a68e:	425b      	neglt	r3, r3
 800a690:	f042 0202 	orrlt.w	r2, r2, #2
 800a694:	9307      	strge	r3, [sp, #28]
 800a696:	9307      	strlt	r3, [sp, #28]
 800a698:	bfb8      	it	lt
 800a69a:	9204      	strlt	r2, [sp, #16]
 800a69c:	7823      	ldrb	r3, [r4, #0]
 800a69e:	2b2e      	cmp	r3, #46	; 0x2e
 800a6a0:	d10c      	bne.n	800a6bc <_svfiprintf_r+0x130>
 800a6a2:	7863      	ldrb	r3, [r4, #1]
 800a6a4:	2b2a      	cmp	r3, #42	; 0x2a
 800a6a6:	d135      	bne.n	800a714 <_svfiprintf_r+0x188>
 800a6a8:	9b03      	ldr	r3, [sp, #12]
 800a6aa:	1d1a      	adds	r2, r3, #4
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	9203      	str	r2, [sp, #12]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	bfb8      	it	lt
 800a6b4:	f04f 33ff 	movlt.w	r3, #4294967295
 800a6b8:	3402      	adds	r4, #2
 800a6ba:	9305      	str	r3, [sp, #20]
 800a6bc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a788 <_svfiprintf_r+0x1fc>
 800a6c0:	7821      	ldrb	r1, [r4, #0]
 800a6c2:	2203      	movs	r2, #3
 800a6c4:	4650      	mov	r0, sl
 800a6c6:	f7f5 fd83 	bl	80001d0 <memchr>
 800a6ca:	b140      	cbz	r0, 800a6de <_svfiprintf_r+0x152>
 800a6cc:	2340      	movs	r3, #64	; 0x40
 800a6ce:	eba0 000a 	sub.w	r0, r0, sl
 800a6d2:	fa03 f000 	lsl.w	r0, r3, r0
 800a6d6:	9b04      	ldr	r3, [sp, #16]
 800a6d8:	4303      	orrs	r3, r0
 800a6da:	3401      	adds	r4, #1
 800a6dc:	9304      	str	r3, [sp, #16]
 800a6de:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6e2:	4826      	ldr	r0, [pc, #152]	; (800a77c <_svfiprintf_r+0x1f0>)
 800a6e4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a6e8:	2206      	movs	r2, #6
 800a6ea:	f7f5 fd71 	bl	80001d0 <memchr>
 800a6ee:	2800      	cmp	r0, #0
 800a6f0:	d038      	beq.n	800a764 <_svfiprintf_r+0x1d8>
 800a6f2:	4b23      	ldr	r3, [pc, #140]	; (800a780 <_svfiprintf_r+0x1f4>)
 800a6f4:	bb1b      	cbnz	r3, 800a73e <_svfiprintf_r+0x1b2>
 800a6f6:	9b03      	ldr	r3, [sp, #12]
 800a6f8:	3307      	adds	r3, #7
 800a6fa:	f023 0307 	bic.w	r3, r3, #7
 800a6fe:	3308      	adds	r3, #8
 800a700:	9303      	str	r3, [sp, #12]
 800a702:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a704:	4433      	add	r3, r6
 800a706:	9309      	str	r3, [sp, #36]	; 0x24
 800a708:	e767      	b.n	800a5da <_svfiprintf_r+0x4e>
 800a70a:	fb0c 3202 	mla	r2, ip, r2, r3
 800a70e:	460c      	mov	r4, r1
 800a710:	2001      	movs	r0, #1
 800a712:	e7a5      	b.n	800a660 <_svfiprintf_r+0xd4>
 800a714:	2300      	movs	r3, #0
 800a716:	3401      	adds	r4, #1
 800a718:	9305      	str	r3, [sp, #20]
 800a71a:	4619      	mov	r1, r3
 800a71c:	f04f 0c0a 	mov.w	ip, #10
 800a720:	4620      	mov	r0, r4
 800a722:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a726:	3a30      	subs	r2, #48	; 0x30
 800a728:	2a09      	cmp	r2, #9
 800a72a:	d903      	bls.n	800a734 <_svfiprintf_r+0x1a8>
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d0c5      	beq.n	800a6bc <_svfiprintf_r+0x130>
 800a730:	9105      	str	r1, [sp, #20]
 800a732:	e7c3      	b.n	800a6bc <_svfiprintf_r+0x130>
 800a734:	fb0c 2101 	mla	r1, ip, r1, r2
 800a738:	4604      	mov	r4, r0
 800a73a:	2301      	movs	r3, #1
 800a73c:	e7f0      	b.n	800a720 <_svfiprintf_r+0x194>
 800a73e:	ab03      	add	r3, sp, #12
 800a740:	9300      	str	r3, [sp, #0]
 800a742:	462a      	mov	r2, r5
 800a744:	4b0f      	ldr	r3, [pc, #60]	; (800a784 <_svfiprintf_r+0x1f8>)
 800a746:	a904      	add	r1, sp, #16
 800a748:	4638      	mov	r0, r7
 800a74a:	f3af 8000 	nop.w
 800a74e:	1c42      	adds	r2, r0, #1
 800a750:	4606      	mov	r6, r0
 800a752:	d1d6      	bne.n	800a702 <_svfiprintf_r+0x176>
 800a754:	89ab      	ldrh	r3, [r5, #12]
 800a756:	065b      	lsls	r3, r3, #25
 800a758:	f53f af2c 	bmi.w	800a5b4 <_svfiprintf_r+0x28>
 800a75c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a75e:	b01d      	add	sp, #116	; 0x74
 800a760:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a764:	ab03      	add	r3, sp, #12
 800a766:	9300      	str	r3, [sp, #0]
 800a768:	462a      	mov	r2, r5
 800a76a:	4b06      	ldr	r3, [pc, #24]	; (800a784 <_svfiprintf_r+0x1f8>)
 800a76c:	a904      	add	r1, sp, #16
 800a76e:	4638      	mov	r0, r7
 800a770:	f000 f87a 	bl	800a868 <_printf_i>
 800a774:	e7eb      	b.n	800a74e <_svfiprintf_r+0x1c2>
 800a776:	bf00      	nop
 800a778:	0800b814 	.word	0x0800b814
 800a77c:	0800b81e 	.word	0x0800b81e
 800a780:	00000000 	.word	0x00000000
 800a784:	0800a4d5 	.word	0x0800a4d5
 800a788:	0800b81a 	.word	0x0800b81a

0800a78c <_printf_common>:
 800a78c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a790:	4616      	mov	r6, r2
 800a792:	4699      	mov	r9, r3
 800a794:	688a      	ldr	r2, [r1, #8]
 800a796:	690b      	ldr	r3, [r1, #16]
 800a798:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a79c:	4293      	cmp	r3, r2
 800a79e:	bfb8      	it	lt
 800a7a0:	4613      	movlt	r3, r2
 800a7a2:	6033      	str	r3, [r6, #0]
 800a7a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a7a8:	4607      	mov	r7, r0
 800a7aa:	460c      	mov	r4, r1
 800a7ac:	b10a      	cbz	r2, 800a7b2 <_printf_common+0x26>
 800a7ae:	3301      	adds	r3, #1
 800a7b0:	6033      	str	r3, [r6, #0]
 800a7b2:	6823      	ldr	r3, [r4, #0]
 800a7b4:	0699      	lsls	r1, r3, #26
 800a7b6:	bf42      	ittt	mi
 800a7b8:	6833      	ldrmi	r3, [r6, #0]
 800a7ba:	3302      	addmi	r3, #2
 800a7bc:	6033      	strmi	r3, [r6, #0]
 800a7be:	6825      	ldr	r5, [r4, #0]
 800a7c0:	f015 0506 	ands.w	r5, r5, #6
 800a7c4:	d106      	bne.n	800a7d4 <_printf_common+0x48>
 800a7c6:	f104 0a19 	add.w	sl, r4, #25
 800a7ca:	68e3      	ldr	r3, [r4, #12]
 800a7cc:	6832      	ldr	r2, [r6, #0]
 800a7ce:	1a9b      	subs	r3, r3, r2
 800a7d0:	42ab      	cmp	r3, r5
 800a7d2:	dc26      	bgt.n	800a822 <_printf_common+0x96>
 800a7d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a7d8:	1e13      	subs	r3, r2, #0
 800a7da:	6822      	ldr	r2, [r4, #0]
 800a7dc:	bf18      	it	ne
 800a7de:	2301      	movne	r3, #1
 800a7e0:	0692      	lsls	r2, r2, #26
 800a7e2:	d42b      	bmi.n	800a83c <_printf_common+0xb0>
 800a7e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a7e8:	4649      	mov	r1, r9
 800a7ea:	4638      	mov	r0, r7
 800a7ec:	47c0      	blx	r8
 800a7ee:	3001      	adds	r0, #1
 800a7f0:	d01e      	beq.n	800a830 <_printf_common+0xa4>
 800a7f2:	6823      	ldr	r3, [r4, #0]
 800a7f4:	68e5      	ldr	r5, [r4, #12]
 800a7f6:	6832      	ldr	r2, [r6, #0]
 800a7f8:	f003 0306 	and.w	r3, r3, #6
 800a7fc:	2b04      	cmp	r3, #4
 800a7fe:	bf08      	it	eq
 800a800:	1aad      	subeq	r5, r5, r2
 800a802:	68a3      	ldr	r3, [r4, #8]
 800a804:	6922      	ldr	r2, [r4, #16]
 800a806:	bf0c      	ite	eq
 800a808:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a80c:	2500      	movne	r5, #0
 800a80e:	4293      	cmp	r3, r2
 800a810:	bfc4      	itt	gt
 800a812:	1a9b      	subgt	r3, r3, r2
 800a814:	18ed      	addgt	r5, r5, r3
 800a816:	2600      	movs	r6, #0
 800a818:	341a      	adds	r4, #26
 800a81a:	42b5      	cmp	r5, r6
 800a81c:	d11a      	bne.n	800a854 <_printf_common+0xc8>
 800a81e:	2000      	movs	r0, #0
 800a820:	e008      	b.n	800a834 <_printf_common+0xa8>
 800a822:	2301      	movs	r3, #1
 800a824:	4652      	mov	r2, sl
 800a826:	4649      	mov	r1, r9
 800a828:	4638      	mov	r0, r7
 800a82a:	47c0      	blx	r8
 800a82c:	3001      	adds	r0, #1
 800a82e:	d103      	bne.n	800a838 <_printf_common+0xac>
 800a830:	f04f 30ff 	mov.w	r0, #4294967295
 800a834:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a838:	3501      	adds	r5, #1
 800a83a:	e7c6      	b.n	800a7ca <_printf_common+0x3e>
 800a83c:	18e1      	adds	r1, r4, r3
 800a83e:	1c5a      	adds	r2, r3, #1
 800a840:	2030      	movs	r0, #48	; 0x30
 800a842:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a846:	4422      	add	r2, r4
 800a848:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a84c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a850:	3302      	adds	r3, #2
 800a852:	e7c7      	b.n	800a7e4 <_printf_common+0x58>
 800a854:	2301      	movs	r3, #1
 800a856:	4622      	mov	r2, r4
 800a858:	4649      	mov	r1, r9
 800a85a:	4638      	mov	r0, r7
 800a85c:	47c0      	blx	r8
 800a85e:	3001      	adds	r0, #1
 800a860:	d0e6      	beq.n	800a830 <_printf_common+0xa4>
 800a862:	3601      	adds	r6, #1
 800a864:	e7d9      	b.n	800a81a <_printf_common+0x8e>
	...

0800a868 <_printf_i>:
 800a868:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a86c:	460c      	mov	r4, r1
 800a86e:	4691      	mov	r9, r2
 800a870:	7e27      	ldrb	r7, [r4, #24]
 800a872:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a874:	2f78      	cmp	r7, #120	; 0x78
 800a876:	4680      	mov	r8, r0
 800a878:	469a      	mov	sl, r3
 800a87a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a87e:	d807      	bhi.n	800a890 <_printf_i+0x28>
 800a880:	2f62      	cmp	r7, #98	; 0x62
 800a882:	d80a      	bhi.n	800a89a <_printf_i+0x32>
 800a884:	2f00      	cmp	r7, #0
 800a886:	f000 80d8 	beq.w	800aa3a <_printf_i+0x1d2>
 800a88a:	2f58      	cmp	r7, #88	; 0x58
 800a88c:	f000 80a3 	beq.w	800a9d6 <_printf_i+0x16e>
 800a890:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a894:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a898:	e03a      	b.n	800a910 <_printf_i+0xa8>
 800a89a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a89e:	2b15      	cmp	r3, #21
 800a8a0:	d8f6      	bhi.n	800a890 <_printf_i+0x28>
 800a8a2:	a001      	add	r0, pc, #4	; (adr r0, 800a8a8 <_printf_i+0x40>)
 800a8a4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a8a8:	0800a901 	.word	0x0800a901
 800a8ac:	0800a915 	.word	0x0800a915
 800a8b0:	0800a891 	.word	0x0800a891
 800a8b4:	0800a891 	.word	0x0800a891
 800a8b8:	0800a891 	.word	0x0800a891
 800a8bc:	0800a891 	.word	0x0800a891
 800a8c0:	0800a915 	.word	0x0800a915
 800a8c4:	0800a891 	.word	0x0800a891
 800a8c8:	0800a891 	.word	0x0800a891
 800a8cc:	0800a891 	.word	0x0800a891
 800a8d0:	0800a891 	.word	0x0800a891
 800a8d4:	0800aa21 	.word	0x0800aa21
 800a8d8:	0800a945 	.word	0x0800a945
 800a8dc:	0800aa03 	.word	0x0800aa03
 800a8e0:	0800a891 	.word	0x0800a891
 800a8e4:	0800a891 	.word	0x0800a891
 800a8e8:	0800aa43 	.word	0x0800aa43
 800a8ec:	0800a891 	.word	0x0800a891
 800a8f0:	0800a945 	.word	0x0800a945
 800a8f4:	0800a891 	.word	0x0800a891
 800a8f8:	0800a891 	.word	0x0800a891
 800a8fc:	0800aa0b 	.word	0x0800aa0b
 800a900:	680b      	ldr	r3, [r1, #0]
 800a902:	1d1a      	adds	r2, r3, #4
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	600a      	str	r2, [r1, #0]
 800a908:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a90c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a910:	2301      	movs	r3, #1
 800a912:	e0a3      	b.n	800aa5c <_printf_i+0x1f4>
 800a914:	6825      	ldr	r5, [r4, #0]
 800a916:	6808      	ldr	r0, [r1, #0]
 800a918:	062e      	lsls	r6, r5, #24
 800a91a:	f100 0304 	add.w	r3, r0, #4
 800a91e:	d50a      	bpl.n	800a936 <_printf_i+0xce>
 800a920:	6805      	ldr	r5, [r0, #0]
 800a922:	600b      	str	r3, [r1, #0]
 800a924:	2d00      	cmp	r5, #0
 800a926:	da03      	bge.n	800a930 <_printf_i+0xc8>
 800a928:	232d      	movs	r3, #45	; 0x2d
 800a92a:	426d      	negs	r5, r5
 800a92c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a930:	485e      	ldr	r0, [pc, #376]	; (800aaac <_printf_i+0x244>)
 800a932:	230a      	movs	r3, #10
 800a934:	e019      	b.n	800a96a <_printf_i+0x102>
 800a936:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a93a:	6805      	ldr	r5, [r0, #0]
 800a93c:	600b      	str	r3, [r1, #0]
 800a93e:	bf18      	it	ne
 800a940:	b22d      	sxthne	r5, r5
 800a942:	e7ef      	b.n	800a924 <_printf_i+0xbc>
 800a944:	680b      	ldr	r3, [r1, #0]
 800a946:	6825      	ldr	r5, [r4, #0]
 800a948:	1d18      	adds	r0, r3, #4
 800a94a:	6008      	str	r0, [r1, #0]
 800a94c:	0628      	lsls	r0, r5, #24
 800a94e:	d501      	bpl.n	800a954 <_printf_i+0xec>
 800a950:	681d      	ldr	r5, [r3, #0]
 800a952:	e002      	b.n	800a95a <_printf_i+0xf2>
 800a954:	0669      	lsls	r1, r5, #25
 800a956:	d5fb      	bpl.n	800a950 <_printf_i+0xe8>
 800a958:	881d      	ldrh	r5, [r3, #0]
 800a95a:	4854      	ldr	r0, [pc, #336]	; (800aaac <_printf_i+0x244>)
 800a95c:	2f6f      	cmp	r7, #111	; 0x6f
 800a95e:	bf0c      	ite	eq
 800a960:	2308      	moveq	r3, #8
 800a962:	230a      	movne	r3, #10
 800a964:	2100      	movs	r1, #0
 800a966:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a96a:	6866      	ldr	r6, [r4, #4]
 800a96c:	60a6      	str	r6, [r4, #8]
 800a96e:	2e00      	cmp	r6, #0
 800a970:	bfa2      	ittt	ge
 800a972:	6821      	ldrge	r1, [r4, #0]
 800a974:	f021 0104 	bicge.w	r1, r1, #4
 800a978:	6021      	strge	r1, [r4, #0]
 800a97a:	b90d      	cbnz	r5, 800a980 <_printf_i+0x118>
 800a97c:	2e00      	cmp	r6, #0
 800a97e:	d04d      	beq.n	800aa1c <_printf_i+0x1b4>
 800a980:	4616      	mov	r6, r2
 800a982:	fbb5 f1f3 	udiv	r1, r5, r3
 800a986:	fb03 5711 	mls	r7, r3, r1, r5
 800a98a:	5dc7      	ldrb	r7, [r0, r7]
 800a98c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a990:	462f      	mov	r7, r5
 800a992:	42bb      	cmp	r3, r7
 800a994:	460d      	mov	r5, r1
 800a996:	d9f4      	bls.n	800a982 <_printf_i+0x11a>
 800a998:	2b08      	cmp	r3, #8
 800a99a:	d10b      	bne.n	800a9b4 <_printf_i+0x14c>
 800a99c:	6823      	ldr	r3, [r4, #0]
 800a99e:	07df      	lsls	r7, r3, #31
 800a9a0:	d508      	bpl.n	800a9b4 <_printf_i+0x14c>
 800a9a2:	6923      	ldr	r3, [r4, #16]
 800a9a4:	6861      	ldr	r1, [r4, #4]
 800a9a6:	4299      	cmp	r1, r3
 800a9a8:	bfde      	ittt	le
 800a9aa:	2330      	movle	r3, #48	; 0x30
 800a9ac:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a9b0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a9b4:	1b92      	subs	r2, r2, r6
 800a9b6:	6122      	str	r2, [r4, #16]
 800a9b8:	f8cd a000 	str.w	sl, [sp]
 800a9bc:	464b      	mov	r3, r9
 800a9be:	aa03      	add	r2, sp, #12
 800a9c0:	4621      	mov	r1, r4
 800a9c2:	4640      	mov	r0, r8
 800a9c4:	f7ff fee2 	bl	800a78c <_printf_common>
 800a9c8:	3001      	adds	r0, #1
 800a9ca:	d14c      	bne.n	800aa66 <_printf_i+0x1fe>
 800a9cc:	f04f 30ff 	mov.w	r0, #4294967295
 800a9d0:	b004      	add	sp, #16
 800a9d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9d6:	4835      	ldr	r0, [pc, #212]	; (800aaac <_printf_i+0x244>)
 800a9d8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a9dc:	6823      	ldr	r3, [r4, #0]
 800a9de:	680e      	ldr	r6, [r1, #0]
 800a9e0:	061f      	lsls	r7, r3, #24
 800a9e2:	f856 5b04 	ldr.w	r5, [r6], #4
 800a9e6:	600e      	str	r6, [r1, #0]
 800a9e8:	d514      	bpl.n	800aa14 <_printf_i+0x1ac>
 800a9ea:	07d9      	lsls	r1, r3, #31
 800a9ec:	bf44      	itt	mi
 800a9ee:	f043 0320 	orrmi.w	r3, r3, #32
 800a9f2:	6023      	strmi	r3, [r4, #0]
 800a9f4:	b91d      	cbnz	r5, 800a9fe <_printf_i+0x196>
 800a9f6:	6823      	ldr	r3, [r4, #0]
 800a9f8:	f023 0320 	bic.w	r3, r3, #32
 800a9fc:	6023      	str	r3, [r4, #0]
 800a9fe:	2310      	movs	r3, #16
 800aa00:	e7b0      	b.n	800a964 <_printf_i+0xfc>
 800aa02:	6823      	ldr	r3, [r4, #0]
 800aa04:	f043 0320 	orr.w	r3, r3, #32
 800aa08:	6023      	str	r3, [r4, #0]
 800aa0a:	2378      	movs	r3, #120	; 0x78
 800aa0c:	4828      	ldr	r0, [pc, #160]	; (800aab0 <_printf_i+0x248>)
 800aa0e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800aa12:	e7e3      	b.n	800a9dc <_printf_i+0x174>
 800aa14:	065e      	lsls	r6, r3, #25
 800aa16:	bf48      	it	mi
 800aa18:	b2ad      	uxthmi	r5, r5
 800aa1a:	e7e6      	b.n	800a9ea <_printf_i+0x182>
 800aa1c:	4616      	mov	r6, r2
 800aa1e:	e7bb      	b.n	800a998 <_printf_i+0x130>
 800aa20:	680b      	ldr	r3, [r1, #0]
 800aa22:	6826      	ldr	r6, [r4, #0]
 800aa24:	6960      	ldr	r0, [r4, #20]
 800aa26:	1d1d      	adds	r5, r3, #4
 800aa28:	600d      	str	r5, [r1, #0]
 800aa2a:	0635      	lsls	r5, r6, #24
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	d501      	bpl.n	800aa34 <_printf_i+0x1cc>
 800aa30:	6018      	str	r0, [r3, #0]
 800aa32:	e002      	b.n	800aa3a <_printf_i+0x1d2>
 800aa34:	0671      	lsls	r1, r6, #25
 800aa36:	d5fb      	bpl.n	800aa30 <_printf_i+0x1c8>
 800aa38:	8018      	strh	r0, [r3, #0]
 800aa3a:	2300      	movs	r3, #0
 800aa3c:	6123      	str	r3, [r4, #16]
 800aa3e:	4616      	mov	r6, r2
 800aa40:	e7ba      	b.n	800a9b8 <_printf_i+0x150>
 800aa42:	680b      	ldr	r3, [r1, #0]
 800aa44:	1d1a      	adds	r2, r3, #4
 800aa46:	600a      	str	r2, [r1, #0]
 800aa48:	681e      	ldr	r6, [r3, #0]
 800aa4a:	6862      	ldr	r2, [r4, #4]
 800aa4c:	2100      	movs	r1, #0
 800aa4e:	4630      	mov	r0, r6
 800aa50:	f7f5 fbbe 	bl	80001d0 <memchr>
 800aa54:	b108      	cbz	r0, 800aa5a <_printf_i+0x1f2>
 800aa56:	1b80      	subs	r0, r0, r6
 800aa58:	6060      	str	r0, [r4, #4]
 800aa5a:	6863      	ldr	r3, [r4, #4]
 800aa5c:	6123      	str	r3, [r4, #16]
 800aa5e:	2300      	movs	r3, #0
 800aa60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aa64:	e7a8      	b.n	800a9b8 <_printf_i+0x150>
 800aa66:	6923      	ldr	r3, [r4, #16]
 800aa68:	4632      	mov	r2, r6
 800aa6a:	4649      	mov	r1, r9
 800aa6c:	4640      	mov	r0, r8
 800aa6e:	47d0      	blx	sl
 800aa70:	3001      	adds	r0, #1
 800aa72:	d0ab      	beq.n	800a9cc <_printf_i+0x164>
 800aa74:	6823      	ldr	r3, [r4, #0]
 800aa76:	079b      	lsls	r3, r3, #30
 800aa78:	d413      	bmi.n	800aaa2 <_printf_i+0x23a>
 800aa7a:	68e0      	ldr	r0, [r4, #12]
 800aa7c:	9b03      	ldr	r3, [sp, #12]
 800aa7e:	4298      	cmp	r0, r3
 800aa80:	bfb8      	it	lt
 800aa82:	4618      	movlt	r0, r3
 800aa84:	e7a4      	b.n	800a9d0 <_printf_i+0x168>
 800aa86:	2301      	movs	r3, #1
 800aa88:	4632      	mov	r2, r6
 800aa8a:	4649      	mov	r1, r9
 800aa8c:	4640      	mov	r0, r8
 800aa8e:	47d0      	blx	sl
 800aa90:	3001      	adds	r0, #1
 800aa92:	d09b      	beq.n	800a9cc <_printf_i+0x164>
 800aa94:	3501      	adds	r5, #1
 800aa96:	68e3      	ldr	r3, [r4, #12]
 800aa98:	9903      	ldr	r1, [sp, #12]
 800aa9a:	1a5b      	subs	r3, r3, r1
 800aa9c:	42ab      	cmp	r3, r5
 800aa9e:	dcf2      	bgt.n	800aa86 <_printf_i+0x21e>
 800aaa0:	e7eb      	b.n	800aa7a <_printf_i+0x212>
 800aaa2:	2500      	movs	r5, #0
 800aaa4:	f104 0619 	add.w	r6, r4, #25
 800aaa8:	e7f5      	b.n	800aa96 <_printf_i+0x22e>
 800aaaa:	bf00      	nop
 800aaac:	0800b825 	.word	0x0800b825
 800aab0:	0800b836 	.word	0x0800b836

0800aab4 <memmove>:
 800aab4:	4288      	cmp	r0, r1
 800aab6:	b510      	push	{r4, lr}
 800aab8:	eb01 0402 	add.w	r4, r1, r2
 800aabc:	d902      	bls.n	800aac4 <memmove+0x10>
 800aabe:	4284      	cmp	r4, r0
 800aac0:	4623      	mov	r3, r4
 800aac2:	d807      	bhi.n	800aad4 <memmove+0x20>
 800aac4:	1e43      	subs	r3, r0, #1
 800aac6:	42a1      	cmp	r1, r4
 800aac8:	d008      	beq.n	800aadc <memmove+0x28>
 800aaca:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aace:	f803 2f01 	strb.w	r2, [r3, #1]!
 800aad2:	e7f8      	b.n	800aac6 <memmove+0x12>
 800aad4:	4402      	add	r2, r0
 800aad6:	4601      	mov	r1, r0
 800aad8:	428a      	cmp	r2, r1
 800aada:	d100      	bne.n	800aade <memmove+0x2a>
 800aadc:	bd10      	pop	{r4, pc}
 800aade:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800aae2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800aae6:	e7f7      	b.n	800aad8 <memmove+0x24>

0800aae8 <_free_r>:
 800aae8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aaea:	2900      	cmp	r1, #0
 800aaec:	d048      	beq.n	800ab80 <_free_r+0x98>
 800aaee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aaf2:	9001      	str	r0, [sp, #4]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	f1a1 0404 	sub.w	r4, r1, #4
 800aafa:	bfb8      	it	lt
 800aafc:	18e4      	addlt	r4, r4, r3
 800aafe:	f000 f8d3 	bl	800aca8 <__malloc_lock>
 800ab02:	4a20      	ldr	r2, [pc, #128]	; (800ab84 <_free_r+0x9c>)
 800ab04:	9801      	ldr	r0, [sp, #4]
 800ab06:	6813      	ldr	r3, [r2, #0]
 800ab08:	4615      	mov	r5, r2
 800ab0a:	b933      	cbnz	r3, 800ab1a <_free_r+0x32>
 800ab0c:	6063      	str	r3, [r4, #4]
 800ab0e:	6014      	str	r4, [r2, #0]
 800ab10:	b003      	add	sp, #12
 800ab12:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ab16:	f000 b8cd 	b.w	800acb4 <__malloc_unlock>
 800ab1a:	42a3      	cmp	r3, r4
 800ab1c:	d90b      	bls.n	800ab36 <_free_r+0x4e>
 800ab1e:	6821      	ldr	r1, [r4, #0]
 800ab20:	1862      	adds	r2, r4, r1
 800ab22:	4293      	cmp	r3, r2
 800ab24:	bf04      	itt	eq
 800ab26:	681a      	ldreq	r2, [r3, #0]
 800ab28:	685b      	ldreq	r3, [r3, #4]
 800ab2a:	6063      	str	r3, [r4, #4]
 800ab2c:	bf04      	itt	eq
 800ab2e:	1852      	addeq	r2, r2, r1
 800ab30:	6022      	streq	r2, [r4, #0]
 800ab32:	602c      	str	r4, [r5, #0]
 800ab34:	e7ec      	b.n	800ab10 <_free_r+0x28>
 800ab36:	461a      	mov	r2, r3
 800ab38:	685b      	ldr	r3, [r3, #4]
 800ab3a:	b10b      	cbz	r3, 800ab40 <_free_r+0x58>
 800ab3c:	42a3      	cmp	r3, r4
 800ab3e:	d9fa      	bls.n	800ab36 <_free_r+0x4e>
 800ab40:	6811      	ldr	r1, [r2, #0]
 800ab42:	1855      	adds	r5, r2, r1
 800ab44:	42a5      	cmp	r5, r4
 800ab46:	d10b      	bne.n	800ab60 <_free_r+0x78>
 800ab48:	6824      	ldr	r4, [r4, #0]
 800ab4a:	4421      	add	r1, r4
 800ab4c:	1854      	adds	r4, r2, r1
 800ab4e:	42a3      	cmp	r3, r4
 800ab50:	6011      	str	r1, [r2, #0]
 800ab52:	d1dd      	bne.n	800ab10 <_free_r+0x28>
 800ab54:	681c      	ldr	r4, [r3, #0]
 800ab56:	685b      	ldr	r3, [r3, #4]
 800ab58:	6053      	str	r3, [r2, #4]
 800ab5a:	4421      	add	r1, r4
 800ab5c:	6011      	str	r1, [r2, #0]
 800ab5e:	e7d7      	b.n	800ab10 <_free_r+0x28>
 800ab60:	d902      	bls.n	800ab68 <_free_r+0x80>
 800ab62:	230c      	movs	r3, #12
 800ab64:	6003      	str	r3, [r0, #0]
 800ab66:	e7d3      	b.n	800ab10 <_free_r+0x28>
 800ab68:	6825      	ldr	r5, [r4, #0]
 800ab6a:	1961      	adds	r1, r4, r5
 800ab6c:	428b      	cmp	r3, r1
 800ab6e:	bf04      	itt	eq
 800ab70:	6819      	ldreq	r1, [r3, #0]
 800ab72:	685b      	ldreq	r3, [r3, #4]
 800ab74:	6063      	str	r3, [r4, #4]
 800ab76:	bf04      	itt	eq
 800ab78:	1949      	addeq	r1, r1, r5
 800ab7a:	6021      	streq	r1, [r4, #0]
 800ab7c:	6054      	str	r4, [r2, #4]
 800ab7e:	e7c7      	b.n	800ab10 <_free_r+0x28>
 800ab80:	b003      	add	sp, #12
 800ab82:	bd30      	pop	{r4, r5, pc}
 800ab84:	200012d4 	.word	0x200012d4

0800ab88 <_malloc_r>:
 800ab88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab8a:	1ccd      	adds	r5, r1, #3
 800ab8c:	f025 0503 	bic.w	r5, r5, #3
 800ab90:	3508      	adds	r5, #8
 800ab92:	2d0c      	cmp	r5, #12
 800ab94:	bf38      	it	cc
 800ab96:	250c      	movcc	r5, #12
 800ab98:	2d00      	cmp	r5, #0
 800ab9a:	4606      	mov	r6, r0
 800ab9c:	db01      	blt.n	800aba2 <_malloc_r+0x1a>
 800ab9e:	42a9      	cmp	r1, r5
 800aba0:	d903      	bls.n	800abaa <_malloc_r+0x22>
 800aba2:	230c      	movs	r3, #12
 800aba4:	6033      	str	r3, [r6, #0]
 800aba6:	2000      	movs	r0, #0
 800aba8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800abaa:	f000 f87d 	bl	800aca8 <__malloc_lock>
 800abae:	4921      	ldr	r1, [pc, #132]	; (800ac34 <_malloc_r+0xac>)
 800abb0:	680a      	ldr	r2, [r1, #0]
 800abb2:	4614      	mov	r4, r2
 800abb4:	b99c      	cbnz	r4, 800abde <_malloc_r+0x56>
 800abb6:	4f20      	ldr	r7, [pc, #128]	; (800ac38 <_malloc_r+0xb0>)
 800abb8:	683b      	ldr	r3, [r7, #0]
 800abba:	b923      	cbnz	r3, 800abc6 <_malloc_r+0x3e>
 800abbc:	4621      	mov	r1, r4
 800abbe:	4630      	mov	r0, r6
 800abc0:	f000 f862 	bl	800ac88 <_sbrk_r>
 800abc4:	6038      	str	r0, [r7, #0]
 800abc6:	4629      	mov	r1, r5
 800abc8:	4630      	mov	r0, r6
 800abca:	f000 f85d 	bl	800ac88 <_sbrk_r>
 800abce:	1c43      	adds	r3, r0, #1
 800abd0:	d123      	bne.n	800ac1a <_malloc_r+0x92>
 800abd2:	230c      	movs	r3, #12
 800abd4:	6033      	str	r3, [r6, #0]
 800abd6:	4630      	mov	r0, r6
 800abd8:	f000 f86c 	bl	800acb4 <__malloc_unlock>
 800abdc:	e7e3      	b.n	800aba6 <_malloc_r+0x1e>
 800abde:	6823      	ldr	r3, [r4, #0]
 800abe0:	1b5b      	subs	r3, r3, r5
 800abe2:	d417      	bmi.n	800ac14 <_malloc_r+0x8c>
 800abe4:	2b0b      	cmp	r3, #11
 800abe6:	d903      	bls.n	800abf0 <_malloc_r+0x68>
 800abe8:	6023      	str	r3, [r4, #0]
 800abea:	441c      	add	r4, r3
 800abec:	6025      	str	r5, [r4, #0]
 800abee:	e004      	b.n	800abfa <_malloc_r+0x72>
 800abf0:	6863      	ldr	r3, [r4, #4]
 800abf2:	42a2      	cmp	r2, r4
 800abf4:	bf0c      	ite	eq
 800abf6:	600b      	streq	r3, [r1, #0]
 800abf8:	6053      	strne	r3, [r2, #4]
 800abfa:	4630      	mov	r0, r6
 800abfc:	f000 f85a 	bl	800acb4 <__malloc_unlock>
 800ac00:	f104 000b 	add.w	r0, r4, #11
 800ac04:	1d23      	adds	r3, r4, #4
 800ac06:	f020 0007 	bic.w	r0, r0, #7
 800ac0a:	1ac2      	subs	r2, r0, r3
 800ac0c:	d0cc      	beq.n	800aba8 <_malloc_r+0x20>
 800ac0e:	1a1b      	subs	r3, r3, r0
 800ac10:	50a3      	str	r3, [r4, r2]
 800ac12:	e7c9      	b.n	800aba8 <_malloc_r+0x20>
 800ac14:	4622      	mov	r2, r4
 800ac16:	6864      	ldr	r4, [r4, #4]
 800ac18:	e7cc      	b.n	800abb4 <_malloc_r+0x2c>
 800ac1a:	1cc4      	adds	r4, r0, #3
 800ac1c:	f024 0403 	bic.w	r4, r4, #3
 800ac20:	42a0      	cmp	r0, r4
 800ac22:	d0e3      	beq.n	800abec <_malloc_r+0x64>
 800ac24:	1a21      	subs	r1, r4, r0
 800ac26:	4630      	mov	r0, r6
 800ac28:	f000 f82e 	bl	800ac88 <_sbrk_r>
 800ac2c:	3001      	adds	r0, #1
 800ac2e:	d1dd      	bne.n	800abec <_malloc_r+0x64>
 800ac30:	e7cf      	b.n	800abd2 <_malloc_r+0x4a>
 800ac32:	bf00      	nop
 800ac34:	200012d4 	.word	0x200012d4
 800ac38:	200012d8 	.word	0x200012d8

0800ac3c <_realloc_r>:
 800ac3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac3e:	4607      	mov	r7, r0
 800ac40:	4614      	mov	r4, r2
 800ac42:	460e      	mov	r6, r1
 800ac44:	b921      	cbnz	r1, 800ac50 <_realloc_r+0x14>
 800ac46:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ac4a:	4611      	mov	r1, r2
 800ac4c:	f7ff bf9c 	b.w	800ab88 <_malloc_r>
 800ac50:	b922      	cbnz	r2, 800ac5c <_realloc_r+0x20>
 800ac52:	f7ff ff49 	bl	800aae8 <_free_r>
 800ac56:	4625      	mov	r5, r4
 800ac58:	4628      	mov	r0, r5
 800ac5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac5c:	f000 f830 	bl	800acc0 <_malloc_usable_size_r>
 800ac60:	42a0      	cmp	r0, r4
 800ac62:	d20f      	bcs.n	800ac84 <_realloc_r+0x48>
 800ac64:	4621      	mov	r1, r4
 800ac66:	4638      	mov	r0, r7
 800ac68:	f7ff ff8e 	bl	800ab88 <_malloc_r>
 800ac6c:	4605      	mov	r5, r0
 800ac6e:	2800      	cmp	r0, #0
 800ac70:	d0f2      	beq.n	800ac58 <_realloc_r+0x1c>
 800ac72:	4631      	mov	r1, r6
 800ac74:	4622      	mov	r2, r4
 800ac76:	f7ff fbf7 	bl	800a468 <memcpy>
 800ac7a:	4631      	mov	r1, r6
 800ac7c:	4638      	mov	r0, r7
 800ac7e:	f7ff ff33 	bl	800aae8 <_free_r>
 800ac82:	e7e9      	b.n	800ac58 <_realloc_r+0x1c>
 800ac84:	4635      	mov	r5, r6
 800ac86:	e7e7      	b.n	800ac58 <_realloc_r+0x1c>

0800ac88 <_sbrk_r>:
 800ac88:	b538      	push	{r3, r4, r5, lr}
 800ac8a:	4d06      	ldr	r5, [pc, #24]	; (800aca4 <_sbrk_r+0x1c>)
 800ac8c:	2300      	movs	r3, #0
 800ac8e:	4604      	mov	r4, r0
 800ac90:	4608      	mov	r0, r1
 800ac92:	602b      	str	r3, [r5, #0]
 800ac94:	f7fc ffac 	bl	8007bf0 <_sbrk>
 800ac98:	1c43      	adds	r3, r0, #1
 800ac9a:	d102      	bne.n	800aca2 <_sbrk_r+0x1a>
 800ac9c:	682b      	ldr	r3, [r5, #0]
 800ac9e:	b103      	cbz	r3, 800aca2 <_sbrk_r+0x1a>
 800aca0:	6023      	str	r3, [r4, #0]
 800aca2:	bd38      	pop	{r3, r4, r5, pc}
 800aca4:	20002e54 	.word	0x20002e54

0800aca8 <__malloc_lock>:
 800aca8:	4801      	ldr	r0, [pc, #4]	; (800acb0 <__malloc_lock+0x8>)
 800acaa:	f000 b811 	b.w	800acd0 <__retarget_lock_acquire_recursive>
 800acae:	bf00      	nop
 800acb0:	20002e5c 	.word	0x20002e5c

0800acb4 <__malloc_unlock>:
 800acb4:	4801      	ldr	r0, [pc, #4]	; (800acbc <__malloc_unlock+0x8>)
 800acb6:	f000 b80c 	b.w	800acd2 <__retarget_lock_release_recursive>
 800acba:	bf00      	nop
 800acbc:	20002e5c 	.word	0x20002e5c

0800acc0 <_malloc_usable_size_r>:
 800acc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800acc4:	1f18      	subs	r0, r3, #4
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	bfbc      	itt	lt
 800acca:	580b      	ldrlt	r3, [r1, r0]
 800accc:	18c0      	addlt	r0, r0, r3
 800acce:	4770      	bx	lr

0800acd0 <__retarget_lock_acquire_recursive>:
 800acd0:	4770      	bx	lr

0800acd2 <__retarget_lock_release_recursive>:
 800acd2:	4770      	bx	lr

0800acd4 <_init>:
 800acd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acd6:	bf00      	nop
 800acd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800acda:	bc08      	pop	{r3}
 800acdc:	469e      	mov	lr, r3
 800acde:	4770      	bx	lr

0800ace0 <_fini>:
 800ace0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ace2:	bf00      	nop
 800ace4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ace6:	bc08      	pop	{r3}
 800ace8:	469e      	mov	lr, r3
 800acea:	4770      	bx	lr
