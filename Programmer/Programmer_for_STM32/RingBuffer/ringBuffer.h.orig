#ifndef __ring_buffer_H
#define __ring_buffer_H

#include "main.h"

#define REC_BUF_SIZE 7000U

#define REC_BUF_LAST_ELEMENT (REC_BUF_SIZE-1)
#define MESSAGES_BUF_STRING_LENGHT 128U
#define MAX_LENGHT_ANSWER_STR 256U




struct RingBuffer{
volatile char arr [REC_BUF_SIZE];
uint16_t tail;	
};



typedef struct{
char string[MAX_LENGHT_ANSWER_STR];
uint16_t tail;	
} StringAnswer;


typedef struct{
uint64_t sizeOfMessage;
uint16_t tail;	
}SizeAnswer;

typedef enum {
RB_DATA_TYPE_UNNECESSARY =0U,
RB_DATA_TYPE_FILE_SIZE = 1U,	
RB_DATA_TYPE_FILE = 2U,	
RB_DATA_TYPE_NETWORKS =3U,
RB_DATA_TYPE_MESSAGE =4U,
RB_DATA_TYPE_DIRECTORIES = 5U	

}RB_DataType_t;


extern RB_DataType_t dataTypeRingBuf;
extern RB_DataType_t dataTypeRingBufAfterSize;


_Bool WriteByteToScreenList(volatile char* buffer);
SizeAnswer RB_GetSizeOfMessage(uint16_t beginStr, uint16_t EndStr);
StringAnswer ConvertAnswerToString(uint16_t beginStr, uint16_t EndStr);
void FindEndOfMessage(void);
static inline uint8_t sym2byte(char c);





#endif /*__ring_buffer_H */
